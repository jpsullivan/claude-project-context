<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/aspect-ratio/README.md</source>
<document_content>
# @radix-ng/primitives/avatar

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/aspect-ratio/index.ts</source>
<document_content>
export * from './src/aspect-ratio.directive';

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/aspect-ratio/ng-package.json</source>
<document_content>
{
    "lib": {
        "entryFile": "index.ts"
    }
}

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/aspect-ratio/stories/aspect-ratio.docs.mdx</source>
<document_content>
import { Canvas, Meta } from '@storybook/blocks';
import * as AspectRatioStories from './aspect-ratio.stories';

<Meta title="Primitives/Aspect Ratio" />

# Aspect Ratio

#### Displays content within a desired ratio.

<Canvas sourceState="hidden" of={AspectRatioStories.Default} />

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/aspect-ratio/stories/aspect-ratio.stories.ts</source>
<document_content>
import { componentWrapperDecorator, Meta, moduleMetadata, StoryObj } from '@storybook/angular';
import { RdxAspectRatioDirective } from '../src/aspect-ratio.directive';

const html = String.raw;

export default {
    title: 'Primitives/Aspect Ratio',
    decorators: [
        moduleMetadata({
            imports: [RdxAspectRatioDirective]
        }),
        componentWrapperDecorator(
            (story) => html`
                <div
                    class="radix-themes light light-theme radix-themes-default-fonts"
                    data-accent-color="indigo"
                    data-radius="medium"
                    data-scaling="100%"
                >
                    ${story}

                    <style>
                        .Container {
                            width: 300px;
                            border-radius: 6px;
                            overflow: hidden;
                            box-shadow: 0 2px 10px var(--black-a7);
                        }

                        .Image {
                            object-fit: cover;
                            width: 100%;
                            height: 100%;
                        }
                    </style>
                </div>
            `
        )
    ]
} as Meta;

type Story = StoryObj;

export const Default: Story = {
    render: () => ({
        template: html`
            <div class="Container">
                <div rdxAspectRatio [ratio]="16/9">
                    <img
                        class="Image"
                        src="https://images.unsplash.com/photo-1535025183041-0991a977e25b?w=300&dpr=2&q=80"
                        alt="Landscape photograph by Tobias Tullius"
                    />
                </div>
            </div>
        `
    })
};

export const Ratios: Story = {
    render: () => ({
        template: html`
            <div style="display: flex; gap: 20px;">
                <div style="width: 200px;">
                    <span style="color: white">1/2</span>
                    <div rdxAspectRatio [ratio]="1/2">
                        <img
                            class="Image"
                            src="https://images.unsplash.com/photo-1535025183041-0991a977e25b?w=300&dpr=2&q=80"
                            alt="Landscape photograph by Tobias Tullius"
                        />
                    </div>
                </div>
                <div style="width: 200px;">
                    <span style="color: white">1</span>
                    <div rdxAspectRatio>
                        <img
                            class="Image"
                            src="https://images.unsplash.com/photo-1535025183041-0991a977e25b?w=300&dpr=2&q=80"
                            alt="Landscape photograph by Tobias Tullius"
                        />
                    </div>
                </div>
                <div style="width: 200px;">
                    <span style="color: white">16/9</span>
                    <div rdxAspectRatio [ratio]="16/9">
                        <img
                            class="Image"
                            src="https://images.unsplash.com/photo-1535025183041-0991a977e25b?w=300&dpr=2&q=80"
                            alt="Landscape photograph by Tobias Tullius"
                        />
                    </div>
                </div>
                <div style="width: 200px;">
                    <span style="color: white">2/1</span>
                    <div rdxAspectRatio [ratio]="2/1">
                        <img
                            class="Image"
                            src="https://images.unsplash.com/photo-1535025183041-0991a977e25b?w=300&dpr=2&q=80"
                            alt="Landscape photograph by Tobias Tullius"
                        />
                    </div>
                </div>
            </div>
        `
    })
};

</document_content>
</document>
<document index="6">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/aspect-ratio/__tests__/aspect-ratio.directive.spec.ts</source>
<document_content>
import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { RdxAspectRatioDirective } from '../src/aspect-ratio.directive';

@Component({
    template: `
        <div [ratio]="ratio" rdxAspectRatio></div>
    `,
    imports: [RdxAspectRatioDirective]
})
class TestComponent {
    ratio = 16 / 9;
}

describe('AspectRatioDirective', () => {
    let fixture: ComponentFixture<TestComponent>;
    let component: TestComponent;

    beforeEach(() => {
        fixture = TestBed.configureTestingModule({
            imports: [TestComponent]
        }).createComponent(TestComponent);

        component = fixture.componentInstance;
        fixture.detectChanges();
    });

    it('should set paddingBottom correctly with rounded value', () => {
        const div: HTMLElement = fixture.nativeElement.querySelector('div');

        // 1 / (16/9) * 100 = 56.25%
        expect(div.style.paddingBottom).toBe('56.25%');
    });

    it('should set position to relative and width to 100%', () => {
        const div: HTMLElement = fixture.nativeElement.querySelector('div');

        expect(div.style.position).toBe('relative');
        expect(div.style.width).toBe('100%');
    });

    it('should update paddingBottom when ratio changes', () => {
        const div: HTMLElement = fixture.nativeElement.querySelector('div');

        component.ratio = 4 / 3;
        fixture.detectChanges();

        // 1 / (4/3) * 100 = 75%
        expect(div.style.paddingBottom).toBe('75%');
    });

    it('should set paddingBottom correctly for small ratios', () => {
        const div: HTMLElement = fixture.nativeElement.querySelector('div');

        component.ratio = 1 / 1;
        fixture.detectChanges();

        // 1 / (1/1) * 100 = 100%
        expect(div.style.paddingBottom).toBe('100%'); //
    });

    it('should set paddingBottom to 0% when ratio is 0 to avoid division by zero', () => {
        const div: HTMLElement = fixture.nativeElement.querySelector('div');

        component.ratio = 0;
        fixture.detectChanges();

        expect(div.style.paddingBottom).toBe('0%');
    });
});

</document_content>
</document>
<document index="7">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/aspect-ratio/src/aspect-ratio.directive.ts</source>
<document_content>
import { NumberInput } from '@angular/cdk/coercion';
import {
    AfterViewInit,
    computed,
    Directive,
    ElementRef,
    inject,
    input,
    numberAttribute,
    Renderer2
} from '@angular/core';

/**
 * Directive to maintain an aspect ratio for an element.
 * The element will have its `padding-bottom` dynamically calculated
 * based on the provided aspect ratio to maintain the desired ratio.
 * The content inside the element will be positioned absolutely.
 * @group Components
 */
@Directive({
    selector: '[rdxAspectRatio]',
    exportAs: 'rdxAspectRatio',
    standalone: true,
    host: {
        '[style.position]': `'relative'`,
        '[style.width]': `'100%'`,
        '[style.padding-bottom]': 'paddingBottom()'
    }
})
export class RdxAspectRatioDirective implements AfterViewInit {
    private readonly element = inject(ElementRef);
    private readonly renderer = inject(Renderer2);

    /**
     * The desired aspect ratio (e.g., 16/9).
     * By default, it is set to 1 (which results in a square, 1:1).
     * @group Props
     * @defaultValue 1
     */
    readonly ratio = input<number, NumberInput>(1, { transform: numberAttribute });

    /**
     * Dynamically computed `padding-bottom` style for the element.
     * This value is calculated based on the inverse of the aspect ratio.
     *
     * If the ratio is zero, it defaults to `0%` to avoid division by zero.
     *
     */
    protected readonly paddingBottom = computed(() => {
        const ratioValue = this.ratio();
        return `${ratioValue !== 0 ? (1 / ratioValue) * 100 : 0}%`;
    });

    ngAfterViewInit() {
        const content = this.element.nativeElement.firstElementChild;
        if (content) {
            // Set the content to cover the entire element with absolute positioning
            this.renderer.setStyle(content, 'position', 'absolute');
            this.renderer.setStyle(content, 'inset', '0');
        }
    }
}

</document_content>
</document>
</documents>
