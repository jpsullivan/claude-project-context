<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-radio/compat.ts</source>
<document_content>
import { convertNxGenerator } from '@nx/devkit';
import migrateRadioGenerator from './generator';

export default convertNxGenerator(migrateRadioGenerator);

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-radio/generator.spec.ts</source>
<document_content>
import { applicationGenerator, E2eTestRunner, UnitTestRunner } from '@nx/angular/generators';
import { Tree } from '@nx/devkit';
import { createTreeWithEmptyWorkspace } from '@nx/devkit/testing';
import { migrateRadioGenerator } from './generator';

// patch some imports to avoid running the actual code
jest.mock('enquirer');
jest.mock('@nx/devkit', () => {
	const original = jest.requireActual('@nx/devkit');
	return {
		...original,
		ensurePackage: (pkg: string) => jest.requireActual(pkg),
		createProjectGraphAsync: jest.fn().mockResolvedValue({
			nodes: {},
			dependencies: {},
		}),
	};
});

describe('migrate-radio generator', () => {
	let tree: Tree;

	beforeEach(async () => {
		tree = createTreeWithEmptyWorkspace();

		await applicationGenerator(tree, {
			name: 'app',
			directory: 'app',
			skipFormat: true,
			e2eTestRunner: E2eTestRunner.None,
			unitTestRunner: UnitTestRunner.None,
			skipPackageJson: true,
			skipTests: true,
		});
	});

	it('should remove BrnRadioComponent and replace HlmRadioDirective with HlmRadioComponent (NgModule)', async () => {
		tree.write(
			'app/src/app/app.module.ts',
			`
			import { NgModule } from '@angular/core';
			import { BrowserModule } from '@angular/platform-browser';
			import { BrnRadioComponent } from '@spartan-ng/brain/radio-group';
			import { HlmRadioDirective, HlmRadioGroupComponent } from '@spartan-ng/ui-radiogroup-helm';

			@NgModule({
				imports: [BrowserModule, BrnRadioComponent, HlmRadioDirective, HlmRadioGroupComponent],
			})
			export class AppModule {}
			`,
		);

		await migrateRadioGenerator(tree, { skipFormat: true });

		const content = tree.read('app/src/app/app.module.ts', 'utf-8');
		expect(content).not.toContain(`import { BrnRadioComponent } from '@spartan-ng/brain/radio-group';`);
		expect(content).toContain(
			`import { HlmRadioComponent, HlmRadioGroupComponent } from '@spartan-ng/ui-radiogroup-helm';`,
		);
		expect(content).toContain(`imports: [BrowserModule, HlmRadioComponent, HlmRadioGroupComponent],`);
	});

	it('should replace BrnRadioComponent template (Standalone)', async () => {
		tree.write(
			'app/src/app/app.component.ts',
			`
				import { Component } from '@angular/core';
				import { BrnRadioComponent } from '@spartan-ng/brain/radio-group';
				import { HlmRadioDirective, HlmRadioGroupComponent } from '@spartan-ng/ui-radiogroup-helm';
				@Component({
					imports: [BrnRadioComponent, HlmRadioDirective, HlmRadioGroupComponent],
					template: \`
						<hlm-radio-group class="font-mono text-sm font-medium" [(ngModel)]="version">
							<brn-radio hlm value="16.1.4">
								v16.1.4
							</brn-radio>
						</hlm-radio-group>
					\`
				})
				export class AppModule {}
				`,
		);

		await migrateRadioGenerator(tree, { skipFormat: true });

		const content = tree.read('app/src/app/app.component.ts', 'utf-8');
		expect(content).not.toContain(`import { BrnRadioComponent } from '@spartan-ng/brain/radio-group';`);
		expect(content).toContain(
			`import { HlmRadioComponent, HlmRadioGroupComponent } from '@spartan-ng/ui-radiogroup-helm';`,
		);
		expect(content).toContain(`imports: [HlmRadioComponent, HlmRadioGroupComponent],`);
		expect(content).toContain(`<hlm-radio value="16.1.4">`);
	});
	it('should replace BrnRadioComponent also if the hlm is not directly after the brn-radio tag (Standalone)', async () => {
		tree.write(
			'app/src/app/app.component.ts',
			`
				import { Component } from '@angular/core';
				import { BrnRadioComponent } from '@spartan-ng/brain/radio-group';
				import { HlmRadioDirective, HlmRadioGroupComponent } from '@spartan-ng/ui-radiogroup-helm';

				@Component({
					imports: [BrnRadioComponent, HlmRadioDirective, HlmRadioGroupComponent],
					template: \`
						<hlm-radio-group class="font-mono text-sm font-medium" [(ngModel)]="version">
							<brn-radio
			hlm
value="16.1.5">
								should be replaced 1
							</brn-radio>
							<brn-radio class="hlm" value="16.1.4">
								should not be replaced
							</brn-radio>
							<brn-radio class="hlm replace-me" value="hlm" hlm>
								should be replaced 2
							</brn-radio>

						</hlm-radio-group>
					\`
				})
				export class AppModule {}
				`,
		);

		await migrateRadioGenerator(tree, { skipFormat: true });

		const content = tree.read('app/src/app/app.component.ts', 'utf-8');
		expect(content).toContain(`<brn-radio class="hlm" value="16.1.4">`);
		expect(content).toContain(`<hlm-radio class="hlm replace-me" value="hlm">`);
		expect(content).toContain(`<hlm-radio value="16.1.5">`);
	});
});

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-radio/generator.ts</source>
<document_content>
import { formatFiles, Tree } from '@nx/devkit';
import { visitFiles } from '../../utils/visit-files';
import { MigrateRadioGeneratorSchema } from './schema';

export async function migrateRadioGenerator(tree: Tree, { skipFormat }: MigrateRadioGeneratorSchema) {
	updateImports(tree);
	replaceSelector(tree);

	if (!skipFormat) {
		await formatFiles(tree);
	}
}

function replaceSelector(tree: Tree) {
	// if the element is `<brn-radio hlm` then we need to replace it with `<hlm-radio`
	// we also need to replace the closing tag `</brn-radio>` with `</hlm-radio>`
	visitFiles(tree, '.', (path) => {
		// if this is not an html file or typescript file (inline templates) then skip
		if (!path.endsWith('.html') && !path.endsWith('.ts')) {
			return;
		}

		let content = tree.read(path, 'utf-8');

		if (!content) {
			return;
		}

		// <brn-radio hlm but between
		content = replaceBrnRadioHlm(content);
		content = content.replace(/<\/brn-radio>/g, '</hlm-radio>');

		tree.write(path, content);
	});
}

function replaceBrnRadioHlm(input) {
	// Split input to handle multiple tags separately
	return input
		.split(/(?=<)/)
		.map((tag) => {
			// Skip if not a brn-radio tag
			if (!tag.startsWith('<brn-radio')) {
				return tag;
			}

			// Remove line breaks, tabs, and other whitespace within the tag
			// Replace with a single space
			tag = tag.replace(/\s+/g, ' ');

			// Check if standalone hlm attribute exists
			const hasHlm = / hlm(?=[\s>])/.test(tag);

			if (hasHlm) {
				// Remove the hlm attribute and convert to hlm-radio
				return tag
					.replace(/<brn-radio/, '<hlm-radio')
					.replace(/ hlm(?=[\s>])/, '')
					.replace(/\s+>/g, '>')
					.replace(/\s+/g, ' ');
			}

			return tag;
		})
		.join('');
}
/**
 * Update imports remove BrnRadioComponent import and replace HlmRadioDirective with HlmRadioComponent
 */
function updateImports(tree: Tree) {
	visitFiles(tree, '/', (path) => {
		const content = tree.read(path).toString('utf-8');

		if (content.includes('@spartan-ng/brain/radio-group') || content.includes('@spartan-ng/ui-radiogroup-helm')) {
			const updatedContent = content
				// Handle `import { BrnRadioComponent } from '@spartan-ng/brain/radio-group';`
				.replace("import { BrnRadioComponent } from '@spartan-ng/brain/radio-group';", '')
				// Remove `BrnRadioComponent` with optional comma and whitespace
				.replace(/BrnRadioComponent,?\s?/, '')
				// Replace all `HlmRadioDirective` with `HlmRadioComponent`
				.replaceAll('HlmRadioDirective', 'HlmRadioComponent');

			tree.write(path, updatedContent);
		}
	});
}

export default migrateRadioGenerator;

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-radio/schema.d.ts</source>
<document_content>
export interface MigrateRadioGeneratorSchema {
	skipFormat?: boolean;
}

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-radio/schema.json</source>
<document_content>
{
	"$schema": "https://json-schema.org/schema",
	"$id": "MigrateRadio",
	"title": "",
	"type": "object",
	"properties": {
		"skipFormat": {
			"type": "boolean",
			"default": false,
			"description": "Skip formatting files"
		}
	},
	"required": []
}

</document_content>
</document>
</documents>
