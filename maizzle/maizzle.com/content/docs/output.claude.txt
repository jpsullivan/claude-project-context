<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/api.md</source>
<document_content>
---
title: "API"
description: "Using the API to compile an HTML email styled with Tailwind CSS."
---

# API

Use the Maizzle API to compile a string to an HTML email.

## Example

```js [app.js]
import { render } from '@maizzle/framework'
import tailwindcssPresetEmail from 'tailwindcss-preset-email'

let input = `---
title: Hello, world!
---

<!doctype html>
<html>
  <head>
    <style>
      @tailwind components;
      @tailwind utilities;
    </style>
  </head>
  <body>
    <div class="p-4 bg-blue-500 text-white">
      {{ page.title }}
    </div>
  </body>
</html>`

const { html } = await render(input,
  {
    css: {
      inline: true,
      purge: true,
      shorthand: true,
      tailwind: {
        presets: [tailwindcssPresetEmail],
        content: [
          {
            raw: input,
            extension: 'html'
          }
        ]
      }
    }
  }
)
console.log(html)
```

Your `html` string must include at least `<style> @tailwind utilities; </style>` inside the `<head>`, otherwise no CSS will be output or inlined.

Notice also the `css.tailwind` config.

The `content` key is needed for Tailwind to know where to look for classes to generate - otherwise your `<style>` tag will be empty and no CSS would be inlined either.

We also pass a `presets` array with the `tailwindcss-preset-email` package, which configures Tailwind to output CSS values optimized for HTML email.

## Usage

First, import the `render` method in your application:

```js [app.js]
import { render } from '@maizzle/framework'
```

<alert>Use object destructuring so that you don't import all the other methods from Maizzle, like `serve`.</alert>

Then, call it with two parameters: the HTML string to compile and a Maizzle config object.

```js [app.js]
import { render } from '@maizzle/framework'

const options = {
  // Maizzle config object
}

const { html, config } = await render(`html string`, options)
```

The `render` method returns an object containing the compiled HTML and the [Environment config](/docs/environments) that was computed for it.

### Options

`options` is an object with Maizzle configuration, like you would do in `config.js`.

For example:

```js
{
  css: {
    inline: true,
    purge: true,
    shorthand: true,
  },
  afterRender({html, config, matter}) {
    // ...
  },
}
```

### Tailwind&nbsp;CSS

When using the API, you might not have a `tailwind.config.js` file in the current directory.

If a `tailwind.config.js` cannot be found in the current directory (where you execute the script), the default Tailwind CSS config will be used. In order to avoid this, you may pass your own Tailwind CSS config inside the `options` object.

For example, let's use `tailwindcss-preset-email` when rendering templates programmatically:

```js [app.js]
import { render } from '@maizzle/framework'
import tailwindcssPresetEmail from 'tailwindcss-preset-email'

const input = `
  <style>
    @tailwind utilities;
  </style>

  <div class="p-2">Test</div>`

const { html } = await render(input, {
  css: {
    tailwind: {
      presets: [tailwindcssPresetEmail],
      content: [
        {
          raw: input,
          extension: 'html'
        }
      ]
    }
  }
})
```

In order for Tailwind to actually generate CSS based on classes in your `input` string, you need to pass the `content` key with an array of objects that contain the raw content and the file extension.

## Templating

Of course, templating tags are available when using Maizzle programmatically.

```js [app.js]
let html = `---
title: Using Maizzle programmatically
---

<x-main>
  <!-- your email HTML... -->
</x-main>`
```

<Alert type="danger">Paths to Layouts or Components in your string must be relative to the location where you execute the script.</Alert>
<Alert type="danger">Component `x-` tags only work in Node.js and when the referenced files are available on disk.</Alert>

## Gotchas

Since the options object that you can pass to the `render` method is optional, there are a few gotchas that you need to be aware of.

### Tailwind config

Maizzle will use the Tailwind CSS config object as-is, which means that if you just include the `content` key it will generate CSS with the default values like `rem` or CSS variables.

In order to generate CSS optimized for HTML email, you need to fully configure Tailwind in the `css.tailwind` object. The simplest way to do this is to use a preset like `tailwindcss-preset-email`, as shown in the example above.

### Default Tailwind

If you don't specify a [Tailwind config object](#tailwindcss), Maizzle will try to compile Tailwind using `tailwind.config.js` at your current path.

_If the file is not found, Tailwind CSS will be compiled with its [default config](https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js)._

The default config is not optimized for HTML email: it uses units like `rem` and CSS properties that are used for _web_ design and which have little to no support in the majority of email clients.

Also, the default Tailwind config will not include any `content` paths that should be scanned for generating utility classes, meaning that the `<style>` tag in your email will be empty.

### Transformers

Most Transformers, such as CSS inlining or minification, are opt-in: they transform content only when you enable them. Since you don't need to pass in a Maizzle config object, this means that most of them will not run.

The following Transformers always run:

- Markdown (can be disabled)
- Prevent Widows
- Remove Attributes - removes empty `style` attributes by default
- Filters - provides various [text filters](/docs/transformers/filters)

### CSS Output

You must add the `@tailwind` directives in a `<style>` tag in the `<head>` of your email HTML, otherwise Tailwind CSS will not be compiled.

```html {4-7}
<!doctype html>
<html>
  <head>
    <style> /* [!code ++] */
      @​tailwind components; /* [!code ++] */
      @​tailwind utilities; /* [!code ++] */
    </style> /* [!code ++] */
  </head>
  <body>
    ...
  </body>
</html>
```

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/assets.md</source>
<document_content>
---
title: "Assets"
description: "How Maizzle handles asset files when building your HTML emails."
---

# Asset Files

Any files that you add to your [content sources](/docs/configuration/build#content) will be copied over to the root of the build destination directory, so you can organize your email templates as needed.

## Global assets

You may define a global email assets folder that will be copied to the build directory. The Starter sets it to the `images` directory:

```js [config.js]
export default {
  build: {
    static: {
      source: ['images/**/*'],
      destination: 'images',
    }
  }
}
```

Everything inside `static.source` will be copied to the `static.destination` directory, which is relative to [`build.output.path`](/docs/configuration/build#path).

## Multiple sources

You may define multiple asset source paths and all files from those paths will be copied to a single destination directory:

```js [config.js]
export default {
  build: {
    static: {
      source: ['images/**/*', 'fonts/**/*'],
      destination: 'assets'
    }
  }
}
```

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/build-process.md</source>
<document_content>
---
title: "Build process"
description: "See how the build process works and how Maizzle builds your emails."
---

# Build process

When you run `maizzle build`, your Templates go through a series of events that compile them to plain HTML and apply various, email-specific transformations.

To get a better understanding of how Maizzle builds your emails, here's a step-by-step guide of what's going on under the hood.

## Environment config

First, a global configuration object is computed by merging your Environment config on top of the base `config.js`.

For example, running `maizzle build production` will tell Maizzle to look for the `config.production.js` file at your current location, and merge it on top of `config.js`.

When running `maizzle build` or `maizzle serve`, only the base `config.js` will be used.

## beforeCreate()

The [beforeCreate](/docs/events#beforecreate) event (CLI-only) is triggered, giving you access to the config before Maizzle loops over your Templates to compile them.

## Clean destination

The destination directories that you have defined under `build.output.path` in your environment config are deleted.

<Alert type="warning">Be careful when customizing this path, so you don't end up deleting important directories and files on your machine.</Alert>


## Compile templates

Each Template file is parsed and compiled:

1. Maizzle reads the Template file
1. It extracts its Front Matter
1. A unique Template `config` is computed by merging the Template's Front Matter keys with the Environment `config`
1. [beforeRender()](/docs/events#beforerender) event is triggered
1. The HTML is rendered with PostHTML
    <br><br>
    Your Environment name and all `config` options (including any you defined in Front Matter) are exposed under the `page` object, which you can access through [expressions](/docs/expressions).
    <br><br>
    PostHTML plugins that are used as part of the rendering process:
    - envTags - core plugin that enables [`<env:?>`](/docs/tags#env) tags
    - envAttributes - core plugin that enables attributes like `src-{env}`
    - expandLinkTags - core plugin that expands local [`<link>` tags](/docs/layouts#link-tag) into `<style>` tags
    - postcssPlugin - this is where the Tailwind CSS magic happens
    - fetchPlugin - enables the [`<fetch>`](/docs/tags#fetch) tag
    - [`posthtml-component`](https://github.com/posthtml/posthtml-components) - the PostHTML plugin that powers Maizzle's components
1. [afterRender()](/docs/events#afterrender) event is triggered

## Transformers

The compiled HTML is now passed on to a series of Transformers. Most of them are enabled by default, but some need to be explicitly enabled in your `config.js`.

The order in which they're executed is exactly as follows:

1. coreTransformers - remove `<plaintext>` tags when developing locally, enable `no-inline` attribute for `<style>` tags
1. [safeClassNames](/docs/transformers/safe-class-names) - escaped characters in `<head>` and `<body>` CSS classes are replaced with email-safe alternatives
1. [filters](/docs/transformers/filters) - Liquid-like filters are applied to the HTML
1. [markdown](/docs/markdown) is compiled
1. [widowWords](/docs/transformers/widows) - widow words are prevented in tags with the `prevent-widows` attribute
1. [attributeToStyle](/docs/transformers/inline-css#attributetostyle) - translates HTML attributes to inline CSS
1. [inlineCSS](/docs/transformers/inline-css) - CSS is inlined
1. [removeAttributes](/docs/transformers/remove-attributes) - HTML attribute removal based on your config
1. [shorthandCSS] - longhand CSS in `style` attributes is converted to shorthand-form
1. [addAttributes](/docs/transformers/add-attributes) - user-configured attributes are added to tags
1. [baseURL](/docs/transformers/base-url) - a base URL is prepended to configured attribute values
1. [urlParameters](/docs/transformers/url-parameters) - configured parameters are added to URLs
1. [sixHex](/docs/transformers/six-hex) - ensures six digit HEX color codes are used in `bgcolor` and `color` attributes
1. [posthtmlMSO](/docs/tags#outlook) - `<outlook>` tags are replaced with the correct MSO comments
1. [purgeCSS](/docs/transformers/purge-css) - unused CSS is removed from `<style>` tags and HTML attributes
1. [templateTag](/docs/tags#template) - `<template>` tags are replaced with their content
1. [replaceStrings](/docs/transformers/replace-strings) - strings are replaced based on your config
1. [prettify](/docs/transformers/prettify) - HTML is prettified
1. [minify](/docs/transformers/minify) - HTML is minified

## afterTransformers()

The [afterTransformers](/docs/events#aftertransformers) event is triggered.

## Plaintext

A plaintext version is created at the [configured location](/docs/plaintext#custom-path), if `plaintext` was enabled.

## Write to disk

The compiled HTML is saved at the [configured location](/docs/configuration/build#path), with the [configured extension](/docs/configuration/build#extension).

## Copy static files

All files and folders in `build.static.source` are copied to `build.static.destination`.

## afterBuild()

The [afterBuild](/docs/events#afterbuild) event is triggered (CLI-only).

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/cli.md</source>
<document_content>
---
title: "CLI Tool"
description: "Using the Maizzle CLI tool to scaffold projects and build emails."
---

# Maizzle CLI

You can use the Maizzle CLI to:

- create new projects
- generate config files
- build your HTML emails
- scaffold Templates or Layouts

## Installation

Install the CLI tool globally, so that the `maizzle` executable gets added to your `$PATH` :

```sh
npm install -g @maizzle/cli
```

## Creating a project

Scaffold a Maizzle project by opening a Terminal and running:

```sh
maizzle new
```

This will bring up an interactive prompt that will guide you through the process.

## Development

The CLI tool provides commands for developing HTML emails with Maizzle.

### serve

```sh
maizzle serve [env]
```

| Argument | Required | Default | Description
| --- | --- | --- | --- |
| `[env]` | no |  `local` | An [Environment](/docs/environments) name to use

| Option | Short | Description
| --- | --- | --- |
| `--bin` | `-b` | Path to the Maizzle executable
| `--config` | `-c` | Path to a config file to use
| `--port` | `-p` | Port number to run the server on

Use the `maizzle serve` command to start a local development server, which you can access in your browser at http://localhost:3000.

`[env]` is optional, you can simply run `maizzle serve` and a server will be started using the settings from your project's `config.js`.

You can edit a Template or Component in your code editor, save it, and the changes will instantly be reflected in the browser.

#### serve \[env\]

You may specify which Environment config file to use by passing an `[env]` argument:

```sh
maizzle serve production
```

In this example, a local development server will be started using the settings from your project's `config.production.js`.
You can use this to start a dev server that uses settings from a different Environment config file.

#### --bin

If needed, you may specify the path to Maizzle's executable by passing the `--bin` flag:

```sh
maizzle serve --bin /path/to/@maizzle/framework/src
```

#### --config

You may specify the path to a config file by passing the `--config` flag:

This config file path takes precedence over the `[env]` argument, so for example the `dev.config.js` file will be used even if `production` is passed:

```sh
maizzle serve production --config /path/to/dev.config.js
```

#### --port

You may pass the `--port` flag to specify a port number to run the server on:

```sh
maizzle serve --port 8080
```

By default, `maizzle serve` will start on port `3000`.

### build

```sh
maizzle build [env]
```

The `build` command is used to compile your Templates and output them to the destination directory. If `[env]` is specified, Maizzle will try to compute an Environment config by merging `config.[env].js` on top of the default `config.js`.

| Argument | Required | Default | Description
| --- | --- | --- | --- |
| `[env]` | no |  `local` | An Environment name to use

| Option | Short | Description
| --- | --- | --- |
| `--bin` | `-b` | Path to the Maizzle executable
| `--config` | `-c` | Path to a config file to use
| `--summary` | `-s` | Show a summary of the build process

<Alert>If no `[env]` is specified, Maizzle will use `config.js` from the current working directory.</Alert>

#### --bin

If needed, you may specify the path to Maizzle's executable by passing the `--bin` flag:

```sh
maizzle build --bin /path/to/@maizzle/framework/src
```

#### --config

You may specify the path to a config file by passing the `--config` flag:

```sh
maizzle build --config /path/to/custom-config.js
```

The Environment config will be computed based exclusively on the contents of the specified file, there will be no merging with `config.js`.

Also, specifying a config file path takes precedence over the `[env]` argument.

In this example, `custom-config.js` will be used even if `production` is passed:

```sh
maizzle build production --config /path/to/custom-config.js
```

#### --summary

You may pass the `--summary` flag to show a summary of the build process:

```sh no-root no-copy
$ maizzle build production --summary
```

This will output a list of all the Templates that were built, their compiled file size, and how long it took to build each one:

```md
┌────────────────────────┬───────────┬────────────┐
│ File name              │ File size │ Build time │
├────────────────────────┼───────────┼────────────┤
│ confirmation.html      │ 5.07 KB   │ 432 ms     │
├────────────────────────┼───────────┼────────────┤
│ email-change.html      │ 5.07 KB   │ 79 ms      │
├────────────────────────┼───────────┼────────────┤
│ invitation.html        │ 5.08 KB   │ 81 ms      │
├────────────────────────┼───────────┼────────────┤
│ password-recovery.html │ 4.99 KB   │ 65 ms      │
└────────────────────────┴───────────┴────────────┘

✔ Built 4 templates in 698 ms
```

## Scaffolding

CLI commands for creating new projects and scaffolding Templates or config files.

### make:config

```sh
maizzle make:config
```

This command will start an interactive prompt that will guide you through the process of creating a new Maizzle config file.

You may skip the prompt by passing a name for the config file:

```sh
maizzle make:config [env]
```

| Option | Shorthand | Description
| --- | --- | --- |
| `[env]` | n/a | Environment name to use for the config file name.
| `--full` | `-f` |  Scaffold a full config.

The `[env]` option is an Environment name, like `preview`.

For example, let's scaffold `config.preview.js`:

```sh
maizzle make:config preview
```

By default, a minimal config will be output:

```js [config.preview.js]
/** @type {import('@maizzle/framework').Config} */
export default {
  build: {
    content: ['emails/**/*.html'],
    output: {
      path: 'build_preview',
    },
  },
}
```

If you want a full config, use the `--full` option:

```sh
maizzle make:config preview --full
```

### make:layout

```sh
maizzle make:layout
```

Scaffolds a new Layout.

Running it with no arguments will present an interactive prompt.

The same Layout structure from the Starter will be output.

You may skip the prompt by passing in arguments:

| Argument | Description
| --- | --- |
| `filepath` | Full path of the file to create, including file name

```sh
maizzle make:layout layouts/layout.html
```

<Alert type="warning">If the file already exists, an error will be thrown. The file will _not_ be overwritten.</Alert>

Paths may be relative to the project root:

```sh
maizzle make:layout ../global-emails/layouts/layout.html
```

### make:template

```sh
maizzle make:template
```

Scaffolds a new Template.

Running it with no arguments will present an interactive prompt.

A minimal Template structure will be output:

```hbs [emails/my-template.html]
---
preheader: "Sample preheader text"
---

<x-main>
  <!-- your HTML... -->
</x-main>
```

You may skip the prompt by passing in arguments:

| Argument | Description
| --- | --- |
| `filepath` | Full path of the file to create, including file name

```sh
maizzle make:template emails/my-template.html
```

<Alert type="warning">If the file already exists, an error will be thrown. The file will _not_ be overwritten.</Alert>

Paths may be relative to the project root:

```sh
maizzle make:template ../global-emails/my-template.html
```

### make:component

```sh
maizzle make:component
```

Scaffolds a new Component.

Running it with no arguments will present an interactive prompt.

You may skip the prompt by passing in arguments:

| Argument | Description
| --- | --- |
| `filepath` | Full path of the file to create, including file name

```sh
maizzle make:component components/my-component.html
```

A minimal Component structure will be output:

```hbs [components/my-component.html]
<script props>
  module.exports = {
    greeting: props.greeting || 'Hello, World!',
  }
</script>

{{ greeting }}

<yield />
```

<Alert type="warning">If the file already exists, an error will be thrown. The file will _not_ be overwritten.</Alert>

Paths may be relative to the project root:

```sh
maizzle make:component ../global-emails/components/my-component.html
```

### make:tailwind

```sh
maizzle make:tailwind [filepath]
```

Scaffolds a new Tailwind CSS config based on the one in the [Starter](https://github.com/maizzle/maizzle/blob/master/tailwind.config.js).

Running it with no arguments will present an interactive prompt.

A minimal Tailwind CSS config will be output:

```js [tailwind.config.js]
/** @type {import('tailwindcss').Config} */
module.exports = {
  presets: [
    require('tailwindcss-preset-email'),
  ],
  content: [
    './components/**/*.html',
    './emails/**/*.html',
    './layouts/**/*.html',
  ],
}
```

You can skip the prompt by passing in arguments:

| Argument | Description
| --- | --- |
| `filepath` | Full path of the file to create, including file name

```sh
maizzle make:tailwind config/tailwind.config.js
```

<Alert type="warning">If the file already exists, an error will be thrown. The file will _not_ be overwritten.</Alert>

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/compatibility.md</source>
<document_content>
---
title: "Compatibility"
description: "Email client compatibility and what Maizzle does to help improve your template's rendering."
---

# Compatibility

Maizzle gives you complete freedom to code your HTML emails however you like, there's no definitive compatibility chart. It really depends on your markup.

Wherever possible, the framework tries to help through configuration and tools that you can use to code emails that render well.

For example, the [official Starter](https://github.com/maizzle/maizzle) uses a custom Tailwind CSS preset and plugins that output more email client-friendly CSS, or that help you target specific email clients.

Tailwind CSS itself is [configured](/docs/configuration/css#tailwindconfigjs) to use values that are better supported by email clients, like `px` instead of `rem` or HEX colors instead of CSS variables.

However, when it comes to markup, it's really up to you how well your emails will render.

## Components

The Maizzle Starter includes a few components, such as Spacer, Divider, or Button.

These have been render-tested to work well in the most popular email clients, including iOS/Mail, Gmail, Outlook, and Yahoo!.

## Can I Email

The [caniemail.com](https://www.caniemail.com/) website is a great resource if you need to check which email clients will support your HTML or CSS.

## Testing

When coding HTML emails, you should always run render tests in the most popular email clients - tools like [Email on Acid](https://www.emailonacid.com/), [Litmus](https://www.litmus.com/) or [Testi@](https://testi.at/) can help with that.

Finally, another common (and good) practice is to send yourself a test email before sending to your subscribers.

Simulating a send from the same system you're going to use (be it your ESP or your application) is a very good way of catching any missed errors or edge-cases.

</document_content>
</document>
<document index="6">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/components.md</source>
<document_content>
---
title: "Components"
description: "Use components into your HTML email templates and render them with custom slot content and data."
---

# Components

Components help you organize blocks of markup into files that can be referenced throughout your project with simple, declarative syntax.

## Usage

To create a Component, add an HTML file in `components`:

```html [components/alert.html]
<div>
  <yield />
</div>
```

The `<yield />` tag will be replaced with the content passed to the Component:

```html [emails/example.html]
<x-alert>
  This text will replace the `yield` tag in the Component.
</x-alert>
```

Result:

```html [build_production/example.html]
<div>
  This text will replace the `yield` tag in the Component.
</div>
```

## Includes

You can safely omit the `<yield />` tag if you want to use Components as includes, and don't actually need to pass any content to them:

```html [components/alert.html]
<div>
  This is a Component used as an include.
</div>
```

```html [emails/example.html]
<x-alert />
```

Result:

```html [build_production/example.html]
<div>
  This is a Component used as an include.
</div>
```

## Tags

There are two ways to use Components:

- through the x-tag syntax
- through the `<component>` tag

### x-tag

Component names are automatically registered and can be used without having to specify their file path, by using a Blade-like syntax: start with the string `x-` followed by the `kebab-case` name of the component file.

For example, let's use the `alert.html` Component we created earlier:

```html [emails/example.html]
<x-alert>
  This text will replace the <yield /> tag in the Component.
</x-alert>
```

The following naming convention is used:

| Component file | x-tag syntax |
| -------------- | ----- |
| `alert.html` | `<x-alert>` |
| `alert_info.html` | `<x-alert_info>` |
| `AlertInfo.html` | `<x-alertinfo>` |

As you can see, the second and last examples are not very readable, which is why we recommend using a [nested file structure](#nested-file-structure) instead.

### &lt;component&gt; tag

Alternatively, you may use the `<component>` tag to insert a Component:

```html [emails/example.html]
<component src="components/alert.html">
  This text will replace the <yield /> tag in the Component.
</component>
```

The `src` attribute is mandatory and it needs to point to the Component's file path, relative to the project root.
If you're used to partials that you simply include in your HTML, this may look more familiar.

<Alert type="warning">The `src` attribute is reserved on Components, make sure not to use it as a [prop](#props) name.</Alert>

## Nested file structure

If a Component is nested deeper within your `components` directory, you can reference it through dot notation.

For example, consider the following Component:

```html [components/button/alt.html]
<a href="https://maizzle.com">
  <yield />
</a>
```

You may reference it like this:

```html [emails/example.html]
<x-button.alt>
  Go to website
</x-button.alt>
```

The nested folder path comes after `x-`, and the file name comes after the dot.

### Index files

If you add an `index.html` Component inside a nested directory, you can also reference it without its file name part:

```html [components/button/index.html]
<a href="https://maizzle.com">
  <yield />
</a>
```

Both of these will work and use the same `button/index.html` Component:

```html [emails/example.html]
<x-button>
  Go to website
</x-button>

<x-button.index>
  Go to website
</x-button.index>
```

## Slots

A Component may define slots, which act as placeholders that can be replaced (filled) with code when you use it.

For example, let's create a banner Component with a slot for a custom title:

```html [components/banner.html]
<div role="banner">
  <slot:title />

  <yield />
</div>
```

We can use it like this:

```html [emails/example.html]
<x-banner>
  <fill:title>
    <h2>This is the title</h2>
  </fill:title>

  <p>This is the content</p>
</x-banner>
```

The result will be:

```html [build_production/example.html]
<div role="banner">
  <h2>This is the title</h2>

  <p>This is the content</p>
</div>
```

### Default content

A slot may have default content, which will be used if it hasn't been filled.

```html [components/banner.html]
<div role="banner">
  <h2>
    <slot:title>Default title</slot:title>
  </h2>

  <yield />
</div>
```

### Prepend

You may prepend content to a slot by using the `prepend` attribute on the `<fill>` tag.

```html [emails/example.html]
<x-banner>
  <fill:title prepend>Hello, </fill:title>

  <p>This is the content</p>
</x-banner>
```

With our default `slot:title` example, that would result in:

```html [build_production/example.html]
<div role="banner">
  <h2>Hello, Default title</h2>

  <p>This is the content</p>
</div>
```

### Append

You may also append content to a slot by using the `append` attribute on the `<fill>` tag.

```html [emails/example.html]
<x-banner>
  <fill:title append>, what a name!</fill:title>

  <p>This is the content</p>
</x-banner>
```

With our default `slot:title` example, that would result in:

```html [build_production/example.html]
<div role="banner">
  <h2>Default title, what a name!</h2>

  <p>This is the content</p>
</div>
```

### Check if a slot is filled

You may check if a slot has been filled by using the `$slots` variable in a Component.

For example, let's create a `<x-footer>` Component that will pull in another Component based on whether a `copyright` slot has been filled or not:

```html [components/footer.html]
<div>
  <yield />

  <if condition="$slots.copyright?.filled">
    <!-- components/copyright.html -->
    <x-copyright />
  </if>
</div>
```

## Stacks

You may push content to named stacks that can be rendered in other Components. This concept is similar to Blade's `stack` and `push` directives, also known as teleporting in frameworks like Vue.js.

For example, imagine you're coding a Shopify email template and need to add some Liquid code at the very top of the HTML, before the `doctype`.

You would modify your Layout to include a `stack` tag:

```html [layouts/layout.html]
<stack name="liquid-vars" />

<!doctype html>
<html>
<head>
  <style>
    @tailwind components;
    @tailwind utilities;
  </style>
</head>
<body>
  <yield />
</body>
```

<Alert type="danger">`stack` and `push` tags require a non-empty `name` attribute.</Alert>

You may then push content to that stack from a Template:

```html [emails/example.html]
<push name="liquid-vars">
  {% capture email_title %} Your shopping cart is waiting for you {% endcapture %}
</push>

<x-layout>
  <!-- your email HTML... -->
</x-layout>
```

Result:

```html [build_production/example.html]
{% capture email_title %} Your shopping cart is waiting for you {% endcapture %}

<!doctype html>
<!-- etc. -->
```

### once

You may use the `once` attribute on the `<push>` tag to only push content once in a rendering cycle. This is useful if you're rendering the Component in a loop and want to make sure the contents of `<push>` is only rendered once.

For example, imagine this Card Component:

```html [components/card.html]
<push name="head" once>
  <style>
    .card {
      @apply bg-white rounded-lg shadow-md;
    }
  </style>
</push>

<div class="card">
  <!-- ... -->
</div>
```

Looping over this Component will only push that CSS once to the `head` stack:

```html [emails/example.html]
<x-layout>
  <each loop="item in [1,2,3]">
    <x-card />
  </each>
</x-layout>
```

## Props

Props are attributes that can be added to a Component's tag. They can be used to pass data to the Component, or to configure its behavior.

To use props in a Component, you need to define them first. This is done by adding a `<script>` tag with the `props` attribute:

```hbs [components/alert.html]
<script props>
  module.exports = {
    title: props.title || 'Default title'
  }
</script>

<div>
  {{ title }}
</div>
```

<Alert type="warning">Only CommonJS syntax with `module.exports` is currently supported in Components.</Alert>

Props that you pass to the Component will be available in the `<script>` tag as the `props` object. In this example we're getting the `title` prop from `props.title`, falling back to a default value if it's not provided.

The script uses `module.exports` to export an object with props as keys. You can use these keys inside the Component through the curly braces syntax, as shown above.

To pass the `title` prop to the Component, you would use the `title` attribute:

```html [emails/example.html]
<x-alert title="Hello, world!" />
```

### Reserved props

The `src` prop is reserved when used on Components - it will always try to load a Component file at the path defined in the attribute value.

So if you're trying to pass a `src` prop to a Component, you should use a different name:

```hbs [components/alert.html] {3}
<script props>
  module.exports = {
    imgSrc: props['img-src'] || 'example.jpg',
  }
</script>

<img src="{{ imgSrc }}">
```

```html diff [emails/example.html] {2}
  <x-alert src="image.jpg" /> // [!code --]
  <x-alert img-src="image.jpg" /> // [!code ++]
```

Alternatively, you may change the prop attribute name to something other than `src`:

```js [config.js]
export default {
  components: {
    attribute: 'href',
  },
}
```

### Encoding props data

When passing a props object to a Component, you need to encode the values.

For example, these won't work:

```html
<x-alert props='{ "title": "Component's Title" }' />
```

```html
<x-alert props='{ "title": "Component\'s Title" }' />
```

But this will:

```html
<x-alert props='{ "title": "Component&#39;s Title" }' />
```

### Aware props

By default, props are scoped to the Component and are not available to nested Components. If you need to change this, you may use the `aware:` prefix when passing props to a Component:

Consider the following two Components:

```hbs [components/child.html]
<script props>
  module.exports = {
    title: props.title || 'Default child title'
  }
</script>

<div>
  Title in child: {{ title }}
</div>
```

```hbs [components/parent.html]
<script props>
  module.exports = {
    title: props.title || 'Default parent title'
  }
</script>

<div>
  Title in parent: {{ title }}
  <x-child />
</div>
```

If you pass the `title` to the `x-parent` Component:

```html [emails/example.html]
<x-parent title="Hello, world!" />
```

... the result will be:

```html [build_production/example.html]
<div>
  Title in parent: Hello, world!
  <div>
    Title in child: Default child title
  </div>
</div>
```

As you can see, the `title` prop was not passed down to the `x-child` Component, and it used the default value instead.

To make sure a prop is passed down to all nested Components, use the `aware:` prefix:

```html [emails/example.html]
<x-parent aware:title="Hello, world!" />
```

Now you'll see the result that you'd expect:

```html [build_production/example.html]
<div>
  Title in parent: Hello, world!
  <div>
    Title in child: Hello, world!
  </div>
</div>
```

## Attributes

You may pass HTML attributes to a Component and they will be added to the root element of the Component.

If you want to change the element to which the attributes are added, you can use the `attributes` attribute:

```html [components/example.html]
<table>
  <tr>
    <td attributes>
      <yield />
    </td>
  </tr>
</table>
```

### Expressions in attributes

[Expressions](/docs/expressions) may be used in a Component's attribute:

```hbs [emails/example.html]
---
title: "Hello, world!"
---

<x-alert title="{{ page.title }}" />
```

### Attribute removal

The following attributes will be removed from the target element:

- unknown HTML attributes (see [valid-attributes.js](https://github.com/thewebartisan7/posthtml-components/blob/main/src/valid-attributes.js))
- attributes that are defined as props in the Component

### Attribute merging

`class` and `style` attribute values will be merged with existing ones from the target element. All other attributes will be overwritten.

### Safelist attributes

If you need to safelist or even block certain HTML attributes that you pass to a Component, see the [Component configuration docs](/docs/configuration/components#elementattributes).

## Variables

When creating a Component, you have access to global `page` variables:

```hbs [components/example.html]
<div>
  Building for: {{ page.env }}
</div>
```

Using this `<x-example />` Component in a Template will render:

```html [build_production/example.html]
<div>
  Building for: production
</div>
```

</document_content>
</document>
<document index="7">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/editor-setup.md</source>
<document_content>
---
title: "Editor Setup"
description: "Setting up your editor for an enhanced Maizzle workflow."
---

# Editor Setup

Configuring your editor can help speed up your development workflow and ensures consistency when working in a team.

## Which editor to use?

Although you may use any text editor or IDE with Maizzle, we recommend [VS Code](https://code.visualstudio.com/) for its flexibility and available tooling.

## Tailwind CSS IntelliSense

The official [Tailwind CSS IntelliSense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss) extension for VS Code is probably the most important extension you'll want to install.

It provides utility class autocomplete, so you don't have to learn all those Tailwind class names. It also provides syntax highlighting and linting, letting you know immediately if you applied the same class twice, for example.

## .editorconfig

> EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs.

Simply install an [EditorConfig plugin](https://editorconfig.org/#download) for your editor - all Maizzle starters include a `.editorconfig` file that will automatically configure your editor.

## PostCSS syntax

Tailwind CSS includes some custom at-rules, like `@apply` or `@layer`, which may trigger warnings in your editor. This is handled automatically by the Tailwind CSS IntelliSense extension if you're using VS Code.

For other editors, or if you need full PostCSS language support, you might need to install an extension. For example, there's [PostCSS Language Support](https://marketplace.visualstudio.com/items?itemName=csstools.postcss) for VS Code.

## PostHTML Snippets

The [PostHTML Snippets](https://marketplace.visualstudio.com/items?itemName=cossssmin.posthtml) extension for VS Code provides autocomplete for PostHTML tags like `<extends>`, `<block>` or `<component>`.

</document_content>
</document>
<document index="8">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/environments.md</source>
<document_content>
---
title: "Environments"
description: "Define distinct build scenarios for your HTML email workflow, each with their own config and data."
---

# Environments

> When I run `maizzle build [environment]`, should CSS be inlined? Should my HTML be minified? Do I need to make some data available to the templates?

You might want to use different settings when developing locally versus when building the production-ready emails.

For example, you don't need CSS inlining or code indentation when developing on your computer, but you'll want both enabled for the final, production-ready emails.

Maizzle makes it easy to define as many build scenarios as you need, by using distinct configuration files that enable their own build command.

We call these Environments.

## Default Environments

Maizzle comes with two config files, each enabling its own build command:

| File                   | Command                                                  |
|------------------------|----------------------------------------------------------|
| `config.js`            | `maizzle build`<br>`maizzle serve`                       |
| `config.production.js` | `maizzle build production`<br>`maizzle serve production` |

You probably noticed the link between <span class="font-mono text-sm">config.<strong>production</strong>.js</span> and <span class="font-mono text-sm">maizzle build <strong>production</strong></span> - the keyword in the config file name enables its own build command.

<Alert>Remember, the `maizzle` executable will only be available if you installed the [CLI tool](/docs/cli) globally. Otherwise, use the NPM scripts provided by the Starter in `package.json`.</Alert>

### Config file naming

You may use the `maizzle.config.js` configuration file naming pattern if you prefer:

| File                           | Command                                                  |
|--------------------------------|----------------------------------------------------------|
| `maizzle.config.js`            | `maizzle build`<br>`maizzle serve`                       |
| `maizzle.config.production.js` | `maizzle build production`<br>`maizzle serve production` |

### CJS config

If you need to use CommonJS with `module.exports` and `require()` in your Maizzle config file, you'll need to change the file extension to `.cjs`:

| ESM                            | CJS                             |
|--------------------------------|---------------------------------|
| `config.js`                    | `config.cjs`                    |
| `config.production.js`         | `config.production.cjs`         |
| `maizzle.config.js`            | `maizzle.config.cjs`            |
| `maizzle.config.production.js` | `maizzle.config.production.cjs` |


### Data merging

Any new Environment configuration file that you create will be merged _on top_ of the base `config.js` when you run the build command for that particular Environment.

With the example above, when running the `maizzle build production` command, `config.production.js` will be merged on top of the base `config.js`: if the same key is present in both files, the value from `config.production.js` will be used.

<Alert>When creating a new Environment config file you only need to specify the config values that will be different from those (or don't exist) in `config.js`.</Alert>
<Alert type="warning">`build.content` keys are not merged, so that each Environment sources its own files to compile.</Alert>

## Environment builds

To build your emails for a specific Environment, pass its name as an argument to the `maizzle build` command:

```sh
maizzle build production
```

The Starter's `config.production.js` is configured to output production-ready emails in a `build_production` folder at the root of the project.

<Alert type="warning">In this example, if a `config.production.js` file is not found at the current location, the build will fail.</Alert>

## Custom Environments

You may create as many Environments as you need, and name them as you like.

For example, you might create a config file named `config.shopify.js` that you would use to build only the templates from the `emails/shopify` folder:

```js [config.shopify.js]
export default {
  build: {
    content: ['emails/shopify/**/*.html'],
    output: {
      path: 'build_shopify'
    }
  }
}
```

The build command for it would be:

```sh
maizzle build shopify
```

Or, if you're using NPM scripts and didn't set up a script for this Environment:

```sh
npm run build -- shopify
```


## Config variables

Maizzle exposes a `page` object that you can access through [expressions](/docs/expressions) in your HTML.

This object contains the computed Template config, which is based on `config.[env].js` merged with Front Matter variables from the Template currently being processed.

This makes it possible to define variables in `config.js`:

```js [config.js]
export default {
  doctype: 'html'
}
```

... and use them in your markup:

```hbs [emails/example.html]
<x-main>
  <p>doctype is: {{ page.doctype }}</p>
</x-main>
```

### Current Environment

The current Environment name is globally available under the `page.env` variable.

You can output content in your emails based on the Environment that you're building for:

```hbs [emails/example.html]
<if condition="page.env === 'production'">
  This will show only when running `maizzle build production`
</if>
```

<Alert>You may also use the `<env:production>` tag, [see the docs](/docs/tags#env).</Alert>

### Top-level variables

You may define 'local' variables that can be accessed outside of the `page` object:

```js [config.js]
export default {
  locals: {
    company: {
      name: 'Spacely Space Sprockets, Inc.'
    }
  }
}
```

These local variables can be accessed without `page`:

```html [emails/example.html] {2}
  Company name is {{ page.company.name }} <!-- [!code --] -->
  Company name is {{ company.name }} <!-- [!code ++] -->
```

<Alert type="warning">Maizzle does not allow overwriting the `page` object through `locals`.</Alert>

## Top-level await

You may use top-level `await` in your `config.js` to fetch data from an API:

```js [config.js]
const data = await fetch('https://jsonplaceholder.typicode.com/todos').then(res => res.json())

/** @type {import('@maizzle/framework').Config} */
export default {
  todos: data,
  build: {
    /* ... */
  },
}
```

## Environment attribute values

Sometimes you may need to define different values for attributes based on the Environment you're building for.

While you could use long, verbose ternaries in expressions to do so:

```hbs [emails/example.html]
<x-main>
  <a href="{{ page.env === 'production' ? 'https://example.com' : 'https://dev.example.com' }}">Link</a>
</x-main>
```

... Maizzle also supports Environment-based attributes:

```hbs [emails/example.html]
<x-main>
  <a
    href="https://dev.example.com"
    href-production="https://example.com"
  >Link</a>
</x-main>
```

The value of the `href-production` attribute will be used for the `href` attribute when doing `npm run build` or `maizzle build production`.

The `href-production` attribute itself will then be removed from the output.

</document_content>
</document>
<document index="9">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/events.md</source>
<document_content>
---
title: "Events"
description: "Using lifecycle hooks to tap into the email build process."
---

# Events

When compiling your HTML emails, Maizzle goes through a series of steps like generating a Template config, rendering, or applying Transformers.

You can hook into the build process and manipulate it by using functions that run before or after some of these steps.

## Usage

You may use Events both when developing locally with the CLI `build` or `serve` commands, and when using the [API](/docs/api) with the `render()` method.

### CLI

To use events with the CLI commands, add them to your `config.js` file:

```js [config.js]
export default {
  beforeCreate({ config }) {
    // do stuff with config
  },
}
```

### API Events

When using the API, add events inside the object that you pass to the `render()` method:

```js [app.js]
const Maizzle = require('@maizzle/framework')

html = Maizzle.render(`some HTML string...`, {
    beforeRender({ html, config, matter }) {
      // ...
    }
  }
).then(({html}) => console.log(html))
```

## Event types

These are the Events that you can use in Maizzle.

The following ones are CLI-only - they run only when added inside the `events: {}` object in your `config.js` and when you run one of the [build commands](/docs/cli#development):

- [`beforeCreate`](#beforecreate)
- [`afterBuild`](#afterbuild)

These always run, every time a Template is compiled:

- [`beforeRender`](#beforerender)
- [`afterRender`](#afterrender)
- [`afterTransformers`](#aftertransformers)

### beforeCreate

Runs after the [Environment config](/docs/environments) has been computed, but before Templates are processed. Exposes the config object so you can further customize it.

For example, let's use a custom highlight function for Markdown fenced code blocks:

```js [config.js]
import Prism from 'prismjs'

export default {
  async beforeCreate({ config }) {
    config = Object.assign(config, {
      markdown: {
        markdownit: {
          highlight: (code, lang) => {
            lang = lang || 'html'
            return Prism.highlight(code, Prism.languages[lang], lang)
          }
        }
      }
    })
  }
}
```

<Alert>Use `beforeCreate` if you need to update the config only once.</Alert>

### beforeRender

Runs after the Template's config has been computed, but just before it is compiled.

It exposes the Template's HTML and Front Matter, as well as its config.

For (a silly) example, let's fetch data from an API and set it as the preheader text:

```js [config.js]
import axios from 'axios'

export default {
  async beforeRender({ html, config, matter }) {
    const url = 'https://baconipsum.com/api/?type=all-meat&sentences=1&start-with-lorem=1'

    config.preheader = await axios(url).then(result => result.data).catch(error => 'Could not fetch preheader, using default one.')

    return html
  }
}
```

Then, you'd render it in your HTML, like so:

```hbs [layouts/main.html]
<if condition="page.preheader">
  <div class="hidden">{{{ page.preheader }}}</div>
</if>
```

`beforeRender` runs for each Template that is going to be compiled. For performance reasons, you should only use it if you need access to the config of the Template that is about to be compiled (which includes variables from the Template's Front Matter).

<Alert type="warning">If you don't return the `html` when using `beforeRender()`, the original HTML will be rendered.</Alert>

### afterRender

Runs after the Template has been compiled, but before any Transformers have been applied. Exposes the rendered `html` string and the `config`, as well as the Template's Front Matter.

It's your last chance to alter the HTML or any settings in your config, before Transformers process your email template.

For example, let's disable CSS inlining:

```js [config.js]
export default {
  afterRender({ html, config, matter }) {
    config.css = {
      inline: false
    }

    return html
  }
}
```

`afterRender` runs for each Template, right after it has been compiled. Use it only if you need access to the config of the Template that was just compiled.

<Alert type="warning">If you don't return the `html` when using `afterRender()`, the original HTML will be rendered.</Alert>

### afterTransformers

Runs after all Transformers have been applied, just before the final HTML is returned.

It exposes the same options as `afterRender()`, so you can do further adjustments to the HTML, or read some config settings.

For example, maybe you don't like the minifier that Maizzle includes, and you disabled it in your config so that you can use your own:

```js [config.js]
import Minifier from 'imaginary-minifier'

export default {
  minify: false,
  afterTransformers({ html, config, matter }) {
    if (!config.minify) {
      return Minifier.minify(html)
    }

    return html
  },
}
```

<Alert type="warning">If you don't return the `html` when using `afterTransformers()`, the original HTML will be rendered.</Alert>

### afterBuild

Runs after all Templates have been compiled and output to disk. The `files` parameter will contain the paths to all the files inside the [`build.output.path`](/docs/configuration/build#path) directory.

```js [config.js]
export default {
  afterBuild({ files, config }) {
    console.log(files)
  }
}
```

Using it with the Starter, `maizzle build production` will output:

```js
[
  'build_production/images/maizzle.png',
  'build_production/promotional.html',
  'build_production/transactional.html'
]
```

<Alert type="warning">`afterBuild` is available only when using the `maizzle build` CLI command and not with the [API](/docs/api/).</Alert>

</document_content>
</document>
<document index="10">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/expressions.md</source>
<document_content>
---
title: "Expressions"
description: "Syntax for using basic JavaScript to manipulate data in HTML emails."
---

# Expressions

Handlebars-like, curly brace expression syntax is supported, allowing you to access variables from your [Environment config](/docs/environments) or from a Template's Front Matter:

```hbs [emails/example.html]
---
title: Example
---

<x-main>
  The title is: {{ page.title }}

  You ran the `maizzle build {{ page.env }}` command.
</x-main>
```

Running `maizzle build production` would render this HTML:

```html
The title is: Example

You ran the `maizzle build production` command.
```

You may use basic JavaScript expressions within curly braces:

```hbs [emails/example.html]
<x-main>
  doctype is {{ page.doctype || 'not set' }}
  this email {{ page.env === 'production' ? "is" : "isn't" }} production ready!
</x-main>
```

Running `maizzle build`, we would get:

```html
doctype is not set
this email isn't production ready!
```

## Unescaping

By default, special characters are escaped when using two curly braces:

```hbs [emails/example.html]
---
markup: '<strong>Bold</strong>'
---

<x-main>
  {{ page.markup }}
  <!-- Result: &lt;strong&gt;Bold&lt;strong&gt; -->
</x-main>
```

If you need to render values exactly as they are, use triple curly braces:

```hbs [emails/example.html]
---
markup: '<strong>Bold</strong>'
---

<x-main>
  {{{ page.markup }}}
  <!-- Result: <strong>Bold</strong> -->
</x-main>
```

## Ignoring

Other templating engines and many <abbr title="Email Service Provider">ESP</abbr>s also use the `{{ }}` syntax.

If you want to prevent expression compilation and actually render the curly braces so you can evaluate them at a later stage, you have several options:

### Ignore inline

The [Blade](https://laravel.com/docs/blade)-inspired `@{{ }}` syntax is useful for one-offs, where you need to ignore a single expression. The compiled email will render `{{ }}` without the `@`.

```hbs [emails/example.html]
<x-main>
  @{{ page.markup }}
  <!-- Result: {{ page.markup }} -->
</x-main>
```

<Alert type="info">Undefined variables don't need to be ignored, they will just be output as you wrote them. You might want to use inline ignoring if your expression contains quotes `'`, i.e. `{{ foo: 'Bar' }}`, to prevent Maizzle from escaping them.</Alert>

### Ignore in Front Matter

You may also use `@{{ }}` to prevent expressions in Front Matter.

```hbs [emails/example.html]
---
title: "Weekly newsletter no. @{{ user: 'Arthur Morgan'  }}"
---
<x-main>
  {{ page.title }}
</x-main>
```

Result:

```hbs [build_production/example.html]
Weekly newsletter no. {{ user: 'Arthur Morgan' }}
```

Again, this is just to avoid Maizzle from evaluating the expression - you don't need the `@` if your expression doesn't contain any quotes:

```hbs [emails/example.html]
---
title: "Weekly newsletter no. {{ user.name }}"
---

<x-main>
  {{ page.title }}
</x-main>
```

Result:

```hbs [build_production/example.html]
Weekly newsletter no. {{ user.name }}
```

### Ignore with &lt;raw&gt;

Use `<raw>` to ignore expressions or any PostHTML tags in a block of HTML:

```hbs [emails/example.html]
<raw>
  <p>The quick brown {{ 1 + 2 }} jumps over the lazy {{ 3 + 4 }}.</p>
</raw>
```

`<raw>` will be removed in the final output, but the curly braces will be left untouched:

```hbs [build_production/example.html]
<p>The quick brown {{ 1 + 2 }} jumps over the lazy {{ 3 + 4 }}.</p>
```

### Change delimiters

You can change the delimiters to something else, like `[[ ]]`:

```js [config.js]
module.exports = {
  build: {
    posthtml: {
      expressions: {
        delimiters: ['[[', ']]'],
        unescapeDelimiters: ['[[[', ']]]']
      }
    }
  }
}
```

Then you can safely use `{{ }}` and its contents will not be evaluated:

```hbs [emails/example.html]
<x-main>
  <!-- This will be evaluated -->
  [[ page.title ]]

  <!-- But this won't be -->
  Hi, {{ user.name }}.
</x-main>
```

### Undefined variables

Any variable that is not defined will be output as-is:

```hbs [emails/example.html]
<x-main>
  {{ undefinedVariable }}
</x-main>
```

Result:

```hbs [build_production/example.html]
{{ undefinedVariable }}
```

</document_content>
</document>
<document index="11">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/functions.md</source>
<document_content>
---
title: "Functions"
description: "Define functions in the config and use their output in your email templates."
---

# Config Functions

Maizzle is fully configured in JavaScript, so you can programmatically set config options or process and make data available to your Templates.

## Defining functions

When defining a function, you need to make sure that:

1. it returns something
2. you invoke it

```js [config.js]
import imaginaryLib from 'imaginary-lib'

const foo = function() {
  return 'manchu'
}

export default {
  foo: foo(), // invoke function defined above
  bar: function() {
    // do stuff and return
    return 'baz'
  }(), // invoke function
  wha: () => imaginaryLib.render('implicit return 👌')
}
```

You would access those variables under the `page` object:

```hbs [emails/example.html]
<x-main>
  {{ page.foo }}
  {{ page.bar }}
  {{ page.wha }}
</x-main>
```

Result:

```html [build_production/example.html]
manchu baz implicit return 👌
```

</document_content>
</document>
<document index="12">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/installation.md</source>
<document_content>
---
title: "Getting Started"
description: "Installing Maizzle on your machine and creating a new project."
---

# Getting Started

## Video Tutorials

If you prefer to watch a video, check out the [Maizzle Series on Laracasts](https://laracasts.com/series/build-html-emails-with-maizzle).

They were originally made for Maizzle 4.x, but the same concepts apply in v5 and only some configuration options are different (see our [upgrade guide](/docs/upgrade-guide)).

## Requirements

You'll need [Node.js](https://nodejs.org/en/download/) installed first (comes with NPM included).

Use this command to check the version:

```sh
node -v
```

<Alert>Maizzle requires at least Node v18.20.0</Alert>

## Create a project

The fastest way to get started is with the [official Starter](https://github.com/maizzle/maizzle).

Run this command in your terminal to create a new Maizzle project:

```sh
npx create-maizzle
```

In the interactive setup wizard, specify the directory name to create the project in, i.e. `./my-project`, select the Default Starter, and choose Yes to Install dependencies.

Installing the dependencies will take a while, but usually under a minute.

Next, switch the current directory to `my-project`:

```sh
cd my-project
```

If you didn't install dependencies in the interactive setup, do so now:

```sh
npm install
```

### Manual setup

Alternatively, you may create a new project manually.

First, you'll need to download a Starter project - the following command will create a new project using the official Starter in a directory called `my-project`:

```sh
npx degit maizzle/maizzle my-project
```

Next, change the current directory to `my-project`:

```sh
cd my-project
```

Finally, install the project's dependencies:

```sh
npm install
```

## Development

Maizzle includes different commands for developing locally on your machine and for building production-ready emails.

### Local

You can start a development server that watches for file changes and automatically updates a preview in the browser.

Do so by running the `dev` npm script in your project's root folder:

```sh
npm run dev
```

This will start the local server at _http://localhost:3000_

Navigate to one of the Templates there, make a change to it in your editor and save it: your changes will be injected and the page will reflect them almost instantly.

### Production

Build production-ready emails that have inlined CSS and many other optimizations, by running the following command:

```sh
npm run build
```

This will use settings in your project's `config.production.js` to compile email templates that you can use with your <abbr title="Email Service Provider">ESP</abbr> or in your application.

<Alert>These NPM scripts use the Maizzle CLI, check out the [CLI Tool docs](/docs/cli) for more details.</Alert>

## Updating

Maizzle is listed as a dependency in your project's `package.json` file:

```json [package.json]
"dependencies": {
  "@maizzle/framework": "latest",
}
```

To use a specific version, first change the value to the desired release number:

```json [package.json] {3} no-copy
"dependencies": {
   "@maizzle/framework": "latest", // [!code --]
   "@maizzle/framework": "5.0.6", // [!code ++]
}
```

Then, re-install dependencies by running `npm install` in your project's root folder.

<Alert>Latest stable Maizzle release is <LatestRelease></LatestRelease></Alert>

### Clean update

If for some reason you're not getting the correct version or are running into installation issues, delete your `node_modules` folder and your `package-lock.json` file from the root of your project and then run `npm install` again.

This will do a fresh install of all dependencies.

</document_content>
</document>
<document index="13">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/introduction.md</source>
<document_content>
---
title: "Introduction"
description: "Getting started with the Maizzle Email Framework."
---

# What is Maizzle?

Maizzle is a framework for HTML email development.

It's powered by [Tailwind CSS](https://tailwindcss.com/) and comes with features such as components, expressions, and various automations that make coding HTML emails easier.

Maizzle doesn't rely on custom tags that expand into predefined, `<table>`-based HTML markup. We do provide some abstractions for things like components or templating tags, but you don't _have_ to use them if you don't want to.

This means that you're in complete control over your email code: no need to worry about things like component markup being locked into the framework core or not having full control over styling or accessibility.

## Tailwind CSS

Maizzle uses the Tailwind CSS framework, enabling you to quickly style HTML emails.

Using utility classes to style emails makes you more productive by eliminating the tiring context switching that is common in a traditional email coding approach, where you keep moving back and forward between your responsive CSS and your HTML markup.

And since you no longer need to come up with names for your CSS classes, you can focus on coding your emails at warp speed.

We use [`tailwindcss-preset-email`](https://github.com/maizzle/tailwindcss-preset-email), a custom preset that configures Tailwind CSS for better email client support: `rem` values are replaced with `px`, HEX values are preferred over CSS vars, there are custom screens and an extended spacing scale etc.

When you build the production-ready emails, Maizzle can automatically take care of CSS inlining, as well as many other HTML and CSS optimizations.

## Build System

The build system in Maizzle is based on what we call [Environments](/docs/environments).

These allow you to define distinct build scenarios for your email workflow.

Each environment is customized through a JavaScript config file, so you can even `import()` packages or programmatically set options.

[PostHTML](https://posthtml.org/) plugins are used for the templating logic, and you can use components, loops, if statements - even fetch remote content. Markdown with <abbr title="GitHub Flavored Markdown">GFM</abbr> is supported, too.

## BYOHTML

Maizzle doesn't include markup abstractions that expand to `<table>`-based structures, such as `<row>` or `<column>` seen in other frameworks &ndash; you code your emails the way you want to, with HTML you already know.

Knowing that some email clients still require the use of tables in order to ensure proper layout rendering, this might sound terrifying to some.

However, through progressive enhancement, you can actually use modern HTML and CSS in many email clients while providing a fallback for the more archaic ones.

You're free to code your emails however you like 💪

_Bring Your Own HTML_ <sup>&trade;</sup>

## Responsive

Because of the lack of standards and the wildly varying [CSS support in email clients](https://www.caniemail.com/), there are many techniques that email developers use to code responsive emails.

Maizzle doesn't have an opinion on how you should code your emails: from _spongy_ to _fluid_ and _responsive_ to _hybrid_, everything is supported, so you're free to use whatever technique you like (or need).

Tailwind CSS screens in Maizzle are configured for a _desktop-first responsive_ approach by default, which is the opposite of what you might be used to in web development. We currently do this because of Outlook/Office 365 on Windows and a few other email clients that don't support media queries.

Utility classes will target desktop viewports by default, and the [responsive variants](https://tailwindcss.com/docs/responsive-design) will override them for small screen sizes:

```js [tailwind.config.js] no-copy
module.exports = {
  screens: {
    sm: {max: '600px'},
    xs: {max: '425px'},
  },
}
```

## Configure It Out!

Maizzle is configured in JavaScript.

Besides things like "_should inlining be enabled?_" or "_do we need to minify the HTML?_", you can even pass options to the Markdown renderer or choose where on your machine the compiled HTML file should be saved.

You can do even more advanced things, like pulling data from an API to use in a template, or `import()` some NPM package to further transform your emails.

Each config file represents a distinct [build Environment](/docs/environments) that can be triggered with its own `maizzle build [environment]` command, so you can create as many build scenarios as you need, each with their own settings!

</document_content>
</document>
<document index="14">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/layouts.md</source>
<document_content>
---
title: "Layouts"
description: "How to use layouts with templating inheritance to build HTML emails in Maizzle."
---

# Layouts

The workflow in Maizzle revolves around the concept of Layouts, Templates and Components.

A Layout is basically a [Component](/docs/components) that contains the `doctype`, `<head>` and `<body>` tags of your HTML - the kind of code that changes rarely and can be reused.

Layouts may include a `<yield />` tag, which can be used to render a Template. This allows us to create a parent-child relationship between Layouts and Templates.

In Maizzle we add this `<yield />` tag in the `<body>` of the `main.html` Layout, to define where a Template's HTML should be injected.

## Getting started

Layouts are typically stored in the `layouts` directory.

<Alert>Need to store them elsewhere? Make sure to [update the config](/docs/configuration/components#folders).</Alert>

Layouts must include a `<yield />` tag, which is used to define where the Template's HTML will be rendered.

Here's a very basic `layout.html`:

```html [layouts/main.html] {10}
<!doctype html>
<html>
<head>
  <style>
    @tailwind components;
    @tailwind utilities;
  </style>
</head>
<body>
  <yield /> // [!code ++]
</body>
```

<Alert>For Tailwind CSS to work, Layouts must include it either via a `<style>` tag like above or through a `<link>` tag that references a CSS file.</Alert>

When creating a Template, you may use that Layout like this:

```html [emails/example.html]
<x-main>
  <!-- your email template HTML... -->
</x-main>
```

As you can see, the `<x-main>` tag name is based on the Layout's file name, with the `.html` extension removed, here are some examples:

| Layout file name        | Layout tag name |
|-------------------------|-----------------|
| `layouts/main.html` | `<x-main>`      |
| `layouts/alt.html`  | `<x-alt>`       |

Read more about this in the [Components docs](/docs/components#x-tag).

## Tailwind CSS

In order for Tailwind CSS to work, you need to include it in a `<style>` or `<link>` tag.

### style tag

When using a `<style>` tag, you can include Tailwind's `utilities` and `components` by using the `@tailwind` directive:

```html [layouts/main.html] diff {4-7}
<!doctype html>
<html>
<head>
  <style> /* [!code ++] */
    @​tailwind components; /* [!code ++] */
    @​tailwind utilities; /* [!code ++] */
  </style> // [!code ++]
</head>
<body>
  <yield />
</body>
```

<Alert>We don't recommend using `@tailwind base` because it contains CSS resets that won't work or are not needed in HTML emails. Also, some resets use the `*` selector, which can cause issues when CSS is inlined.</Alert>

### link tag

Maizzle also supports `<link rel="stylesheet">` tags - it will try to read the file from the `href` attribute and process it with PostCSS (including Tailwind CSS). Note that this currently only works with local files.

```html [layouts/main.html] {4}
<!doctype html>
<html>
<head>
  <link rel="stylesheet" href="css/tailwind.css" inline> // [!code ++]
</head>
<body>
  <yield />
</body>
```

<Alert>Make sure to include the `inline` attribute on the `<link>` tag, this will replace it with a `<style>` tag that can be inlined and is generally better supported in email clients.</Alert>

Then, in your `tailwind.css` file:

```css [css/tailwind.css]
@tailwind components;
@tailwind utilities;
```

## Variables

Variables from your [Environment config](/docs/environments) or from the Template's own Front Matter are available in a Layout under the `page` object.

You can use the curly braces [expression syntax](/docs/expressions) to output variables in a Layout:

```html
<meta charset="{{ page.charset || 'utf8' }}">
```

Basic JavaScript expressions are supported inside curly braces. These expressions will be evaluated and the result will be rendered in your HTML.

### Environment

The Environment name is available under `page.env`. You can use it to output stuff based on the `build` command that you ran.

For example, you could use `page.env` to output some content only when running the `maizzle build production` command:

```html [layouts/layout.html]
<if condition="page.env === 'production'">
  <p>This text will show when running `maizzle build production`</p>
</if>
```

<Alert>You may also use the `<env:production>` tag, [see the docs](/docs/tags#env).</Alert>

</document_content>
</document>
<document index="15">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/markdown.md</source>
<document_content>
---
title: "Markdown"
description: "Using Markdown in HTML emails."
---

# Markdown

Maizzle makes it easy to use Markdown in your email templates.

[markdown-it](https://github.com/markdown-it/markdown-it) is used and you can configure it either globally from your Environment config, or through Front Matter for each Template.

## Tags

There are two tags that you can use to add Markdown to your emails:

```html [emails/example.html]
<markdown>This Markdown will be **compiled** to HTML</markdown>
<md>A _shorter_ version of the `markdown` tag.</md>
```

Result:

```html
<p>This Markdown will be <strong>compiled</strong> to HTML</p>
<p>A <em>shorter</em> version of the <code>markdown</code> tag.</p>
```

## Attributes

Use attributes if you need the element wrapping your Markdown to be preserved:

```html [emails/example.html]
<div markdown>Using a `markdown` attribute</div>
<p md>You can also use the `md` attribute.</p>
```

Result:

```html
<div>
  <p>Using a <code>markdown</code> attribute</p>
</div>
<p>You can also use the <code>md</code> attribute.</p>
```

### Wrapping tag

Use the `tag` attribute to specify a tag name to wrap your Markdown with:

```html [emails/example.html]
<md tag="section">This Markdown will be _compiled_ to HTML</md>
```

Result:

```html
<section>
  <p>This Markdown will be <em>compiled</em> to HTML</p>
</section>
```

## Importing files

Already have some Markdown in a file? Simply include it:

```html [emails/example.html]
<md src="./README.md">
  # You'll see contents of README.md above this heading
</md>
```

Result:

```html
<!-- contents of README.md here -->
<h1>You'll see contents of README.md above this heading</h1>
```

If you're including a file that will be used as an inline element and don't want the enclosing `<p>` tags, use the `inline` attribute:

```html [emails/example.html]
<p class="example">
  <markdown src="./example.md" inline>
    _Imported_
  </markdown>
</p>
```

Result:

```html
<p class="example">
  <!-- Contents of ./example.md rendered to HTML -->
  <em>Imported</em>
</p>
```

## GFM

[GitHub Flavored Markdown](https://github.github.com/gfm/) is supported and the [Tables](https://help.github.com/articles/organizing-information-with-tables/) and [Strikethrough](https://help.github.com/articles/basic-writing-and-formatting-syntax/#styling-text) extensions are enabled by default.

### Tables

Create tables with pipes `|` and hyphens `-`. Use hyphens to define each column's header, and pipes to separate each column.

```html [emails/example.html]
<markdown>
  | Markdown      | tables are    | cool  |
  | ------------- |:-------------:| -----:|
  | col 3 is      | right-aligned | $1600 |
  | col 2 is      | centered      |   $12 |
  | zebra stripes | are neat      |    $1 |
</markdown>
```

### Strikethrough

Use two tildes `~~` to ~~`~~strikethrough~~`~~ text.

## Configuration

You may configure how Markdown is rendered through the `markdown` config object:

```js [config.js]
export default {
  markdown: {
    root: './', // A path relative to which markdown files are imported
    encoding: 'utf8', // Encoding for imported Markdown files
    markdownit: {}, // Options passed to markdown-it
    plugins: [], // Plugins for markdown-it
  }
}
```

Checkout the options for [markdown-it](https://github.com/markdown-it/markdown-it#init-with-presets-and-options) and  [posthtml-markdownit](https://github.com/posthtml/posthtml-markdownit#options).

### Front Matter

You may override the global Markdown config from your Template's Front Matter.

```hbs [emails/example.html]
---
markdown:
  markdownit:
    linkify: true
---

<x-main>
  <md>
    https://example.com
  </md>
</x-main>
```

That will output:

```html
<p><a href="https://example.com">https://example.com</a></p>
```

### Disabling

Disable the markdown Transformer by setting it to `false`:

```js [config.js]
export default {
  markdown: false
}
```

## Plugins

There are over 300 plugins for `markdown-it` available on NPM! To use a plugin, `npm install` it first and then add it to `config.js`.

For example, imagine we installed [markdown-it-emoji](https://www.npmjs.com/package/markdown-it-emoji):

```js [config.js]
import mdEmoji from 'markdown-it-emoji'

export default {
  markdown: {
    plugins: [
      {
        plugin: mdEmoji,
        options: {} // Options for markdown-it-emoji
      }
    ]
  }
}
```

We can now use emojis in markdown:

```html [emails/example.html]
<md>
  You can use emojis :)
</md>
```

Result:

```html
<p>You can use emojis 😃</p>
```

## Escaping variables

If you're using expressions to render markdown from a variable that you have defined in your config like this:

```js [config.js]
export default {
  data: {
    content: '> a markdown string'
  }
}
```

... you will need to use triple curly braces to output the unescaped content:

```hbs [emails/example.html]
<x-main>
  {{{ page.data.content }}}
</x-main>
```

This is required for things like blockquotes to work, otherwise `>` will be output as `&gt;` and the blockquote will be rendered as a paragraph.

## API

You may use the Markdown Transformer in your application.

```js [app.js]
import { markdown } from '@maizzle/framework'

const options = {/* posthtml-markdownit options */}
const posthtmlOptions = {/* posthtml options */}

const html = await markdown('### Heading 3', options, posthtmlOptions)
```

If you only need some parts of your string to be parsed as Markdown, you can use the `manual` option and then wrap the Markdown content in `<md>` tags:

```js [app.js]
const html = await markdown(
  `
  <section>
    <h2>Code sample</h2>
    <md>`const foo = 'bar'`</md>
  <section>
  `,
  { manual: true },
)
```

</document_content>
</document>
<document index="16">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/plaintext.md</source>
<document_content>
---
title: "Plaintext"
description: "Automatically create plaintext versions of your HTML emails in Maizzle."
---

# Plaintext

Maizzle can automatically create plaintext versions of your HTML emails.

## Usage

Generate a plaintext version for all your email templates by adding a `plaintext` key to your templates source in `config.js`:

```js [config.js]
export default {
  plaintext: true,
}
```

## Custom path

Set the `plaintext` key to be a directory path to output plaintext files to a custom location. Plaintext files will be output relative to the `build.output.path` folder.

```js [config.js]
export default {
  plaintext: 'dist/brand/plaintext',
}
```

You may configure both the output directory and the file extension by providing an object with `output.path` and `output.extension` keys:

```js [config.js]
export default {
  plaintext: {
    output: {
      path: 'dist/brand/plaintext',
      extension: 'rtxt',
    }
  },
}
```

<Alert>The `path` option must be a directory path, otherwise a single plaintext file will be generated for all of your emails.</Alert>

## Front Matter

Generate a plaintext version for a specific Template by enabling it in its Front Matter:

```hbs [emails/example.html]
---
plaintext: true
---

<x-main>
  <!-- your email HTML... -->
</x-main>
```

A `.txt` file will be output at the same location with the compiled Template.

You may of course set `plaintext` to a custom path in Front Matter as well.

Using a file path for `plaintext` in Front Matter will output that file at the specified location relative to the project root:

```hbs [emails/example.html]
---
plaintext: dist/brand/plain.txt
---
```

This will output the plaintext file at `dist/brand/plain.txt` relative to your project root:

```sh no-root {1-3}
dist
└─  brand
  └─  plain.txt
src
└─  templates
  └─  example.html
package.json
...
```

However if you use a directory path, the plaintext file will be output relative to the `build.output.path` folder instead, and will use the same name as the Template:

```hbs [emails/example.html]
---
plaintext: dist/brand
---
```

Result:

```sh no-root {2-4}
build_production
└─  dist
  └─  brand
    └─  example.txt
src
└─  templates
  └─  example.html
package.json
...
```

## Permalink

If you're using the [`permalink`](/docs/configuration/build#permalink) Front Matter key in your Template, Maizzle will output the `.txt` file at that location:

```hbs [emails/example.html]
---
permalink: example/email.html
plaintext: true
---

<x-main>
  <!-- your email HTML... -->
</x-main>
```

For the Template above, `example/email.txt` will be generated.

No matter what you set `plaintext` to in Front Matter in this case, as long as it's a truthy value the plaintext file will be output at the location specified by `permalink`, using the exact same filename but with the `.txt` extension.

## Customization

By default, the plaintext generator in Maizzle uses most default options from [`string-strip-html`](https://codsen.com/os/string-strip-html/#optional-options-object), with this exception:

```js
export default {
  plaintext: {
    dumpLinkHrefsNearby: {
      enabled: true
    }
  },
},
```

This ensures URLs from anchors are actually output in the plaintext version.

You may use a `plaintext` object in your `config.js` to overwrite any of the defaults from `string-strip-html`.

```js [config.js]
export default {
  plaintext: {
    ignoreTags: [],
    onlyStripTags: [],
    stripTogetherWithTheirContents: ['script', 'style', 'xml', 'not-plaintext'],
    skipHtmlDecoding: false,
    trimOnlySpaces: false,
    dumpLinkHrefsNearby: {
      enabled: false,
      putOnNewLine: false,
      wrapHeads: '',
      wrapTails: ''
    },
    cb: null,
  },
}
```

<Alert>With the config above, Maizzle will output plaintext versions for all Templates.</Alert>

### Front Matter override

Using `plaintext: true` like in the [Front Matter example](/docs/plaintext#front-matter) will override your plaintext config object if you have it defined in `config.js` like above.

If you need to control `string-strip-html` options when generating plaintext for a specific Template, you need to use `enabled: true`.

You basically add the options object to the Template's Front Matter:

```hbs
---
plaintext:
  dumpLinkHrefsNearby:
    enabled: true
    putOnNewLine: true,
    wrapHeads: '['
    wrapTails: ']'
---

<x-main>
  <a href="https://example.com">Click here</a>
</x-main>
```

That will output:

```
Click here

[https://example.com]
```

## &lt;plaintext&gt; tag

Output content only in the plaintext version:

```hbs [emails/example.html]
---
plaintext: true
---

<x-main>
  This text shows in both the HTML and the plaintext versions.

  <plaintext>This will be output only in the plaintext version</plaintext>
</x-main>
```

## &lt;not-plaintext&gt; tag

You may also discard content from the plaintext version while preserving it in the HTML, with the help of the `<not-plaintext>` tag:

```hbs [emails/example.html]
---
plaintext: true
---

<x-main>
  This text shows in both the HTML and the plaintext versions.

  <not-plaintext>
    <p>This paragraph will be output only in the HTML version</p>
  </not-plaintext>
</x-main>
```

## API

You may render an HTML string to plaintext in your application with the help of the `plaintext()` method. The custom tags, like `<plaintext>`, are also supported.

```js [app.js]
import { generatePlaintext } from '@maizzle/framework'

const plaintext = await generatePlaintext(`<p>your html string</p>`)

// your html string
```

You can also pass a config object to this method:

```js [app.js]
const plaintext = await generatePlaintext('html string', {
  posthtml: {
    // PostHTML options...
  }
  // ... string-strip-html options
})
```

</document_content>
</document>
<document index="17">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/tags.md</source>
<document_content>
---
title: "Tags"
description: "Special tags for templating logic that you can use in Maizzle."
---

# Tags

Maizzle includes some special tags designed to help you with templating logic.

## Conditionals

You can use if/elseif/else conditionals in your email templates.

For example, the Starter uses it to output a preheader in its Layout:

```hbs [emails/example.html]
<if condition="page.preheader">
  <div class="hidden">{{ page.preheader }}</div>
</if>
```

Of course, you can create more complex conditions:

```html [emails/example.html]
<if condition="page.env === 'node'">
  <p>Using Maizzle programmatically</p>
</if>
<elseif condition="page.env === 'production'">
  <p>We are in production!</p>
</elseif>
<else>
  <p>We are probably developing locally.</p>
</else>
```

#### Custom conditionals tag

You may customize the conditional tag names:

```js [config.js]
export default {
  expressions: {
    conditionalTags: ['when', 'ifnotthen', 'otherwise'],
  }
}
```

Example:

```html [emails/example.html]
<when condition="page.env === 'node'">
  <p>Using Maizzle programmatically</p>
</when>
<ifnotthen condition="page.env === 'production'">
  <p>We are in production!</p>
</ifnotthen>
<otherwise>
  <p>We are probably developing locally.</p>
</otherwise>
```

## Template

The `<template>` tag will only return its contents.

You can use it to apply a filter to a string, for example:

```html [emails/example.html]
<template uppercase>test</template>
```

Result:

```xml
TEST
```

... or to compile a markdown string:

```html [emails/example.html]
<template markdown>
  # Hello, world!
</template>
```

Result:

```html
<h1>Hello, world!</h1>
```

#### Preserving template tags

If you actually need to output a `<template>` tag in the compiled HTML, you may use the `preserve` attribute:

```html [emails/example.html]
<template preserve>
  test
</template>
```

Result:

```html
<template>
  test
</template>
```

## Outlook

Wrap content in <abbr title="Microsoft Office">MSO</abbr> conditional comments to show it only in Outlook 2007-2021 on Windows:

```html [emails/example.html]
<outlook>
  <div>Show this in all Outlook versions</div>
</outlook>
```

That will output:

```html
<!--[if mso|ie]>
  <div>Show this in all Outlook versions</div>
<![endif]-->
```

Of course, there's also a tag for showing content in all email clients _except_ in Outlook:

```html [emails/example.html]
<not-outlook>
  <div>All Outlooks (on Windows) will ignore this</div>
</not-outlook>
```

Result:

```html
<!--[if !mso]><!-->
  <div>All Outlooks (on Windows) will ignore this</div>
<!--<![endif]-->
```

The `<outlook>` tag supports various combinations of attributes that will help with showing or hiding content in specific Outlook versions:

- `only` - show only in these Outlook versions
- `not` - show in all versions except these
- `lt` - all versions before this (not including it, i.e. lower than)
- `lte` - all versions before this (including it, i.e. lower than or equal to)
- `gt` - all versions after this (not including it, i.e. greater than)
- `gte` - all versions after this (including it, i.e. greater than or equal to)

For example:

```html [emails/example.html]
<outlook only="2013">
  <div>Show only in Outlook 2013</div>
</outlook>
```

Result:

```html
<!--[if mso 15]>
  <div>Show only in Outlook 2013</div>
<![endif]-->
```

The `only` and `not` attributes support multiple values, separated with a comma:

```html [emails/example.html]
<outlook only="2013,2016">
  <div>Show only in Outlook 2013 and 2016</div>
</outlook>
```

Result:

```html
<!--[if (mso 15)|(mso 16)]>
  <div>Show only in Outlook 2013 and 2016</div>
<![endif]-->
```

You may also combine attributes:

```html [emails/example.html]
<outlook gt="2003" lte="2013">
  <div>Show in 2007, 2010, 2013</div>
</outlook>
```

Result:

```html
<!--[if (gt mso 11)&(lte mso 15)]>
  <div>Show in 2007, 2010, 2013</div>
<![endif]-->
```

#### Custom Outlook tag

Of course, you may customize the `<outlook>` tag name:

```js [config.js]
export default {
  outlook: {
    tag: 'mso',
  }
}
```

You'd then use it like this:

```html [emails/example.html]
<mso only="2013">Show only in Outlook 2013</mso>
<not-mso>Hide from all Outlooks</not-mso>
```

## Switch

Need to use a [switch](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) statement?

```html [emails/example.html]
<switch expression="page.user.subscription">
  <case n="'monthly'">
    <p>Your monthly subscription is about to renew.</p>
  </case>
  <case n="'yearly'">
    <p>Heads up! Yearly renewal coming soon, make sure you have enough money in your account.</p>
  </case>
  <default>
    <p>Your subscription will soon renew.</p>
  </default>
</switch>
```

#### Custom switch tag

You may define custom tags for the switch statement:

```js [config.js]
export default {
  expressions: {
    switchTags: ['handle', 'when', 'fallback'],
  }
}
```

Example:

```html [emails/example.html]
<handle expression="page.env">
  <when n="'production'">
    production
  </when>
  <fallback>
    fallback content
  </fallback>
</handle>
```

## Loops

You can iterate over arrays and objects with the `<each>` tag.

For arrays:

```hbs [emails/example.html]
<each loop="item, index in someArray">
  <p>{{ index }}: {{ item }}</p>
</each>
```

For objects:

```hbs [emails/example.html]
<each loop="value, key in anObject">
  <p>{{ key }}: {{ value }}</p>
</each>
```

### Loop meta

Inside a loop you will have access to a `{{ loop }}` object that contains information about the loop currently being executed:

- `loop.index` - the current iteration of the loop (0 indexed)
- `loop.remaining` - number of iterations until the end (0 indexed)
- `loop.first` - boolean indicating if it's the first iteration
- `loop.last` - boolean indicating if it's the last iteration
- `loop.length` - total number of items

Example:

```hbs [emails/example.html]
<each loop="item, index in [1,2,3]">
  <p>Number of iterations until the end: {{ loop.remaining }}</p>
</each>
```

#### Custom loop tag

You may customize the name of the loop tag:

```js [config.js]
export default {
  expressions: {
    loopTags: ['for'],
  }
}
```

You can now use a `<for>` tag instead:

```hbs [emails/example.html]
<for loop="item, index in [1,2,3]">
  <p>{{ item }}</p>
</for>
```

## Scope

Use `<scope>` tags to provide a data context to the content inside.

Imagine we had this data in our `config.js`:

```js [config.js]
export default {
  roles: {
    author: { name: 'John' },
    editor: { name: 'Jane' },
  }
}
```

We could provide each object as a scope, so we can then access it from the context, instead of going up to the parent:

```hbs [emails/example.html]
<!-- Will output 'John', no need to write {{ page.roles.author.name }} -->
<scope with="page.roles.author">
  {{ name }}
</scope>

<!-- Will output 'Jane' -->
<scope with="page.roles.editor">
  {{ name }}
</scope>
```

#### Custom scope tag

You may customize the `<scope>` tag name:

```js [config.js]
export default {
  expressions: {
    scopeTags: ['context'],
  }
}
```

Example:

```hbs [emails/example.html]
<!-- Will output 'Jane' -->
<context with="page.roles.editor">
  {{ name }}
</context>
```

## Fetch

You can fetch and display remote content in your email templates:

```hbs [emails/example.html]
<fetch url="https://jsonplaceholder.typicode.com/users">
  <each loop="user in response">
    {{ user.name }}
  </each>
</fetch>
```

Inside the `<fetch>` tag, you have access to a `{{ response }}` variable.

#### Fetch options

You may use the `fetch` key to customize options:

```js [config.js]
export default {
  fetch: {
    tags: ['get'], // default ['fetch', 'remote']
    attribute: 'resource', // default 'url'
    ofetch: {}, // pass options to the `ofetch` package
    preserveTag: true, // default false
    expressions: {}, // configure expressions in fetch context
  }
}
```

## Raw

Need to skip tag and expressions parsing in a whole block?

```hbs [emails/example.html]
<raw>
  This will not be parsed:
  <if condition="page.env">
    {{ page.env }}
  </if>
  Neither will this expression: {{ page.env }}
</raw>
```

Result:

```hbs [build_production/example.html]
This will not be parsed:
<if condition="page.env">
  {{ page.env }}
</if>
Neither will this expression: {{ page.env }}
```

#### Custom raw tag

The `<raw>` tag name may be customized:

```js [config.js]
export default {
  expressions: {
    ignoredTag: 'verbatim',
  }
}
```

Example:

```hbs [emails/example.html]
<verbatim>
  This will not be parsed: {{ page.env }}
</verbatim>
```

## Env

You may output content based on the current Environment through the `<env:>` tag:

```html [emails/example.html]
<env:local>
  This will only show in local.
</env:local>

<env:production>
  This will only show in production.
</env:production>
```

If the tag doesn't match the current Environment, it will be removed from the output.

In this example, running `maizzle build production` will output:

```xml
This will only show in production.
```

</document_content>
</document>
<document index="18">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/tailwindcss.md</source>
<document_content>
---
title: "Tailwind CSS"
description: "Learn how to use Tailwind CSS to style HTML email templates with CSS utility classes."
---

# Using Tailwind CSS

Maizzle uses the [Tailwind CSS](https://tailwindcss.com) framework, so you can quickly style HTML email templates with utility classes instead of writing inline styles.

If you've never worked with CSS utility classes in HTML emails, at first you might say:

> I could just write inline CSS, it's the same thing!

However, utility classes in Tailwind are much more powerful and allow you to:

- style responsive breakpoints
- style pseudos like `:hover`
- do both of the above with one class
- style for dark mode, print, reduced motion and more
- stay on-brand by using a design system in your team

... all while never having to leave your HTML.

Combine that with powerful plugins like `tailwindcss-email-variants` that allow you to target email clients just by using a class like `gmail:hidden` and you can quickly see why utility-first CSS with Tailwind CSS is such a powerful tool for HTML emails.

For most of the time, you won't be writing CSS anymore 😎

## Workflow

To use Tailwind CSS in your HTML emails, simply add the `@tailwind` directives to a `<style>` tag in your Layout's `<head>`:

```html [layouts/main.html] {5-6}
<!doctype html>
<html>
  <head>
    <style>
      @​tailwind components; /* [!code ++] */
      @​tailwind utilities; /* [!code ++] */
    </style>
  </head>
  <body>
    <yield />
  </body>
</html>
```

Alternatively, you may store them in a CSS file:

```css [css/tailwind.css]
@tailwind components;
@tailwind utilities;

img {
  @apply max-w-full align-middle;
}
```

... and `@import` that instead:

```html [layouts/main.html]
<style>
  @import "css/tailwind.css";
</style>
```

Prefer `<link>` tags? Maizzle supports that too:

```html [layouts/main.html] {4}
<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="css/tailwind.css" inline> <!-- [!code ++] -->
  </head>
  <body>
    <yield />
  </body>
</html>
```

When using `<link>` tags, you must make sure they include:

- the `rel="stylesheet"` attribute
- an `inline` or `expand` attribute

Otherwise, the CSS file they reference will not be compiled.

### Utility-first

Simply write your HTML markup and use Tailwind CSS utility classes to style elements.

Instead of writing something like this:

```html
<table style="width: 100%;">
  <tr>
    <td style="padding: 24px 0; background-color: #e5e7eb;">
      <h1 style="margin: 0; font-size: 36px; font-family: -apple-system, 'Segoe UI', sans-serif; color: #000000;">
        Some title
      </h1>

      <p style="margin: 0; font-size: 16px; line-height: 24px; color: #374151;">
        Content here...
      </p>
    </td>
  </tr>
</table>
```

You can write:

```html [emails/example.html]
<table class="w-full">
  <tr>
    <td class="py-6 px-0 bg-gray-200">
      <h1 class="m-0 text-4xl font-sans text-black">
        Some title
      </h1>

      <p class="m-0 text-base/6 text-gray-700">
        Content here...
      </p>
    </td>
  </tr>
</table>
```

Read more about the concept of utility-first CSS and familiarize yourself with the syntax in the [Tailwind CSS docs](https://tailwindcss.com/docs/utility-first). And if you're using VSCode, make sure to install the [Tailwind CSS IntelliSense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss) extension, to get autocompletion and hover tooltips for Tailwind classes.

### Components

If you're repeating the same utility classes over and over again, you can extract them to a [Component](/docs/components) so you've got a single source of truth and can make changes in one place.

### Custom classes

You may also extract utility classes to a custom CSS class, by using Tailwind's `@apply` directive:

```css [css/components.css]
@layer components {
  .button-danger {
    @apply py-3 px-6 text-white bg-red-500;
  }
}
```

Add that in a `<style>` tag or in a CSS file that you reference through a `<link>` tag.

The `@layer components` directive ensures that the `.button-danger` class is added to the `components` layer in Tailwind, which allows us to override it with a utility class if needed.

## CSS Files

You may organize your CSS into files if you prefer, and then `@import` them in a `<style>` tag or through a `<link>` in your Layout's `<head>`.

For example, let's import that `css/components.css` file we just created:

```html [layouts/main.html] {5}
<!doctype html>
<html>
  <head>
    <style>
      @import "css/components.css"; /* [!code ++] */
      @tailwind components;
      @tailwind utilities;
    </style>
  </head>
  <body>
    <yield />
  </body>
</html>
```

<Alert>When importing CSS files you need to use the path relative to the root of your project's directory.</Alert>

<Alert type="danger">`@import` statements need to come before any other CSS rules in the `<style>` tag, otherwise the entire CSS inside them will be discarded.</Alert>

## Shorthand CSS

<Alert>This section refers to writing shorthand CSS inside `<style>` tags. For _inline_ CSS shorthand, see the [Shorthand CSS Transformer docs](/docs/transformers/shorthand-css).</Alert>

Maizzle can automatically rewrite your `padding`, `margin`, and `border` CSS properties in shorthand-form, when possible.

Because utility classes map one-to-one with CSS properties, this normally doesn't have any effect with Tailwind CSS. However, in the context of `<style>` tags, it's useful when you extract utilities to components, with Tailwind's `@apply`.

Consider this template:

```html [emails/example.html]
<x-main>
  <div class="col">test</div>
</x-main>
```

Let's use `@apply` to compose a `col` class by  extracting two padding utilities:

```html [layouts/main.html] {5-7}
<!doctype html>
<html>
  <head>
    <style>
      .col { /* [!code ++] */
        @apply py-2 px-1; /* [!code ++] */
      } /* [!code ++] */

      @tailwind components;
      @tailwind utilities;
    </style>
  </head>
  <body>
    <yield />
  </body>
</html>
```

When running the build command, normally that would generate:

```css
.col {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 4px;
  padding-right: 4px
}
```

However, Maizzle will merge those to shorthand-form, so we get this:

```css
.col {
  padding: 8px 4px;
}
```

This results in smaller HTML size, reducing the risk of [Gmail clipping your email](https://github.com/hteumeuleu/email-bugs/issues/41).

Using shorthand CSS for these properties is well supported in email clients and will make your HTML lighter, but the shorthand border (documented next) is particularly useful because it's the only way Outlook will render it properly.

<Alert>For shorthand CSS to work with `padding` or `margin`, you need to specify property values for all four sides. For borders, keep reading.</Alert>

### Shorthand borders

To get shorthand-form CSS borders, you need to specify all these:

- border-width
- border-style
- border-color

With Tailwind's `@apply`, that means you can do something like this:

```css
.my-border {
  @apply border border-solid border-blue-500;
}
```

... which will turn this:

```html
<div class="my-border">Border example</div>
```

... into this:

```html
<div style="border: 1px solid #3f83f8;">Border example</div>
```

Alternatively, you may use an arbitrary values:

```html
<div class="[border:1px_solid_#3f83f8]">Border example</div>
```

You can even reference colors from your Tailwind config:

```html
<div class="[border:1px_solid_theme(colors.gray.300)]">Border example</div>
```

Arbitrary values are actually really useful for Outlook, because something like `border-b border-solid border-black` will not be shorthanded and Outlook can only apply individual borders when you write them in shorthand.

So you can do this:

```html
<div class="[border-bottom:1px_solid_#000]">Bottom border example</div>
```

This might look like inline styles with extra steps, but it's still Tailwind so you can do stuff that you can't do with inline CSS, like pseudos or media queries:

```html
<div class="hover:[border:1px_solid_#000] sm:[border:none]">
  Border example
</div>
```

## Plugins

To use a Tailwind CSS plugin, simply `npm install` it and follow its instructions to add it to `plugins: []` in your `tailwind.config.js`:

```js [tailwind.config.js]
import emailVariants from 'tailwindcss-email-variants'

/** @type {import('tailwindcss').Config} */
export default {
  plugins: [
    emailVariants,
  ],
}
```

Or, with a CJS config file:

```js [tailwind.config.js]
/** @type {import('tailwindcss').Config} */
module.exports = {
  plugins: [
    require('tailwindcss-email-variants'),
  ],
}
```

See the [Tailwind CSS docs](https://tailwindcss.com/docs/configuration#plugins) for more information on plugins.

<alert><code>tailwindcss-email-variants</code> is already included in our Tailwind CSS preset, you don't need to install it separately.</alert>


## Use in Template

You may use Tailwind CSS, including directives like `@apply`, `@layer`, and even nested syntax, right inside a Template. You simply need to use the stack/push pattern to inject a `<style>` tag into the Layout being extended.

First, add a `<stack name="head" />` inside your Layout's `<head>` tag:

```html [layouts/main.html] {8} diff
<!doctype html>
<html>
<head>
  <style>
    @tailwind components;
    @tailwind utilities;
  </style>
  <stack name="head" /> // [!code ++]
</head>
<body>
  <yield />
</body>
```

Next, `push` to that `stack` from a Template:

```html [emails/example.html]
<x-main>
  <push name="head">
    <style>
      a {
        @apply text-blue-500;
      }

      @media screen(sm) {
        table {
          @apply w-full;
        }
      }
    </style>
  </push>

  <!-- your email HTML... -->
</x-main>
```

### Prevent inlining

You can prevent CSS inside a `<style>` tag from being inlined:

```html [emails/example.html]
<x-main>
  <push name="head">
    <style data-embed>
      img {
        @apply max-w-full align-middle;
      }
    </style>
  </push>

  <!-- your email HTML... -->
</x-main>
```

You may use any of the following attributes for this purpose:

- `data-embed`
- `no-inline`
- `embed`

Although it will no longer be inlined, unused CSS will still be purged - see the [css.purge](/docs/transformers/purge-css) Transformer docs for more information.

## Email client targeting

Maizzle comes with [tailwindcss-email-variants](https://github.com/maizzle/tailwindcss-email-variants), a Tailwind CSS plugin that makes it easy to style your HTML emails for certain email clients.

It adds custom variants that you may use to style elements only for certain email clients.

### Gmail

Use the `gmail` variant to style elements in Gmail's webmail:


```html
<body class="body">
  <div class="gmail:hidden">...</div>
</body>
```

The compiled HTML will include this CSS rule:

```css
u + .body .gmail\:hidden {
  display: none;
}
```

<Alert>As you can see, this also requires that you add a `body` class on your `<body>` tag.</Alert>

Gmail on older versions of Android requires a different selector, so there's a separate variant provided:

```html
<body class="body">
  <div class="gmail-android:hidden">...</div>
</body>
```

Result:

```css
div > u + .body .gmail-android\:hidden {
  display: none;
}
```

### Apple Mail (10+)

The `apple-mail` variant will target Apple Mail 10 and up:

```html
<div class="apple-mail:hidden">...</div>
```

Result:

```css
.Singleton .apple-mail\:hidden {
  display: none;
}
```

### iOS Mail (10+)

Use the `ios` variant to target iOS Mail 10 and up:

```html
<div class="ios:hidden">...</div>
```

Result:

```css
@supports (-webkit-overflow-scrolling:touch) and (color:#ffff) {
  .ios\:hidden {
    display: none;
  }
}
```

### iOS Mail (15)

Use the `ios-15` variant if you need to target iOS Mail 15 specifically:

```html
<div class="ios-15:hidden">...</div>
```

Result:

```css
@supports (-webkit-overflow-scrolling:touch) and (aspect-ratio: 1 / 1) {
  .ios-15\:hidden {
    display: none;
  }
}
```

### Outlook.com dark mode

Use the `ogsc` and `ogsb` variants to change `color` and `background-color` of elements in [Outlook.com dark mode](https://www.hteumeuleu.com/2021/emails-react-outlook-com-dark-mode/).

```html
<!-- Color -->
<div class="ogsc:text-slate-200">...</div>

<!-- Background color -->
<div class="ogsb:bg-slate-900">...</div>
```

Result:

```css
[data-ogsc] .ogsc\:text-slate-200 {
  color: #e2e8f0;
}

[data-ogsb] .ogsb\:bg-slate-900 {
  background-color: #0f172a;
}
```

### Open-Xchange

Use the `ox` variant to target webmail clients that are powered by [Open-Xchange](https://www.open-xchange.com/).

Some of these email clients include Comcast, Libero, 1&1 MailXchange, Network Solutions Secure Mail, Namecheap Email Hosting, Mailbox.org, 123-reg Email, acens Correo Professional, Home.pl Cloud Email Xchange, Virgin Media Mail, and Ziggo Mail.

```html
<div class="ox:hidden">...</div>
```

Result:

```css
.ox\:hidden[class^="ox-"] {
  display: none;
}
```

## Outlook CSS

Outlook and Office 365 on Windows support proprietary `mso-` CSS properties.

Maizzle includes [tailwindcss-mso](https://github.com/maizzle/tailwindcss-mso), allowing you to use Outlook-only utilities:

```html
<p class="mso-hide-all">...</p>
```

These are utility classes that work just as you'd expect - they support arbitrary values:

```html
<p class="mso-color-alt-[#ffcc00]">...</p>
```

... and, where it makes sense, negative values too:

```html
<p class="-mso-text-raise-4">...</p>
```

<Alert type="info">
  If you're looking show/hide content in/from Outlook, have a look at the available <a href="/docs/tags#outlook">Outlook tags</a>.
</Alert>

</document_content>
</document>
<document index="19">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/templates.md</source>
<document_content>
---
title: "Templates"
description: "Learn how to create HTML emails with template inheritance in Maizzle."
---

# Templates

A Template in Maizzle is a file that typically contains the body of your email: the HTML markup that defines the design and content.

It's made up of two distinct sections:

1. Front Matter
2. Your HTML

Templates may include a Front Matter block, which is a YAML-style block of variables that you may define at the top of the file.

Maizzle knows to parse this block's variables and makes them available to all other Components that you add to this Template, as well as to the Layout it uses.

## Front Matter

Templates can define new variables and even override existing ones from your config, through the optional YAML-style Front Matter block:

```html [emails/example.html]
---
title: "Please confirm your email address"
---
```

Front Matter variables are accessible through the `page` object.

To output them in a Template, use the `{{ }}` [expression syntax](/docs/expressions):

```html [emails/example.html]
---
title: "Please confirm your email address"
---

<p>{{ page.title }}</p>
```

<Alert type="warning">Front Matter must be defined at the very top of a Template, starting on the first line.</Alert>

### Expressions

Expressions in Front Matter can be ignored with a `@` symbol when they're used in the Template they're defined in:

```html [emails/example.html]
---
greeting: "Hello @{{ user.name }}, please confirm your email address"
---

<h1>{{ page.greeting }}</h1>
```

That will render as:

```html [build_production/example.html]
<h1>Hello {{ user.name }}, please confirm your email address</h1>
```

Also, if the variable in an expression is not defined, Maizzle will ignore it and output it as-is.

## Using Layouts

Your emails will likely share the same boilerplate, like the `<!doctype>`, the `<head>` with all the `<meta>` tags, or the `<body>` tag - code that rarely needs to change.

Although you're free to do it, it would be very inefficient to always have to write this boilerplate every time you create a new Template.

To reuse this code in Maizzle, you may create a [Layout](/docs/layouts):

```html [layouts/main.html]
<!doctype html>
<html>
<head>
  <style>
    @tailwind components;
    @tailwind utilities;
  </style>
</head>
<body>
  <yield />
</body>
```

When creating a Template, you can wrap it with this Layout:

```html [emails/example.html]
<x-main>
  <!-- your email HTML... -->
</x-main>
```

In the example above, we use the `<x-main>` Component tag to say that we want to use the `main.html` Layout. At build time, the `<yield />` tag in the Layout file is replaced with what's inside the `<x-main>` tag in our Template.

Learn more about how these x-tags work, in the [Components docs](/docs/components#x-tag).

## Current template

Information about the Template file that is currently being processed will be available under `page.build.current`:

```js
build: {
  current: {
    path: {
      root: 'build_production',
      dir: 'build_production/emails',
      base: 'transactional.html',
      ext: '.html',
      name: 'transactional'
    },
  }
}
```

It can be used in Events like `beforeRender` if you need the file name or extension of the Template file currently being processed.

<Alert>Current template file information is not available when using the [API](/docs/api).</Alert>

## Archiving

Maizzle will only compile Templates found at paths defined in `build.content`.

If your project has _a lot_ of emails, your builds may start to slow down since all Templates are rebuilt on cold start (every time you run the `maizzle build <env>` command).

You can archive Templates in a few ways.

1. Move them to a directory outside the ones defined in `build.content`
2. Change their file extension so that it's not covered by paths from `build.content`
3. Use negated glob patterns in `build.content` to exclude them.
    <br><br>
    For example, if you have a `emails/archive` directory, you can exclude it from builds like this:
    <br><br>
    ```js [config.js]
    export default {
      build: {
        content: [
          'emails/**/*.html',
          '!emails/archive/**/*'
        ]
      }
    }
    ```

</document_content>
</document>
<document index="20">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers.md</source>
<document_content>
---
title: "Transformers"
description: "What are Maizzle Transformers and how to use them to transform your HTML emails."
---

# What are Transformers?

Transformers in Maizzle are functions that basically take a string of HTML, do something with it, and then return it for further processing.

They run after your Template has been compiled and allow you to manipulate the HTML in various ways, like prepending a base URL to all `<img>` tags or preventing widow words.

Some of the Transformers help you automate tedious tasks that are required when developing HTML emails, like inlining CSS, automatically adding attributes for better accessibility, or generating plaintext versions of your emails.

## Transformers list

Most Transformers are enabled by default:

- [Safe Class Names](/docs/transformers/safe-class-names) - rewrites Tailwind CSS class names to email-safe alternatives
- [Filters](/docs/transformers/filters) - Liquid-like filters as HTML attributes
- [Markdown](/docs/markdown) - converts Markdown to HTML
- [Prevent Widows](/docs/transformers/widows) - enables an HTML attribute that prevents widow words
- [Add Attributes](/docs/transformers/add-attributes) - improves accessibility by adding `alt` and `role` attributes
- [Remove Attributes](/docs/transformers/remove-attributes) - removes empty `style` and `class` attributes
- [Six-digit HEX](/docs/transformers/six-hex) - converts 3-digit HEX colors to 6-digit
- [Outlook Tags](/docs/tags#outlook) - simplifies writing MSO conditionals for Outlook
- [resolveProps](/docs/configuration/css#resolveprops) - resolves CSS variables to their static values
- [resolveCalc](/docs/configuration/css#resolvecalc) - resolves CSS `calc()` functions to their static values

However, some are opt-in and need to be explicitly enabled in your `config.js`:

- [Inline CSS](/docs/transformers/inline-css) - inlines CSS styles into the HTML
- [Purge CSS](/docs/transformers/purge-css) - removes unused CSS classes from your HTML
- [Shorthand CSS](/docs/transformers/shorthand-css) - converts long-hand CSS to shorthand in `style` attributes
- [Base URL](/docs/transformers/base-url) - prepends a string to configured attributes in HTML
- [URL parameters](/docs/transformers/url-parameters) - adds URL parameters to configured HTML tags
- [Replace strings](/docs/transformers/replace-strings) - replaces strings through regular expressions
- [Prettify](/docs/transformers/prettify) - pretty-prints the HTML
- [Minify](/docs/transformers/minify) - minifies the HTML

## Disabling

You may disable all Transformers by setting `useTransformers` to `false`:

```js [config.js] {2}
export default {
  useTransformers: false, // [!code ++]
}
```

## Execution order

Transformers in Maizzle need to run in a specific order, see it on the [build process](/docs/build-process#compile-templates) page.

## API

Maizzle Transformers can also be used programmatically in your application. You can inline some CSS or minify HTML even without using Maizzle to build your emails.

See the documentation of each Transformer for usage examples.

</document_content>
</document>
<document index="21">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/upgrade-guide.md</source>
<document_content>
---
title: "Upgrade Guide"
description: "How to upgrade your Maizzle project to the latest major framework release."
---

# Upgrade Guide

Upgrading your Maizzle projects from v4.x to v5.

Maizzle 5 is a major framework rewrite that comes with awesome new features and improvements, but also includes a few breaking changes.

Migrating an existing project to Maizzle 5 takes less than 10 minutes in most cases.

## Node.js

<strong class="text-indigo-500">BREAKING CHANGE</strong>

Maizzle 5 requires Node.js v18.20 or higher.

Check your current Node.js version:

```sh
node --version
```

<Alert>Maizzle is tested on Node.js 18, 20, and 22.</Alert>

## Update @maizzle/cli

If you use `@maizzle/cli` installed globally, you must upgrade it to v2.x in order to use it in Maizzle 5 projects:

```sh
npm install -g @maizzle/cli
```

Alternatively, you can just use the NPM scripts like `npm run dev` from `package.json`.

## Update package.json

The `@maizzle/framework` package is now a module, so you need to update your `package.json` file to reflect this change.

```json [package.json] {3}
{
  "private": true,
  "type": "module",  // [!code ++]
  "scripts": {
    "dev": "maizzle serve",
    "build": "maizzle build production"
  },
  "dependencies": {
    "@maizzle/framework": "latest",
    "tailwindcss-preset-email": "latest"
  }
}
```

## Upgrade dependencies

It's probably best that you do a clean install:

- remove `node_modules` directory
- remove `package-lock.json` and/or `yarn.lock`

<Alert>If using yarn, note that it might have cached your dependencies.</Alert>

Install the `latest` version of Maizzle:

```sh
npm install @maizzle/framework@latest
```

## Update your HTML

### yield

<strong class="text-indigo-500">BREAKING CHANGE</strong>

The `<content />` tag has been replaced with `<yield />`.

Make sure to update it in your Layouts and Components:

```html [layouts/main.html] {8}
<!doctype html>
<html lang="en">
<head>
  <!-- ... -->
</head>
<body>
  <content /> // [!code --]
  <yield /> // [!code ++]
</body>
</html>
```

### style

<strong class="text-indigo-500">BREAKING CHANGE</strong>

Tailwind CSS can now be used as expected, with `@tailwind` directives in any `<style>` tag, instead of the old `<style>{{{ page.css }}}</style>`.

```html [layouts/main.html] {6-7}
<!doctype html>
<html lang="en">
<head>
  <style>
    {{{ page.css }}} /* [!code --] */
    @​tailwind components; /* [!code ++] */
    @​​tailwind utilities; /* [!code ++] */
  </style>
</head>
<body>
  <yield />
</body>
</html>
```

## Update tailwind.config.js

We created [`tailwindcss-preset-email`](https://github.com/maizzle/tailwindcss-preset-email) to make it easier to use Tailwind CSS for styling HTML emails - it outputs more email-friendly CSS and includes some useful plugins.

Using it will now greatly simplify your `tailwind.config.js` file, this is all you need:

```js [tailwind.config.js]
/** @type {import('tailwindcss').Config} */
module.exports = {
  presets: [
    require('tailwindcss-preset-email'),
  ],
  content: [
    './components/**/*.html',
    './emails/**/*.html',
    './layouts/**/*.html',
  ],
}
```

You now also need to define content sources in your `tailwind.config.js` - Maizzle will _not_ automatically scan any paths for files containing Tailwind classes to generate.

## Update config.js

The Maizzle config has been reimagined, so naturally there are a few breaking changes.

### ESM export

<strong class="text-indigo-500">BREAKING CHANGE</strong>

The config file is now an ESM module, which means you can use `import` and cool stuff like top-level `await`.
It also means you need to make this change:

```js [config.js] {2} no-copy
  module.exports = { // [!code --]
  export default { // [!code ++]
```

If you need to keep using `module.exports` you must use the `.cjs` extension:

```js [C:/dev/maizzle] {3,4} no-copy
  config.js // [!code --]
  config.production.js // [!code --]
  config.cjs // [!code ++]
  config.production.cjs // [!code ++]
```

### build

<strong class="text-indigo-500">BREAKING CHANGE</strong>

The `build` key, which is where you define what emails to build and where to output them, has changed considerably.

This is how the `build` key looks in Maizzle 5:

```js [config.js]
export default {
  build: {
    content: ['emails/**/*.html'],
    static: {
      source: ['images/**/*.*'],
      destination: 'images',
    },
    output: {
      path: 'build_production',
      extension: 'html',
    },
    summary: true,
    spinner: 'circleHalves',
  },
}
```

### components

The `components` key has been moved outside `build`, to the root of the config file:

```js [config.js] {5}
export default {
   build: { // [!code --]
     components: {} // [!code --]
   } // [!code --]
   components: {} // [!code ++]
}
```

### events

Events have been moved to the root of the config file:

```js [config.js] {3-5}
export default {
   events: {...} // [!code --]
   async beforeRender({html, matter, config}) { // [!code ++]
     // ... // [!code ++]
   }, // [!code ++]
}
```

### extraAttributes

This key has been moved to `css.attributes.add`:

```js [config.js] {3-7}
export default {
   extraAttributes: {} // [!code --]
   css: { // [!code ++]
     attributes: { // [!code ++]
       add: {} // [!code ++]
     } // [!code ++]
   } // [!code ++]
}
```

### layouts

The `layouts` key is no longer used, you can safely remove it.

### inlineCSS

Configuration for CSS inlining has been moved under the `css.inline` key:

```js [config.js] {3-5}
export default {
   inlineCSS: {} // [!code --]
   css: { // [!code ++]
     inline: true, // [!code ++]
   } // [!code ++]
}
```

See the [CSS inlining docs](/docs/transformers/inline-css) for all the options available.

### outlook

Configuring the custom tag for Outlook conditionals is done through the same `outlook` key, but at the root of the config file instead of inside the `posthtml` key:

```js [config.js] {5-7}
export default {
   posthtml: { // [!code --]
     outlook: {} // [!code --]
   } // [!code --]
   outlook: { // [!code ++]
     tag: 'mso', // [!code ++]
   }, // [!code ++]
}
```

### fetch

The `fetch` key has been moved to the root of the config file:

```js [config.js] diff {5-7}
export default {
   posthtml: { // [!code --]
     fetch: {} // [!code --]
   } // [!code --]
   fetch: { // [!code ++]
     tags: ['get'], // [!code ++]
   }, // [!code ++]
}
```

See the [fetch docs](/docs/tags#fetch-options) for the available options.

### postcss

PostCSS may now be configured under the root `postcss` key:

```js [config.js] {5}
export default {
   build: { // [!code --]
     postcss: {} // [!code --]
   } // [!code --]
   postcss: {} // [!code ++]
}
```

### removeAttributes

This Transformer has been moved to `css.attributes.remove`:

```js [config.js] {3-7}
export default {
   removeAttributes: [] // [!code --]
   css: { // [!code ++]
     attributes: { // [!code ++]
       remove: []  // [!code ++]
     } // [!code ++]
   } // [!code ++]
}
```

### removeUnusedCSS

Configuration for this Transformer has been moved to `css.purge`:

```js [config.js] {3-5}
export default {
   removeUnusedCSS: {} // [!code --]
   css: { // [!code ++]
     purge: {} // [!code ++]
   } // [!code ++]
}
```

### shorthandCSS

The shorthand CSS Transformer config has been moved to `css.shorthand`:

```js [config.js] {3-5}
export default {
   shorthandCSS: true // [!code --]
   css: { // [!code ++]
     shorthand: true // [!code ++]
   } // [!code ++]
}
```

### safeClassNames

The `safeClassNames` option has been renamed and moved to `css.safe`:

```js [config.js] {3-5}
export default {
   safeClassNames: {} // [!code --]
   css: { // [!code ++]
     safe: {} // [!code ++]
   } // [!code ++]
}
```

### server

Browsersync has been replaced with a custom dev server, powered by Express.js and WebSockets with `morphdom` for an HMR-like local development experience.

We call this Hot Markup Replacement&trade;.

This [new dev server](/docs/configuration/server) is much faster and provides a nicer experience, but you'll need to update your `config.js` if you want to configure it:

```js [config.js] {3-10}
export default {
   browsersync: {...}, // [!code --]
   server: { // [!code ++]
     port: 3000, // [!code ++]
     hmr: true, // [!code ++]
     scrollSync: false, // [!code ++]
     watch: ['./images/**/*'], // [!code ++]
     reportFileSize: false, // [!code ++]
     spinner: 'circleHalves', // [!code ++]
   }, // [!code ++]
}
```

### sixHex

This Transformer config has been moved to `css.sixHex`:

```js [config.js] {3-5}
export default {
   sixHex: true // [!code --]
   css: { // [!code ++]
     sixHex: true // [!code ++]
   } // [!code ++]
}
```

### tailwind

The `tailwind` key in `config.js` has been deprecated, you can safely remove it.

You may now simply use `@config` in your `<style>` tags or files included with `<link>`, to specify a custom Tailwind CSS config file to use:

```html [layouts/main.html]
<style>
  @config 'tailwind.custom.js';
  @tailwind components;
  @tailwind utilities;
</style>
```

If you prefer using CSS files:

```css [css/tailwind.css]
@config 'tailwind.custom.js';
@tailwind components;
@tailwind utilities;
```

... you may import that through a `<link>` tag or with an `@import` statement:

```html
<link rel="stylesheet" href="css/tailwind.css">

<!-- or -->
<style>
  @import 'css/tailwind.css';
</style>
```

You can still define a Tailwind config object if you need to, under `css.tailwind`:

```js [config.js]
export default {
  css: {
    tailwind: {}, // custom Tailwind CSS config object
  },
}
```

### templates

The `templates` key has been deprecated, see [`build`](#build) above for how to define Template and other assets sources.

### applyTransformers

This has been renamed to `useTransformers`:

```js [config.js] {3}
export default {
   applyTransformers: true // [!code --]
   useTransformers: true // [!code ++]
}
```

## Optional

These updates are optional but highly recommended.

### Update components

The Maizzle 5 Starter uses updated components for dividers, spacers, or buttons.

We recommend you update your components to the latest versions, which you can find in the [Starter project](https://github.com/maizzle/maizzle) on GitHub.

</document_content>
</document>
<document index="22">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/configuration/build.md</source>
<document_content>
---
title: "Build configuration"
description: "Configuring content sources and other build related options in Maizzle."
---

# Build configuration

Configure the paths where Maizzle should look for Templates to compile, where they should be output to, or what extensions they should use.

This is done under the `build` key of your config:

```js [config.js]
export default {
  build: {
    content: ['emails/**/*.html'],
  }
}
```

## content

Type: `String[]`\
Default: `['emails/**/*.html']`

Define the source directories where Maizzle should look for Templates to compile.

This is an array of glob patterns, similar to how content sources are configured in Tailwind CSS. See [fast-glob](https://github.com/mrmlnc/fast-glob) for how to write glob patterns.

The `content` key is unique to each config file - unlike other options in your config, it is not merged when using multiple Environments. This way, we avoid processing unwanted Templates when building for a specific Environment.

To illustrate this, imagine this is your `config.js` file:

```js [config.js]
export default {
  build: {
    content: ['emails/**/*.html'],
  }
}
```

... and this is your `config.production.js` file:

```js [config.production.js]
export default {
  build: {
    content: ['emails/transactional/**/*.html'],
  }
}
```

When running `maizzle build production`, only the Templates from the `emails/transactional` folder will be compiled, no matter if the `emails` folder contains other Templates.

### File types

Specify which file extensions should be considered when looking for Templates to compile. For example, to include both `.html` and `.blade.php` files:

```js [config.js]
export default {
  build: {
    content: ['emails/**/*.{html,blade.php}'],
  }
}
```

### Excluding files

You may exclude files from being compiled by prefixing the glob pattern with an exclamation mark `!`. For example, to exclude all files ending in `-ignore.html`:

```js [config.js]
export default {
  build: {
    content: [
      'emails/**/*.html',
      '!emails/**/*-ignore.html',
    ],
  }
}
```

### Compute paths

If you need to compute the content source paths dynamically, you can use a function that returns an array of strings:

```js [config.js]
const sources = () => {
  return ['templates**/*.html', 'amp-templates/**/*.html']
}

export default {
  build: {
    content: sources
  }
}
```

<Alert>Previously this was called 'Function source', and it allowed defining sources as a function that was evaluated by Maizzle. This is deprecated starting with Maizzle 5.</Alert>

### Multiple sources

You may define multiple content sources:

```js [config.js]
export default {
  build: {
    content: [
      'marketing/**/*.html',
      'transactional/**/*.html'
    ]
  }
}
```

## output

Type: `Object`\
Default: `{ path: 'build_[env]', extension: 'html', from: ['emails'] }`

Define the output path for compiled Templates, and what file extension they should use.

### path

Type: `String`\
Default: `build_[env]`

Directory path where Maizzle should output the compiled emails.

```js [config.production.js]
export default {
  build: {
    output: {
      path: 'build_production',
    }
  }
}
```

If you omit this key, a `build_[env]` directory name will be used, where `[env]` is the current environment, i.e. `build_production` or `build_local`.

### extension

Type: `String`\
Default: `undefined`

Define the file extension - without the leading dot - to be used for the compiled templates. For example, let's output [Laravel Blade](https://laravel.com/docs/8.x/blade) files:

```js [config.laravel.js]
export default {
  build: {
    output: {
      path: 'build_laravel',
      extension: 'blade.php'
    }
  }
}
```

The compiled Templates will be output as `build_laravel/*.blade.php`.

By default, Maizzle will use the extension of the source file.

### from

Type: `String[]`\
Default: `['emails']`

Default directories to unwrap when outputting compiled Templates.

For example, if you have a Template located at `emails/welcome.html` in your Maizzle project, by default the compiled file will be output as `build_[env]/welcome.html` - the `emails` part of the path is discarded.

If you have multiple sources, you can specify additional directories to unwrap:

```js [config.js]
export default {
  build: {
    content: [
      'emails/**/*.html',
      'amp-templates/**/*.html'
    ],
    output: {
      from: ['emails', 'amp-templates']
    }
  }
}
```

<alert>You must specify all directories to unwrap when using `output.from` and multiple `build.content` source paths, as this option overwrites the default `[emails]` value.</alert>

In this case, the compiled files will all be output at the root of the `build_[env]` directory.

#### \`from\` caveat

Templates in Maizzle are processed in the order their source paths are defined in `build.content`, which means files with identical names will be overwritten if they have the same output path as a result of their parent directory being unwrapped.

In the `emails` and `amp-templates` example above, if both directories contain a `welcome.html` file, the content of the one in the `amp-templates` directory will overwrite that of the one in the `emails` directory.

## permalink

Type: `String`\
Default: `undefined`

Use the `permalink` Front Matter key to define a custom output path right in a Template:

```hbs [emails/example.html]
---
permalink: output/this/template/here.html
---

<x-main>
  <!-- your email HTML... -->
</x-main>
```

This will override `output.path` from your config, but only for this Template.

You may use both relative and absolute file paths.

For example, output one level above project directory:

```hbs [emails/example.html]
---
permalink: ../newsletter.html
---

<x-main>
  <!-- your email HTML... -->
</x-main>
```

Output at a specific system location:

```hbs [emails/example.html]
---
permalink: C:/Users/Cosmin/Newsletter/2024/07/index.html
---

<x-main>
  <!-- your email HTML... -->
</x-main>
```

<Alert type="warning">`permalink` must be a <em>file</em> path, and can only be used in the Template's Front Matter. Using a directory path will result in a build error.</Alert>

## static

Type: `Object`\
Default: `{ source: '', destination: 'assets' }`

Source and destination directories for static asset files.

At build time, `build.static.destination` will be created relative to `build.output.path`, and files inside `build.static.source` will be copied into it:

```js [config.js]
export default {
  build: {
    static: {
      source: 'images/**/*',
      destination: 'images',
    }
  }
}
```

You can use it to store _any_ files you might need, not just images.

## spinner

Type: `String|Object`\
Default: `'circleHalves'`

Customize the spinner shown in the console during build.

```js [config.js]
export default {
  build: {
    spinner: 'dots'
  }
}
```

See the [ora spinners list](https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json) for available options.

## summary

Type: `Boolean`\
Default: `false`

Show a summary at the end the build process. A table with the following information will be displayed:

- file name
- file size
- build time

You may also enable this option by passing the `--summary` or `-s` flag to the build command.

```sh
maizzle build --summary
```

</document_content>
</document>
<document index="23">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/configuration/components.md</source>
<document_content>
---
title: "Components configuration"
description: "Configuring components in Maizzle."
---

# Components configuration

Control where your Components live and how you reference them.

## root

Type: `String`\
Default: `'./'`

Root path where to look for folders containing component files.

## folders

Type: `Array`\
Default: `['components', 'layouts', 'emails']`

Folder paths where to look for component files. Relative to `root`.

If you keep your components in a different folder, you can add it here:

```js [config.js]
export default {
  components: {
    folders: ['custom-components'],
  },
}
```

The paths you defined will be added to the default folders.

## fileExtension

Type: `String`|`String[]`\
Default: `'html'`

Define the file extension(s) that component files must use.

To define multiple file extensions, use an array:

```js [config.js]
export default {
  components: {
    fileExtension: ['html', 'php'],
  },
}
```

Any other files will be ignored and not be made available as components.

## tagPrefix

Type: `String`\
Default: `'x-'`

Prefix string to use for component tags.

If you prefer to write `<a-button>` instead of `<x-button>`, do this:

```js [config.js]
export default {
  components: {
    tagPrefix: 'a-',
  },
}
```

## tag

Type: `String|Boolean`\
Default: `'component'`

You may alternatively reference any component using this tag name and passing in the component file path in the `src` prop.

By default, this ensures backwards compatibility with the old components system so you can continue to use syntax like `<component src="button.html" />` in your templates.

For example, if you prefer to write `<module src="button.html" />`, do this:

```js [config.js]
export default {
  components: {
    tag: 'module',
  },
}
```

Set it to `false` to disable this feature and only use `x-` tags.

## attribute

Type: `String`\
Default: `'src'`

You may define a custom attribute name to use for the `tag`.

```js [config.js]
export default {
  components: {
    attribute: 'href',
  },
}
```

You can now use `<component href="button.html" />` in your templates.

## yield

Type: `String`\
Default: `'yield'`

Name of the tag that will be replaced with the content that is passed to the component.

If you want to change it to be `content` as in previous versions of Maizzle, do this:

```js [config.js]
export default {
  components: {
    yield: 'content',
  },
}
```

You'd then define a component like this:

```html [components/button.html]
<a href="...">
  <content />
</a>
```

## slot

Type: `String`\
Default: `'slot'`

Name for the [`slot` tag](/docs/components#slots).

For example, maybe you want to change this to be `provide`:

```js [config.js]
export default {
  components: {
    slot: 'provide',
  },
}
```

You could then use `provide` instead of `slot` when defining a component:

```html [components/footer.html]
<script props>
  module.exports = {
    year: new Date().getFullYear(),
  }
</script>

<footer>
  <provide:footer-logo />

  <p>&copy; {{ year }}</p>

  <content />
</footer>
```

You'd fill `provide` as usual:

```html [emails/example.html]
<x-footer>
  <fill:footer-logo>
    <img src="logo.png">
  </fill:footer-logo>

  <p>Some content</p>
</x-footer>
```

Result:

```html [build_production/example.html]
<footer>
  <img src="logo.png">

  <p>&copy; 2023</p>

  <p>Some content</p>
</footer>
```

## fill

Type: `String`\
Default: `'fill'`

Name for the [`fill` tag](/docs/components#slots).

For example, maybe you want to change this to be `inject`:

```js [config.js]
export default {
  components: {
    fill: 'inject',
  },
}
```

Given the previous example, you'd now use `inject` instead of `fill` when defining a component:

```html [emails/example.html]
<x-footer>
  <inject:footer-logo>
    <img src="logo.png">
  </inject:footer-logo>

  <p>Some content</p>
</x-footer>
```

## slotSeparator

Type: `String`\
Default: `':'`

String to use as a separator between the `slot` tag and its name.

For example, changing it to `@`:

```js [config.js]
export default {
  components: {
    slotSeparator: '@',
  },
}
```

You'd then use `<slot@footer-logo />` and `<fill@footer-logo>`:

```html [emails/example.html]
<x-footer>
  <fill@footer-logo>
    <img src="logo.png">
  </fill@footer-logo>
</x-footer>
```

## push

Type: `String`\
Default: `'push'`

Name for the [\<push\> tag](/docs/components#stacks).

## stack

Type: `String`\
Default: `'stack'`

Name for the [\<stack\> tag](/docs/components#stacks).

## propsScriptAttribute

Type: `String`\
Default: `'props'`

Name of the props attribute to use in the `<script>` tag of a component.

If you change it to `locals`:

```js [config.js]
export default {
  components: {
    propsScriptAttribute: 'locals',
  },
}
```

... you'd then use `locals` instead of `props` when defining the script in a component:

```hbs [components/button.html]
<script locals>
  module.exports = {
    href: props.href || '#',
  }
</script>

<a href="{{ href }}">
  <yield />
</a>
```

## propsContext

Type: `String`\
Default: `'props'`

Name of the object that will be used to store the props of a component.

For example, if you change it to `data` like this:

```js [config.js]
export default {
  components: {
    propsContext: 'data',
  },
}
```

... you'd then use `data` instead of `props` when defining the props of a component:

```hbs [components/button.html]
<script props>
  module.exports = {
    href: data.href || '#', // using data.href instead of props.href
  }
</script>

<a href="{{ href }}">
  <yield />
</a>
```

## propsAttribute

Type: `String`\
Default: `'locals'`

Name of the attribute that will be used to pass props to a component as JSON.

Set to `locals` by default, for backwards compatibility with the old components system.

Again, let's change it to `data`:

```js [config.js]
export default {
  components: {
    propsAttribute: 'data',
  },
}
```

You'd then use `data` instead of `locals` when passing props as JSON to a component:

```html [emails/example.html]
<x-button data='{"href": "https://example.com"}'>
  Click me
</x-button>
```

## propsSlot

Type: `String`\
Default: `'props'`

String value used to retrieve the props passed to slot via `$slots.slotName.props`.

For example, if you change it to `data` and have a component with a `header` slot, you'd be able to access the props passed to the slot via `$slots.header.data`.

## parserOptions

Type: `Object`\
Default: `{ recognizeSelfClosing: true }`

Object to configure the underlying `posthtml-parser` library.

By default, it enables support for self-closing component tags.

## expressions

Type: `Object`\
Default: `{/*custom object*/}`

Object to configure how expressions are handled in components.

Maizzle passes your config variables and the contents of your `build.expressions` object to it, so that you have them all available inside your&nbsp;components.

## plugins

Type: `Array`\
Default: `[]`

Array of PostHTML plugins to apply to each parsed component.

## attrsParserRules

Type: `Object`\
Default: `{}`

Extra rules for the PostHTML plugin that is used by components to parse attributes.

## strict

Type: `Boolean`\
Default: `true`

In `strict` mode, an error will be thrown if a component cannot be rendered.

## utilities

Type: `Object`\
Default: `{ merge: _.mergeWith, template: _.template }`

Utility methods to be passed to `<script props>`.

By default you can use `mergeWith` and `template` from `lodash`.

## elementAttributes

Type: `Object`\
Default: `{}`

Define additional attributes that should be preserved for specific HTML elements.

It's an object with the following structure:

```js
TAG_NAME: (defaultAttributes) => {
  // return defaultAttributes
}
```

For example, say you have an attribute called `tracking-id` that you only use on `<div>` elements. By default, it would be stripped out in a component, because it's not a standard HTML attribute.

But you can add it to the 'valid' attributes list for `<div>` elements like this:

```js [config.js] {3-8}
export default {
  components: {
    elementAttributes: { // [!code ++]
      DIV: (defaultAttributes) => { // [!code ++]
        defaultAttributes.push('tracking-id') // [!code ++]
        return defaultAttributes // [!code ++]
      }, // [!code ++]
    }, // [!code ++]
  },
}
```

<Alert>This is only useful to control which elements can use what attributes. If you'd like to have all elements use an non-standard attribute, use `safelistAttributes` instead.</Alert>

## safelistAttributes

Type: `Array`\
Default: `['data-*']`

Array of attributes that should be preserved in components (on all elements).

You can use a `*` wildcard to match the rest of the string:

```js [config.js]
export default {
  components: {
    safelistAttributes: ['data-*', 'tracking-*'],
  },
}
```

## blacklistAttributes

Type: `Array`\
Default: `[]`

Array of attributes that should be removed from components (on all elements).

```js [config.js]
export default {
  components: {
    // remove the `id` attribute from all elements in components
    blacklistAttributes: ['id'],
  },
}
```

</document_content>
</document>
<document index="24">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/configuration/css.md</source>
<document_content>
---
title: "Tailwind CSS configuration"
description: "Tailwind CSS configuration options for email development in Maizzle."
---

# CSS configuration

Configuring Tailwind CSS and how CSS is compiled in Maizzle.

## Options

CSS handling in Maizzle can be configured under the `css` key in your `config.js` file:

```js [config.js]
export default {
  css: {
    inline: true,
    purge: true,
    resolveCalc: true,
    resolveProps: true,
    safe: true,
    shorthand: true,
    sixHex: true,
    tailwind: {},
  },
}
```

### inline

Type: `Boolean`\
Default: `undefined`

Configure how CSS is inlined in your HTML emails.

For details, see the [CSS inlining documentation](/docs/transformers/inline-css).

### purge

Type: `Boolean|Object`\
Default: `undefined`

Configure email-safe unused CSS purging.

For details, see the [CSS Purge Transformer docs](/docs/transformers/purge-css).

### resolveCalc

Type: `Boolean|PostCssCalcOptions`\
Default: `true`

Whether to resolve `calc()` expressions in the CSS to their computed values.

By default, something like this:

```html
<style>
  div {
    width: calc(100% / 3);
  }
</style>
```

... will be compiled to:

```html
<style>
  div {
    width: 33.33%;
  }
</style>
```

<Alert>Maizzle uses a 2-decimal precision when resolving `calc()` expressions.</Alert>

This uses [`postcss-calc`](https://www.npmjs.com/package/postcss-calc) to resolve `calc()` functions in your CSS to their computed values whenever possible. When multiple units are mixed in the same `calc()` expression, the statement will be output as-is.

You may pass an object to configure `postcss-calc`:

```js [config.js]
export default {
  css: {
    resolveCalc: {
      precision: 3, // precision for decimal numbers (2 by default)
    },
  },
}
```

See the [postcss-calc options](https://github.com/postcss/postcss-calc/#options).

### resolveProps

Type: `Boolean|Object`\
Default: `true`

CSS custom properties, or CSS variables, are poorly supported in email clients. Whenever you use them, Maizzle will try to resolve them to their static representation.

You may configure this behavior by setting the `resolveProps` key to `false` (to disable it) or to a [`postcss-css-variables`](https://www.npmjs.com/package/postcss-css-variables) options object:

```js [config.js]
export default {
  css: {
    resolveProps: false, // or postcss-css-variables options
  },
}
```

See the [postcss-css-variables options](https://github.com/MadLittleMods/postcss-css-variables/#options).

### safe

Type: `Boolean|Object`\
Default: `true`

Rewrites Tailwind CSS class names to email-safe alternatives.

See the [Safe Class Names Transformer docs](/docs/transformers/safe-class-names).

### shorthand

Type: `Boolean|Object`\
Default: `undefined`

Configure rewriting of CSS properties to their shorthand form. Disabled by default.

See the [Shorthand Transformer docs](/docs/transformers/shorthand-css).

### sixHex

Type: `Boolean`\
Default: `true`

Whether to convert 3-digit HEX colors to 6-digit HEX colors. Enabled by default.

See the [Six HEX Transformer docs](/docs/transformers/six-hex).

### tailwind

You'll probably only need this when using Maizzle programmatically - otherwise you can use the `@config` directive in your CSS to specify a custom Tailwind CSS config file to use.

It's important to note that when using `css.tailwind` you need to provide a Tailwind CSS configuration object with all values that you need to be different from Tailwind's defaults. So you need to specify `px` values, screens etc. that work in email clients:

```js [config.js]
export default {
  css: {
    tailwind: {
      content: [
        './components/**/*.html',
        './emails/**/*.html',
        './layouts/**/*.html',
      ],
      important: true,
      screens: {
        sm: {max: '600px'},
        xs: {max: '425px'},
      },
      spacing: {
        px: '1px',
        0.5: '2px',// etc.
      },
    },
  },
}
```

If you want, you can import `tailwindcss-preset-email`:

```js [config.js]
import emailPreset from 'tailwindcss-preset-email'

export default {
  css: {
    tailwind: {
      presets: [ emailPreset ],
      content: [ /* ... */ ],
    },
  },
}
```

## tailwind.config.js

Maizzle uses [`tailwindcss-preset-email`](https://github.com/maizzle/tailwindcss-preset-email), a custom preset that configures Tailwind CSS for better email client support.

This preset helps generate more email-friendly CSS, by disabling some of the default Tailwind CSS features that are not well supported in email clients.
For example, HEX values are preferred over CSS variables, and `rem` units are replaced with `px` units.

### content

By default, Tailwind CSS in Maizzle is configured to scan all `.html` files in your project's `src` directory for classes to generate:

```js [tailwind.config.js]
export default {
  content: [
    './components/**/*.html',
    './emails/**/*.html',
    './layouts/**/*.html',
  ],
}
```

### !important

HTML emails still need to use inline CSS, most notably for these reasons:

- Outlook/Office 365 for Windows only reads the first class in a `class=""` attribute, ignoring the rest. So it'll only use `a` from `class="a b"`
- Some email clients don't support embedded CSS (i.e. in `<style>`)
- Embedded styles are often discarded when an email is forwarded

The Tailwind preset in Maizzle sets `important: true` - this way, things like responsive utilities can actually override inline CSS.

<Alert>Only CSS in `<style>` tags will use `!important`, inlined CSS in `style=""` attributes will not.</Alert>

You may disable this behavior by setting the `important` key to `false`:

```js [tailwind.config.js] {6}
/** @type {import('tailwindcss').Config} */
module.exports = {
  presets: [
    require('tailwindcss-preset-email'),
  ],
  important: false, // [!code ++]
}
```

### separator

Characters like `:` in `hover:bg-black` need to be \escaped in CSS.

Because some email clients (Gmail 👀) fail to parse selectors with escaped characters, Maizzle normalizes all your CSS selectors and HTML classes, replacing any escaped characters it finds with email-safe alternatives.

So you can safely use Tailwind's awesome default separator and write classes like `sm:w-1/2` - Maizzle will convert that to `sm-w-1-2` in your compiled template.

You may also [configure the replacement mappings](/docs/transformers/safe-class-names) if you need to.

### screens

Maizzle uses a desktop-first approach with `max-width` media queries instead of Tailwind's default, mobile-first approach that uses `min-width`.

These are the default screens in Maizzle:

```js [tailwind.config.js]
export default {
  screens: {
    sm: {max: '600px'},
    xs: {max: '425px'},
  },
}
```

Of course, you're free to adjust this as you like. For example, you might add a breakpoint that targets tablet devices based on their viewport width:

```js [tailwind.config.js] diff {7}
/** @type {import('tailwindcss').Config} */
module.exports = {
  presets: [
    require('tailwindcss-preset-email'),
  ],
  screens: {
    md: {min: '768px', max: '1023px'}, // [!code ++]
    sm: {max: '600px'},
    xs: {max: '425px'},
  },
}
```

That would enable you to write classes like `md:hidden` or `md:text-lg`, which will be wrapped in a `@media (min-width: 768px) and (max-width: 1023px)` media query.

More on screens, in the [Tailwind CSS docs](https://tailwindcss.com/docs/responsive-design).

### colors

Maizzle uses the [default color palette](https://tailwindcss.com/docs/customizing-colors) from Tailwind CSS.

You may define your own colors, or even extend or change the default color palette by adding a `colors` key to your Tailwind config:

```js [tailwind.config.js]
import emailPreset from 'tailwindcss-preset-email'

/** @type {import('tailwindcss').Config} */
export default {
  presets: [
    emailPreset,
  ],
  theme: {
    extend: {
      colors: {
        blue: {
          // change 'blue-500'
          500: '#03a9f4',
          // add 'blue-1000'
          1000: '#101e47',
        },
        // custom color
        primary: '#FFCC00',
      }
    }
  }
}
```

### spacing

The spacing scale has been extended to include more values:

```js
spacing: {
  screen: '100vw',
  full: '100%',
  px: '1px',
  0: '0',
  0.5: '2px',
  1: '4px',
  // ...
  14: '56px',
  16: '64px',
  18: '72px',
  // ...
  48: '192px',
  50: '200px',
  // ...
  96: '384px',
},
```

### borderRadius

```js
borderRadius: {
  none: '0px',
  sm: '2px',
  DEFAULT: '4px',
  md: '6px',
  lg: '8px',
  xl: '12px',
  '2xl': '16px',
  '3xl': '24px',
},
```

### boxShadow

The [tailwindcss-box-shadow](https://www.npmjs.com/package/tailwindcss-box-shadow) plugin is used to output `box-shadow` CSS values exactly as you have them defined in your Tailwind CSS config.

```js
boxShadow: {
  sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
  DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)',
  md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)',
  lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1)',
  xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)',
  '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
  inner: 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.05)',
},
```

### fontFamily

Font stacks are the default ones from Tailwind CSS, but simplified. We also include a stack for the Inter font:

```js
fontFamily: {
  inter: ['Inter', 'ui-sans-serif', 'system-ui', '-apple-system', '"Segoe UI"', 'sans-serif'],
  sans: ['ui-sans-serif', 'system-ui', '-apple-system', '"Segoe UI"', 'sans-serif'],
  serif: ['ui-serif', 'Georgia', 'Cambria', '"Times New Roman"', 'Times', 'serif'],
  mono: ['ui-monospace', 'Menlo', 'Consolas', 'monospace'],
},
```

### fontSize

Pixel values are preferred for font size utilities:

```js
fontSize: {
  0: '0',
  xxs: '11px',
  xs: '12px',
  '2xs': '13px',
  sm: '14px',
  '2sm': '15px',
  base: '16px',
  lg: '18px',
  xl: '20px',
  '2xl': '24px',
  '3xl': '30px',
  '4xl': '36px',
  '5xl': '48px',
  '6xl': '60px',
  '7xl': '72px',
  '8xl': '96px',
  '9xl': '128px',
},
```

### lineHeight

The `lineHeight` utilities have been extended to include all `spacing` scale values:

```js
lineHeight: theme => ({
  ...theme('spacing'),
}),
```

So you can use `leading` utilities to easily create vertical spacing, like this:

```html [emails/example.html]
<div class="leading-16">&zwj;</div>
```

Result:

```html
<div style="line-height: 64px">&zwj;</div>
```

### maxWidth

```js
maxWidth: theme => ({
  ...theme('spacing'),
  xs: '160px',
  sm: '192px',
  md: '224px',
  lg: '256px',
  xl: '288px',
  '2xl': '336px',
  '3xl': '384px',
  '4xl': '448px',
  '5xl': '512px',
  '6xl': '576px',
  '7xl': '640px',
}),
```

### Pixel units

Because of poor email client support, our email preset for Tailwind CSS replaces `rem` units with `px`.
This affects the following utilities:

- `spacing` (width, height, margin, padding, etc)
- `maxWidth`
- `borderRadius`
- `fontSize`
- `lineHeight`

### Plugins

You can of course use any Tailwind CSS plugin, all you have to do is to install it from NPM and then `import` or `require` it in your `tailwind.config.js`.

```sh
npm install tailwindcss-email-variants
```

With `import`:

```js [tailwind.config.js] {1, 4-6}
 import emailVariants from 'tailwindcss-email-variants' // [!code ++]

 export default {
    plugins: [ // [!code ++]
      emailVariants, // [!code ++]
    ], // [!code ++]
 }
```

With `require`:

```js [tailwind.config.js] {2-4}
module.exports = {
   plugins: [ // [!code ++]
     require('tailwindcss-email-variants'), // [!code ++]
   ], // [!code ++]
}
```

<Alert type="info">`tailwindcss-email-variants` is already included in the email preset, no need to install it.</Alert>

### Disabled plugins

`tailwindcss-preset-email` disables the following Tailwind CSS core plugins due to poor support in the majority of email clients:

- preflight
- backgroundOpacity
- borderOpacity
- borderSpacing
- divideOpacity
- placeholderOpacity
- textOpacity
- textDecoration

If you want to use one of these plugins, simply set it to `true` in `corePlugins` at the bottom of your `tailwind.config.js`:

```js [tailwind.config.js] {3}
corePlugins: {
  backgroundOpacity: false, // [!code --]
  backgroundOpacity: true, // [!code ++]
}
```

</document_content>
</document>
<document index="25">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/configuration/expressions.md</source>
<document_content>
---
title: "Expressions configuration"
description: "Configuring expressions in Maizzle."
---

# Expressions configuration

Expressions may be configured in your project's `config.js`:

```js [config.js]
export default {
  expressions: {
    // ...
  }
}
```

## delimiters

Type: `Array`\
Default: `['{{', '}}']`

Array containing beginning and ending delimiters for expressions.

It's common for templating engines (like those used by email service providers) to use `{{` and `}}` as delimiters. You may change the ones Maizzle uses in order to avoid conflicts:

```js [config.js]
export default {
  expressions: {
    delimiters: ['[[', ']]'],
  }
}
```

## unescapeDelimiters

Type: `Array`\
Default: `['{{{', '}}}']`

Array containing beginning and ending delimiters for unescaped locals.

You'd normally use these when you want to output HTML from a variable without escaping it:

```html
{{ '<span>escaped</span>' }}
{{{ '<span>unescaped</span>' }}}
```

Result:

```html
&lt;span&gt;escaped&lt;/span&gt;
<span>unescaped</span>
```

## locals

Type: `Object`\
Default: `{}`

Variables defined here will be available 'locally', meaning you won't need to use the `page` object when accessing them.

For example, if you set this to something like `{foo: 'bar'}`, you can access it in your templates through `{{ foo }}` instead of `{{ page.foo }}`.

## localsAttr

Type: `String`\
Default: `locals`

Attribute name for `<script>` tags that contain locals.

Imagine you'd write `<script vars>` instead of `<script locals>` to define variables in your templates. You can change the attribute name like this:

```js [config.js]
export default {
  expressions: {
    localsAttr: 'vars',
  }
}
```

Then, you'd use it like this:

```hbs [example.html]
<script vars>
  module.exports = {
    foo: "bar"
  }
</script>

{{ foo }}
```

## removeScriptLocals

Type: `Boolean`\
Default: `false`

Whether to remove `<script>` tags that contain locals.

## conditionalTags

Type: `Array`\
Default: `['if', 'elseif', 'else']`

Array containing tag names to be used for [if/else statements](/docs/tags/#conditionals).

## switchTags

Type: `Array`\
Default: `['switch', 'case', 'default']`

Array containing tag names to be used for [switch statements](/docs/tags/#switch).

## loopTags

Type: `Array`\
Default: `['each', 'for']`

Array containing tag names to be used for [loops](/docs/tags/#loops).

## scopeTags

Type: `Array`\
Default: `['scope']`

Array containing tag names to be used for [scopes](/docs/tags/#scope).

## ignoredTag

Type: `String`\
Default: `raw`

Name of tag inside of which expression parsing is disabled.

Besides `{{ }}` expressions, the following tags will be ignored and output as-is:

- conditional tags (if/elseif/else)
- switch tags (switch/case/default)
- loop tags (each/for)
- scope tags (scope)

## strictMode

Type: `Boolean`\
Default: `false`

Maizzle disables `strictMode` so that if you have an error inside an expression, it will be rendered as `undefined` and the email will still be compiled, instead of the build failing.

## missingLocal

Type: `undefined|String`\
Default: `{local}`

Define what to render when referencing a value that is not defined in `locals`.

| missingLocal |   strictMode   | Output                              |
|:------------:|:--------------:|:------------------------------------|
| `undefined`  |     `true`     | Error is thrown                     |
| `undefined`  |    `false`     | `undefined` (string)                |
|     `''`     | `false`/`true` | `''` (empty string)                 |
|  `{local}`   | `false`/`true` | Original reference like `{{ foo }}` |

By default, Maizzle will output the string the original reference as a string, i.e. `{{ foo }}`, when a value is not defined.

</document_content>
</document>
<document index="26">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/configuration/postcss.md</source>
<document_content>
---
title: "PostCSS configuration"
description: "Configuring PostCSS in Maizzle."
---

# PostCSS configuration

You may use custom PostCSS plugins in Maizzle.

## Plugins

Here's how you can add PostCSS plugins - we'll use [Autoprefixer](https://github.com/postcss/autoprefixer).

First, install the plugin:

```sh
npm install autoprefixer
```

Then register it in `config.js`:

```js [config.js]
import autoprefixer from 'autoprefixer'

export default {
  build: {
    postcss: {
      plugins: [
        autoprefixer,
      ]
    }
  }
}
```

Any plugins that you register in the `plugins` array will be added at the end of the PostCSS plugins stack, which means they'll run _after_ Tailwind CSS.

## Options

You may also configure PostCSS options:

```js [config.js]
export default {
  build: {
    postcss: {
      options: {
        map: true,
      }
    }
  }
}
```

</document_content>
</document>
<document index="27">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/configuration/posthtml.md</source>
<document_content>
---
title: "PostHTML configuration"
description: "Configuring PostHTML in Maizzle."
---

# PostHTML configuration

Maizzle uses PostHTML for templating and transformations, and you can configure it or even register plugins that can further transform your HTML emails.

## Options

PostHTML is configured under `build.posthtml.options` in your `config.js`.

### directives

Type: `Array`\
Default: `[]`

You can configure the PostHTML parser to correctly process custom directives.

For example, you may tell it to ignore `<?php ?>` tags instead of treating them as HTML:

```js [config.js]
export default {
  posthtml: {
    options: {
      directives: [
        { name: '?php', start: '<', end: '>' },
      ]
    }
  }
}
```

### xmlMode

Type: `Boolean`\
Default: `false`

Enable `xmlMode` if you're using Maizzle to output XML content, and not actual HTML.

```js [config.js]
export default {
  posthtml: {
    options: {
      xmlMode: true,
    }
  }
}
```

### decodeEntities

Type: `Boolean`\
Default: `false`

Set this to `true` to have entities within the document decoded.

```js [config.js]
export default {
  posthtml: {
    options: {
      decodeEntities: true,
    }
  }
}
```

### lowerCaseTags

Type: `Boolean`\
Default: `false`

Set this to `true` to output all tags in lowercase. Works only when `xmlMode` is disabled.

```js [config.js]
export default {
  posthtml: {
    options: {
      lowerCaseTags: true,
    }
  }
}
```

### lowerCaseAttributeNames

Type: `Boolean`\
Default: `false`

Output all attribute names in lowercase.

<Alert type="warning">This has a significant impact on speed.</Alert>

```js [config.js]
export default {
  posthtml: {
    options: {
      lowerCaseAttributeNames: true,
    }
  }
}
```
</CodeSample>

### recognizeCDATA

Type: `Boolean`\
Default: `false`

Recognize CDATA sections as text even if the `xmlMode` option is disabled.

<Alert>If `xmlMode` is enabled, CDATA sections will always be recognized as text.</Alert>

```js [config.js]
export default {
  posthtml: {
    options: {
      recognizeCDATA: true,
    }
  }
}
```

### recognizeSelfClosing

Type: `Boolean`\
Default: `true`

If enabled, self-closing tags will trigger the `onclosetag` event even if `xmlMode` is disabled.

<Alert>When `xmlMode` is enabled self-closing tags will always be recognized.</Alert>

Maizzle sets this to `true` to ensure self-closing tags like those of Components are rendered correctly.

```js [config.js]
export default {
  posthtml: {
    options: {
      recognizeSelfClosing: true,
    }
  }
}
```

### sourceLocations

Type: `Boolean`\
Default: `false`

If set to `true`, AST nodes will have a `location` property containing the `start` and `end` line and column position of the node.

```js [config.js]
export default {
  posthtml: {
    options: {
      sourceLocations: true,
    }
  }
}
```

### recognizeNoValueAttribute

Type: `Boolean`\
Default: `true`

If set to `true`, PostHTML will render attributes with no values exactly as they were written and will not add `=""` to them.

```js [config.js]
export default {
  posthtml: {
    options: {
      recognizeNoValueAttribute: true,
    }
  }
}
```

### singleTags

Type: `Array<String|RegExp>`\
Default: `[]`

Use the `singleTags` option to tell PostHTML to treat custom tags as self-closing.

<Alert type="warning">This needs to be used in conjunction with `closingSingleTag` to tell PostHTML how to close the tag, otherwise you will end up with an unclosed tag.</Alert>

```js [config.js]
export default {
  posthtml: {
    options: {
      singleTags: ['custom'],
      closingSingleTag: 'slash', // see docs below
    }
  }
}
```

You may then use the `<custom />` tag as self-closing:

```html [emails/example.html]
<custom name="opencounter" type="tracking" />
```

### closingSingleTag

Type: `String`\
Default: `'default'`

Define the closing format for single tags.

By default it will not close self-closing tags that it knows about:

```html [emails/example.html]
<img>
<p></p>
```

Available options:

##### **tag**

Will add a closing tag.

```js [config.js]
export default {
  posthtml: {
    options: {
      singleTags: ['custom'],
      closingSingleTag: 'tag',
    }
  }
}
```

```html [emails/example.html]
<custom></custom>
```

##### **slash**

Will add a closing tag.

```js [config.js]
export default {
  posthtml: {
    options: {
      singleTags: ['custom'],
      closingSingleTag: 'slash',
    }
  }
}
```

```html [emails/example.html]
<custom />
```

### quoteAllAttributes

Type: `Boolean`\
Default: `true`

Disable if you want to remove quotes on all attributes

```js [config.js]
export default {
  posthtml: {
    options: {
      quoteAllAttributes: false,
    }
  }
}
```

```html [emails/example.html]
<img src=example.jpg>
```

### replaceQuote

Type: `Boolean`\
Default: `true`

Replaces quotes in attribute values with `&quote;`.

```js [config.js]
export default {
  posthtml: {
    options: {
      replaceQuote: false,
    }
  }
}
```

```html [emails/example.html]
<!-- `true` (default) -->
<img src="<?php echo $foo[&quote;bar&quote;] ?>">

<!-- `false` -->
<img src="<?php echo $foo["bar"] ?>">
```

### quoteStyle

Type: `Number`\
Default: `2`

Specify the attribute value quotes style.

```js [config.js]
export default {
  posthtml: {
    options: {
      quoteStyle: 1,
    }
  }
}
```

```html [emails/example.html]
<!-- `2` (double quotes, default) -->
<img src="example.png" onload="testFunc("test")">

<!-- `1` (single quotes) -->
<img src='example.png' onload='testFunc("test")'>

<!-- `0` (based on attribute value) -->
<img src="example.png" onload='testFunc("test")'>
```

## Plugins

Type: `Array`\
Default: `[]`

Register any PostHTML plugins that you would like to use, in the `plugins` array.

You may register plugins to run either before all other plugins, or after all other plugins, by using the `before` and `after` keys.

```js [config.js]
import spaceless from 'posthtml-spaceless'

export default {
  posthtml: {
    plugins: {
      before: [
        spaceless()
      ]
    }
  }
}
```

### Custom plugins

You may write your own PostHTML plugins, right in your Maizzle `config.js` file.

For example, here's a plugin that adds a random number to all `<img>` src URLs:

```js [config.js]
export default {
  posthtml: {
    plugins: {
      after: [
        (() => tree => {
          const process = node => {
            if (node.tag === 'img' && node.attrs?.src) {
              const randomNumber = Math.floor(Math.random() * 10 ** 16).toString().padStart(16, '0')
              node.attrs.src = node.attrs.src + `?v=${randomNumber}`
            }

            return node
          }

          return tree.walk(process)
        })()
      ]
    }
  }
}
```

<Alert>Note that this is a naive example that doesn't take existing query strings into account.</Alert>

### Built-in plugins

Maizzle already uses the following PostHTML plugins internally:

- [posthtml-mso](https://github.com/posthtml/posthtml-mso)
- [posthtml-base-url](https://github.com/posthtml/posthtml-base-url)
- [posthtml-content](https://github.com/posthtml/posthtml-content)
- [posthtml-component](https://github.com/thewebartisan7/posthtml-components)
- [posthtml-extra-attributes](https://github.com/posthtml/posthtml-extra-attributes)
- [posthtml-markdownit](https://github.com/posthtml/posthtml-markdownit)
- [posthtml-postcss-merge-longhand](https://github.com/posthtml/posthtml-postcss-merge-longhand)
- [posthtml-remove-attributes](https://github.com/princed/posthtml-remove-attributes)
- [posthtml-safe-class-names](https://github.com/posthtml/posthtml-safe-class-names)
- [posthtml-url-parameters](https://github.com/posthtml/posthtml-url-parameters)

</document_content>
</document>
<document index="28">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/configuration/server.md</source>
<document_content>
## Dev server

Maizzle includes a dev server for local email development. It can watch your Templates and other files, and immediately update them in the browser as you make changes.

### hmr

Type: `Boolean`\
Default: `true`

Enable Hot Markup Replacement&trade; for the dev server.

When `true`, changes you make to Templates, Components, config files etc. will be instantly reflected in the browser without a full page reload.

You may disable HMR and force a page reload by setting this to `false`:

```js [config.js]
export default {
  server: {
    hmr: false,
  }
}
```

### watch

Type: `Array`\
Default: `[]`

An array of paths (which can be globs) to watch for changes. When a file in one of these paths changes, the dev server will update the preview in the browser.

By default, Maizzle watches these paths:

- all Template, Component, and Layout paths
- `config*.js`
- `maizzle.config*.js`
- `tailwind*.config.js`
- `**/*.css`

You may add more paths to watch:

```js [config.js]
export default {
  server: {
    watch: ['./marketing/**/*'],
  }
}
```

### port

Type: `Number`\
Default: `3000`

Port number for the dev server.

```js [config.js]
export default {
  server: {
    port: 8080,
  }
}
```

The server will now be available at `http://localhost:8080`.

### maxRetries

Type: `Number`\
Default: `10`

Number of times to retry starting the dev server if the port is already in use.

```js [config.js]
export default {
  server: {
    maxRetries: 5,
  }
}
```

### scrollSync

Type: `Boolean`\
Default: `false`

Scrolling in one browser tab will be synchronized across all other browser tabs that are viewing the same Template. This works across devices too.

Enable synchronized scrolling:

```js [config.js]
export default {
  server: {
    scrollSync: true,
  }
}
```

You can now open the same Template on both your laptop and your phone, and scrolling on one will be mirrored on the other.

### reportFileSize

Type: `Boolean`\
Default: `false`

When enabled, the dev server will report the size of the compiled HTML file in the console.
This number will be color-coded based on how close the file size is to the [102KB limit for Gmail](https://github.com/hteumeuleu/email-bugs/issues/41).

Enable it by setting this to `true`:

```js [config.js]
export default {
  server: {
    reportFileSize: true,
  }
}
```

Less than 50KB:

<div class="inline-block px-3 py-1 rounded font-mono bg-gradient-to-t from-slate-50 to-white border border-slate-100">✔ Done in 41 ms [emails/example.html] · 6.74 KB</div>

Between 50KB and 102KB:

<div class="inline-block px-3 py-1 rounded font-mono bg-gradient-to-t from-slate-50 to-white border border-slate-100">✔ Done in 41 ms [emails/example.html] · <span class="text-amber-500">78.1 KB</span></div>

More than 102KB:

<div class="inline-block px-3 py-1 rounded font-mono bg-gradient-to-t from-slate-50 to-white border border-slate-100">✔ Done in 41 ms [emails/example.html] · <span class="text-red-500">112.3 KB</span></div>

### spinner

Type: `String|Object`\
Default: `'circleHalves'`

Customize the spinner shown in the console when compiling a Template.

```js [config.js]
export default {
  server: {
    spinner: 'dots'
  }
}
```

See the [ora spinners list](https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json) for available options.

</document_content>
</document>
<document index="29">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/components/button.md</source>
<document_content>
---
title: "Button Component"
description: "A component for creating styled link buttons to your HTML emails."
---

# Button Component

The Button component makes it easy to add a styled link button to your HTML emails.

## Usage

The Button component is defined in `components/button.html`.

This enables the `<x-button>` tag, which you can use like this:

```html [emails/example.html]
<x-button href="https://example.com">
  Book now
</x-button>
```

You can use it anywhere you'd use a `<div>`.

## Customization

You can align the Button to the left, center or right, change its CSS styling, and adjust padding for Outlook on Windows.

### Href

Default: `undefined`

If you want the Button to link somewhere, you need to pass it the `href` prop:

```html [emails/example.html]
<x-button href="https://example.com">
  Book now
</x-button>
```

<Alert>The Button still renders if you don't pass `href`, but it will not include the `href` attribute on the `<a>` tag and might look broken in some email clients because of this.</Alert>

### Align

Default: `undefined`

You can align the Button to the left, center or right, through the `align` prop:

```html [emails/example.html]
<x-button align="center">
  Book now
</x-button>
```

This will add the `text-center` class to the button's wrapper `<div>`, which will align the `<a>` inside it to the center.

### Styling

You may style the Button as needed through props or with Tailwind CSS utilities.

The button includes a <span class="inline-flex gap-1 px-2 translate-y-0.5 border border-slate-200 border-solid rounded"><span class="w-3 h-3 mt-1.5 bg-indigo-700 rounded" title="#4338ca"></span><span class="text-sm/6">bg-indigo-700</span></span> background and <span class="inline-flex gap-1 px-2 translate-y-0.5 border border-slate-200 border-solid rounded"><span class="w-3 h-3 mt-1.5 border border-solid rounded bg-slate-50" title="#f8fafc"></span><span class="text-sm/6">text-slate-50</span></span> text color by default, which you can change through props.

For example, let's make the button blue-themed:

```html [emails/example.html]
<x-button
  href="https://example.com"
  color="#fffffe"
  bg-color="#1e65e1"
>
  Book now
</x-button>
```

You can also use Tailwind CSS utilities to set the text and background colors:

```html [emails/example.html]
<x-button
  href="https://example.com"
  class="bg-blue-500 text-white"
>
  Book now
</x-button>
```

Of course, you may also change the colors directly in `components/button.html`.

### MSO Padding

Top and bottom padding for Outlook on Windows is controlled through `letter-spacing` and `mso-text-raise`, a proprietary Outlook CSS property.

This technique is based on the Link Button from [goodemailcode.com](https://www.goodemailcode.com/email-code/link-button).

#### MSO top padding

Default: `16px`

Adjust the top padding for Outlook on Windows with the `mso-pt` prop:

```html [emails/example.html]
<x-button mso-pt="12px">
  Book now
</x-button>
```

#### MSO bottom padding

Default: `31px`

Adjust the bottom padding for Outlook on Windows with the `mso-pb` prop:

```html [emails/example.html]
<x-button mso-pb="24px">
  Book now
</x-button>
```

### Other attributes

You may pass any other HTML attributes to the component, such as `data-*` or `id` - they will all be added to the `<a>` tag.

Note that non-standard attributes will be ignored by default - you'll need to define them as props in the component if you need them preserved. Alternatively, you can [safelist](/docs/configuration/components#safelistattributes) them in your `build.components` config.

## Responsive

To override Button styling on small viewports, use Tailwind CSS utilities.

For example, let's make the button full-width on small viewports:

```html [emails/example.html]
<x-button class="sm:block">
  Book now
</x-button>
```

## Alternatives

There are other ways to create buttons in your HTML emails, such as by using a `<table>`. Check out our [Button examples](/docs/examples/buttons) for more ideas.

</document_content>
</document>
<document index="30">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/components/divider.md</source>
<document_content>
---
title: "Divider Component"
description: "A component for creating horizontal visual dividers in HTML emails."
---

# Divider Component

Quickly add horizontal visual dividers to your HTML emails.

## Usage

The Divider component is defined in `components/divider.html`.

This enables the `<x-divider>` syntax, which you can use like this:

  ```html [emails/example.html] {5}
  <x-main>
    <table>
      <tr>
        <td>
          <x-divider />
        </td>
      </tr>
    </table>
  </x-main>
  ```

You can use it anywhere you'd use a `<div>`.

Simply using the `<x-divider>` tag will render a `1px` gray horizontal line with `24px` of space above and below it.

## Customization

You can customize the Divider and give it a custom height (line thickness), change its color, and adjust the space around it.

### Height

Default: `1px`

The default height is `1px`, but you can change it with the `height` prop:

```html [emails/example.html]
<x-divider height="2px" />
```

### Color

Default: `#cbd5e1`

Define a custom line color with the `color` prop. You can use any CSS color value.

If you omit this prop, the Divider will use `bg-slate-300` from Tailwind CSS, which is currently set to `#cbd5e1`.

Let's change the color to red:

```html [emails/example.html]
<x-divider color="#e53e3e" />
```

You can also use Tailwind CSS utilities if you prefer:

```html [emails/example.html]
<x-divider class="bg-rose-500" />
```

<Alert>Tailwind CSS utilities must be passed inside the `class` attribute, not the `color` attribute.</Alert>

### Margins

Default: `undefined`

Add margins to any of the four sides of the Divider, through these props:

- `top`
- `right`
- `bottom`
- `left`

For example, let's add `32px` to the top and `64px` to the bottom:

```html [emails/example.html]
<x-divider top="32px" bottom="64px" />
```

Under the hood, the CSS `margin` property is used, so you can use any CSS unit that is supported in HTML emails.

<Alert>Margin props will override `space-y|x` props.</Alert>

### Spacing

Default: `24px|undefined`

You may add top/bottom or left/right spacing through a single prop:

- `space-y` for top & bottom (default: `24px`)
- `space-x` for left & right (not set by default)

For example, let's add `32px` to the top and bottom:

```html [emails/example.html]
<x-divider space-y="32px" />
```

Similarly, let's add `24px` to the left and right:

```html [emails/example.html]
<x-divider space-x="24px" />
```

<Alert>`space-y|x` props will be overridden by individual margin props.</Alert>

### Other attributes

You may pass any other HTML attributes to the component, such as `data-*` or `id`.

Note that non-standard attributes will be ignored by default - you'll need to define them as props in the component if you need them preserved. Alternatively, you can safelist them in your `build.components` config.

## Responsive

To override Divider styling on small viewports, use Tailwind CSS utilities:

```html [emails/example.html]
<x-divider space-y="32px" class="sm:my-4 sm:bg-black" />
```

## Outlook note

The root `<div>` element of the Divider component needs some extra attention for Outlook on Windows, otherwise it will render thicker than intended.

For the Divider to render the visual line as expected in Outlook on Windows too, it should also be styled with `mso-line-height-rule: exactly`. In Maizzle, this is set globally in the `main.html` layout so you don't need to worry about it.

However, if you can't use that layout for some reason or are worried that the Outlook-specific CSS in the `<head>` might be stripped in some situations, simply add it in a style attribute on the tag:

```html [emails/example.html]
<x-divider style="mso-line-height-rule: exactly;" />
```

Alternatively, you may also use the `mso-line-height-rule-exactly` class that is available from the `tailwindcss-mso` plugin (included in the Starter):

```html [emails/example.html]
<x-divider class="mso-line-height-rule-exactly" />
```

Of course, you can also modify `components/divider.html` and add the `mso-line-height-rule: exactly` CSS rule to the `<div>` element.

## Alternatives

There are other ways to create horizontal visual dividers in your HTML emails, such as using a `<table>` or an `<hr>`. Check out our [Divider examples](/docs/examples/dividers) for more ideas.

</document_content>
</document>
<document index="31">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/components/spacer.md</source>
<document_content>
---
title: "Spacer Component"
description: "A component for creating consistent vertical spacing in HTML emails."
---

# Spacer Component

The Spacer component in Maizzle makes it super simple to add consistent, accessible vertical spacing to your HTML emails.

## Usage

The Spacer component is defined in `components/spacer.html`.

This enables the `<x-spacer>` syntax, which you can use like this:

```html {5}
<x-main>
  <table>
    <tr>
      <td>
        <x-spacer height="32px" />
      </td>
    </tr>
  </table>
</x-main>
```

You can use it anywhere you'd use a `<div>`.

If you need to add space between `<tr>`, see the [Row Spacer example](/docs/examples/spacers#row) instead.

## Props

You can pass props to the component via HTML attributes, to control its height.

### height

Default: `undefined`

This will define the height of the Spacer.

You may use any CSS unit that you prefer, it doesn't have to be `px`.

```html [emails/example.html]
<x-spacer height="1em" />
```

That will render the following HTML:

```html [emails/example.html]
<div style="line-height: 1em;" role="separator">&zwj;</div>
```

If `height` is omitted, the Spacer will render as `<div role="separator">&zwj;</div>`, which will render as an empty space that is as high as its parent element's `line-height`.

### mso-height

Default: `undefined`

Override the height of the Spacer in Outlook for Windows.

```html [emails/example.html]
<x-spacer height="32px" mso-height="30px" />
```

This uses the `mso-line-height-alt` MSO CSS property to set a custom Spacer height in Outlook for Windows.

Note: for the Spacer to work as expected in Outlook on Windows, it should also be styled with `mso-line-height-rule: exactly`. In Maizzle this is set globally in the `main.html` layout, so you don't need to worry about it.

However, if you can't use that layout for some reason or are worried that the Outlook-specific CSS in the `<head>` might be stripped in some situations, simply add it in a style attribute on the tag:

```html [emails/example.html]
<x-spacer style="mso-line-height-rule: exactly;" />
```

Alternatively, you may also use the `mso-line-height-rule-exactly` class that is available from the `tailwindcss-mso` plugin (included in the Starter):

```html [emails/example.html]
<x-spacer class="mso-line-height-rule-exactly" />
```

Of course, you can also modify `components/spacer.html` and add the `mso-line-height-rule: exactly` CSS rule to the `<div>` element.

### Other attributes

You may pass any other HTML attributes to the component, such as `class` or `id`.

Note that non-standard attributes will be ignored by default - you'll need to define them as props in the component if you need them preserved. Alternatively, you can safelist them in your `build.components` config.

## Responsive

To override the height of the Spacer on mobile, use the `leading` utilities in Tailwind CSS:

```html [emails/example.html]
<x-spacer height="32px" class="sm:leading-4" />
```

</document_content>
</document>
<document index="32">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/components/vml.md</source>
<document_content>
---
title: "VML Components"
description: "Components for coding background images for Outlook on Windows."
---

# VML Components

VML stands for Vector Markup Language, it is a legacy markup language that was used in Outlook for Windows.

The Maizzle Starter includes a VML component that you can use to add support for background images in Outlook for Windows.

## v-fill

The Fill component is defined in `components/v-fill.html`.

Use it when you need to add a background image that you don't know the height of.

<Alert type="warning">`v:fill` does not work in Windows 10 Mail.</Alert>

You can use it immediately inside a container that has a CSS background image:

```html {4-9}
<table>
  <tr>
    <td style="background-image: url('https://picsum.photos/600/400')">
      <x-v-fill // [!code ++]
        image="https://picsum.photos/600/400" // [!code ++]
        width="600px" // [!code ++]
      > // [!code ++]
        HTML to show on top of the image <!-- [!code ++] -->
      </x-v-fill> // [!code ++]
    </td>
  </tr>
</table>
```

That will compile to:

```html {4-9}
<table cellpadding="0" cellspacing="0" role="none">
  <tr>
    <td style="background-image: url('https://picsum.photos/600/400')">
      <!--[if mso]>
      <v:rect stroke="f" fillcolor="none" style="width: 600px" xmlns:v="urn:schemas-microsoft-com:vml">
      <v:fill type="frame" src="https://picsum.photos/600/400" />
      <v:textbox inset="0,0,0,0" style="mso-fit-shape-to-text: true"><div><![endif]-->
        HTML to show on top of the image
      <!--[if mso]></div></v:textbox></v:rect><![endif]-->
    </td>
  </tr>
</table>
```

## Props

The `x-v-fill` component supports the following props:

### image

Default: `https://via.placeholder.com/600x400`

The URL of the image that will be used as a background image in Outlook for Windows.

### width

Default: `600px`

The width of the image, preferably in pixels. This sets CSS `width` on the root `<v:rect>` VML element of the component, so you'll need to include the unit, i.e. `600px` instead of `600`.

### inset

Default: `0,0,0,0`

Replicates the CSS `padding` property.

The order of the values is `left, top, right, bottom`.

This is applied to a `<v:textbox>` element that wraps the content of the component - basically, the content that you want overlayed on top of the background image.

```html
<x-v-fill
  image="https://picsum.photos/600/400"
  width="600px"
  inset="10px,20px,10px,20px"
/>
```

### type

Default: `frame`

The type of fill to use. You can use `frame` or `tile`.

### sizes

Default: `undefined`

Define the exact dimensions of the `<v:fill>` element.

Both values need to be set and they can be separated by either a comma or a space:

```html
<x-v-fill
  image="https://picsum.photos/600/400"
  width="600px"
  sizes="300px,200px"
/>
```

### origin

Default: `undefined`

Replicates the CSS `background-position` property.

```html
<x-v-fill
  image="https://picsum.photos/600/400"
  width="600px"
  origin="0.5,0.5"
  position="0.5,0.5"
/>
```

TL;DR:

- `origin="-0.5,-0.5" position="-0.5,-0.5"` equals `top left`
- `origin="0.5,-0.5" position="0.5,-0.5"` equals `top right`
- `origin="-0.5,0.5" position="-0.5,0.5"` equals `bottom left`
- `origin="0.5,0.5" position="0.5,0.5"` equals `bottom right`

Read more [here](https://www.hteumeuleu.com/2021/background-properties-in-vml/#background-position).

### position

Default: `undefined`

See the docs for `origin` above.

### aspect

Default: `undefined`

Replicates the CSS `background-size` property.

Possible values:

- `atleast` (background-size: cover)
- `atmost` (background-size: contain)

Example:

```html
<x-v-fill
  image="https://picsum.photos/600/400"
  width="600px"
  aspect="atleast"
/>
```

### color

Default: `undefined`

Replicates the CSS `background-color` property.

Example:

```html
<x-v-fill
  image="https://picsum.photos/600/400"
  width="600px"
  color="#f8fafc"
/>
```

### fillcolor

Default: `none`

Whether to fill the shape with a color.

Example:

```html
<x-v-fill
  image="https://picsum.photos/600/400"
  width="600px"
  fillcolor="#f8fafc"
/>
```

### stroke

Default: `f`

Adds a border to the shape.

Example:

```html
<x-v-fill
  image="https://picsum.photos/600/400"
  width="600px"
  stroke="t"
/>
```

### strokecolor

Default: `undefined`

The color of the border.

Example:

```html
<x-v-fill
  image="https://picsum.photos/600/400"
  width="600px"
  stroke="t"
  strokecolor="#f8fafc"
/>
```

</document_content>
</document>
<document index="33">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/add-attributes.md</source>
<document_content>
---
title: "Add attributes"
description: "Automatically add attributes to your HTML emails. Write less code and easily improve accessibility."
---

# Add attributes

Maizzle can automatically add attributes to HTML elements in your email templates.

This can be useful for:

- adding default attributes based on build Environment or Template
- not having to write required attributes all the time
- automating email accessibility

The `attributes.add` key in your config defines which elements in your emails should receive which attributes with what values.

## Usage

Here is how you would add a `role="article"` attribute to a `<div>`:

```js [config.js]
export default {
  attributes: {
    add: {
      div: {
        role: 'article',
      },
    },
  }
}
```

## Default attributes

By default, Maizzle makes any `<table>` accessible, resets its spacing, and ensures that an empty `alt=""` attribute is added to images that don't have it.

This is the default configuration:

```js
let attributes = {
  table: {
    cellpadding: 0,
    cellspacing: 0,
    role: 'none',
  },
  img: {
    alt: '',
  }
}
```

<Alert>Attributes will be added only if they're not already present on the element.</Alert>

### Disabling

You may turn this off by setting `extraAttributes` to `false` in your config:

```js [config.js]
export default {
  attributes: {
    add: false,
  }
}
```

## Selectors

Tag, class, id, and attribute selectors are supported:

```js [config.js]
export default {
  extraAttributes: {
    div: {
      id: 'new',
    },
    '.test': {
      editable: true,
    },
    '#test': {
      'data-foo': 'bar',
    },
    '[role]': {
      'aria-roledescription': 'slide',
    },
  }
}
```

## Multiple selectors

Add multiple attributes to multiple elements in one go:

```js [config.js]
export default {
  attributes: {
    add: {
      'div, p': {
        class: 'test',
      },
      'div[role=alert], section.alert': {
        class: 'alert',
      },
    },
  }
}
```

## Tailwind CSS

Any Tailwind CSS classes that you add with this Transformer need to be added to your `content` key, otherwise they will not be generated.

To do this, simply add the path to your `config.js` file to the `content` array:

```js [tailwind.config.js]
export default {
  content: ['./config.js'],
}
```

## API

```js [app.js]
import { addAttributes } from '@maizzle/framework'

const options = {
  div: {
    role: 'article'
  }
}

const html = await addAttributes('<div></div>', options)
```

</document_content>
</document>
<document index="34">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/attribute-to-style.md</source>
<document_content>
---
title: "Attribute to style"
description: "Convert HTML attributes to inline CSS in your HTML emails."
---

# Attribute to style

Duplicate HTML attributes to inline CSS.

## Usage

This Transformer is part of the CSS inlining process, you may enable it in your `config.js` under the `css.inline` key:

```js [config.js]
export default {
  css: {
    inline: {
      attributeToStyle: true,
    }
  }
}
```

Given this HTML:

```html
<table width="100%">
  <tr>
    <td>
      <p>The quick brown fox jumped over the lazy dog.</p>
    </td>
  </tr>
</table>
```

It will transform it to:

```html
<table width="100%" style="width: 100%">
  <tr>
    <td>
      <p>The quick brown fox jumped over the lazy dog.</p>
    </td>
  </tr>
</table>
```

## Customization

You may enable it only for some attributes:

```js [config.js]
export default {
  css: {
    inline: {
      attributeToStyle: ['width', 'bgcolor', 'background'],
    }
  }
}
```

... or for all supported attributes:

```js [config.js]
export default {
  css: {
    inline: {
      attributeToStyle: ['width', 'height', 'bgcolor', 'background', 'align', 'valign'],
    }
  }
}
```

## Supported attributes

The following attributes can be duplicated as inline CSS.

### width

Inlined as: `width: ${value}${unit}`

Notes: supports only `px` and `%` values (defaults to `px`)

### height

Inlined as: height: ${value}${unit}

Notes: supports only `px` and `%` values (defaults to `px`)

### bgcolor

Inlined as: `background-color: ${value}`

### background

Inlined as: `background-image: url('${value}')`

### align

1. On `<table>` elements

    - `left` or `right` values inlined as `float: ${value}`
    - `center` value inlined as `margin-left: auto; margin-right: auto`

1. On any other elements, it is inlined as `text-align: ${value}`

### valign

Inlined as `vertical-align: ${value}`

## Overriding

This Transformer runs right before CSS inlining, so you can still override it through Tailwind CSS utility classes.

## API

The second argument must be an array of attribute names to handle:

```js [app.js]
import { attributeToStyle } from '@maizzle/framework'

const html = await attributeToStyle('html string', ['width'])
```

</document_content>
</document>
<document index="35">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/base-url.md</source>
<document_content>
---
title: "Base URL"
description: "Set a base URL and easily prepend absolute URLs to any source in your HTML emails."
---

# Base URL

Define a string that will be prepended to all sources and hrefs in your HTML and CSS.

Useful if you already host your images somewhere like a CDN, so you don't have to write the full URL every time when developing.

Works with the following HTML attributes:

- src
- href
- srcset
- poster
- background

... and with the following CSS properties:

- <span class="text-sm font-mono">background: url()</span>
- <span class="text-sm font-mono">background-image: url()</span>
- <span class="text-sm font-mono">@font-face { src: url() }</span>

Both `<style>` tags and `style=""` attributes are supported. CSS property values with multiple `url()` sources (like @font-face declarations) are supported as well.

## Usage

Make it globally available by setting it in your environment config:

```js [config.js]
export default {
  baseURL: 'https://cdn.example.com/'
}
```

<Alert type="danger">Note that this will apply to _all_ sources and hrefs, including `<a>` tags, as long as the source's initial value is not an URL.</Alert>

## Customization

You'll most likely want to customize the transformer so that it applies only to certain elements, or even only to certain attributes of certain elements.

### tags

Type: `String[]|<Record<string, boolean|string>>`\
Default: [see default tags](https://github.com/posthtml/posthtml-base-url/blob/main/lib/index.js)

Apply the base URL only to `<img>` tags:

```js [config.js]
export default {
  baseURL: {
    url: 'https://cdn.example.com/',
    tags: ['img'],
  },
}
```

That will apply the `url` to all known source attributes on all `<img>` elements in your HTML, like `src=""` or `srcset="`.

If you need greater control, you may specify which attributes of which tags should be prepended what URL, by passing in an object instead:

```js [config.js]
export default {
  baseURL: {
    url: 'https://cdn.example.com/',
    tags: {
      img: {
        src: true, // use the value of `url` above
        srcset: 'https://bar.com/',
      },
    },
  },
}
```

### attributes

Type: `Object`\
Default: `{}`

Key-value pairs of attributes and what to prepend to them.

```js [config.js]
export default {
  baseURL: {
    attributes: {
      'data-url': 'https://example.com/',
    },
  },
}
```

### styleTag

Type: `Boolean`\
Default: `true`

By default, the transformer will prepend your `url` to all `url()` sources in `<style>` tags. Set this option to `false` to prevent it from doing so:

```js [config.js]
export default {
  baseURL: {
    url: 'https://cdn.example.com/',
    tags: ['img'],
    styleTag: false,
  },
}
```

### inlineCss

Type: `Boolean`\
Default: `true`

Similarly, the transformer will prepend your `url` to all `url()` sources in `style=""` attributes. You may disable this if you need to:

```js [config.js]
export default {
  baseURL: {
    url: 'https://cdn.example.com/',
    tags: ['img'],
    inlineCss: false,
  },
}
```

## Front Matter

You may override it for a single Template, through Front Matter:

```hbs [emails/example.html]
---
baseURL: 'https://res.cloudinary.com/user/image/upload/'
---

<x-main>
  <img src="example.jpg">
</x-main>
```

## Trailing slash

When `baseURL` is not an absolute URL, `path.join` is used to prepend the base URL to the source, so you don't need to worry about trailing slashes.

However, you need to consider trailing slashes when the base URL is an absolute URL.

```html [baseURL: 'https://example.com/img']
<img src="/folder/product-1.png">

<!-- Result -->
<img src="https://example.com/img/folder/product-1.png">
```

If we add a trailing slash to `baseURL`, we get a double slash in the result:

```html [baseURL: 'https://example.com/img/']
<img src="/folder/product-1.png">

<!-- Result -->
<img src="https://example.com/img//folder/product-1.png">
```

## Disabling

If you have `baseURL` set globally (in your config), you may disable it for a Template by setting its value to an empty string or a falsy value in Front Matter:

```yaml
---
baseURL: ''
---
```

or

```yaml
---
baseURL: false
---
```

## API

```js [app.js]
import { addBaseUrl } from '@maizzle/framework'

const config = {
  url: 'https://cdn.example.com/img/',
}

const html = await addBaseUrl('<img src="image.jpg">', config)
```

</document_content>
</document>
<document index="36">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/filters.md</source>
<document_content>
---
title: "Filters"
description: "Apply transformations to content inside tags from your HTML email templates."
---

# Filters

Maizzle includes filters that enable you to do anything you want to text nodes inside elements that you mark with custom attributes.

## Usage

Add a `filters` object to your Maizzle config:

```js [config.js]
export default {
  filters: {},
}
```

Each entry in this object is made up of a `key: value` pair.

- `key` represents a custom HTML attribute name
- `value` is a function that accepts two arguments, and must return a string

Example:

```js [config.js]
export default {
  filters: {
    uppercase: str => str.toUpperCase(),
  }
}
```

Used in a Template:

```html [emails/example.html]
<p uppercase>Here is some foo.</p>
```

Result:

```html
<p>HERE IS SOME FOO BAR.</p>
```

Of course, this is just a dumb example - you could imagine more complex scenarios where you pull in packages and do stuff like:

- compile CSS in some `<style>` tag with Sass or others
- normalize html whitespace in parts of your code
- create various content filters
- ...

## Disabling

You may disable all filters by setting the option to `false`:

```js [config.js]
export default {
  filters: false,
}
```

## Default filters

The following filters are included by default.

### append

Append text to the end of the string.

```html [example.html]
<p append=" bar">foo</p>
<!-- <p>foo bar</p> -->
```

### prepend

Prepend text to the beginning of the string.

```html [example.html]
<p prepend="foo ">bar</p>
<!-- <p>foo bar</p> -->
```

### uppercase

Uppercase the string.

```html [example.html]
<p uppercase>foo</p>
<!-- <p>FOO</p> -->
```

### lowercase

Lowercase the string.

```html [example.html]
<p lowercase>FOO</p>
<!-- <p>foo</p> -->
```

### capitalize

Uppercase the first letter of the string.

```html [example.html]
<p capitalize>foo</p>
<!-- <p>Foo</p> -->
```

### ceil

Round up to the nearest integer.

```html [example.html]
<p ceil>1.2</p>
<!-- <p>2</p> -->
```

### floor

Round down to the nearest integer.

```html [example.html]
<p ceil>1.2</p>
<!-- <p>1</p> -->
```

### round

Round to the nearest integer.

```html [example.html]
<p round>1234.567</p>
<!-- <p>1235</p> -->
```

### escape

Escapes a string by replacing characters with escape sequences (so that the string can be used in a URL, for example).

```html [example.html]
<p escape>"&'<></p>
<!-- <p>&#34;&amp;&#39;&lt;&gt;</p> -->
```

### escape-once

Escapes a string without changing existing escaped entities.

```html [example.html]
<p escape-once>1 &lt; 2 &amp; 3</p>
<!-- <p>1 &lt; 2 &amp; 3</p> -->
```

### lstrip

Remove leading whitespace from the string.

```html [example.html]
<p lstrip> test </p>
<!-- <p>test </p> -->
```

### rstrip

Remove trailing whitespace from the string.

```html [example.html]
<p rstrip> test </p>
<!-- <p> test</p> -->
```

### trim

Remove leading and trailing whitespace from the string.

```html [example.html]
<p trim> test </p>
<!-- <p>test</p> -->
```

### minus

Subtracts one number from another.

```html [example.html]
<p minus="2">3</p>
<!-- <p>1</p> -->
```

### plus

Adds one number to another.

```html [example.html]
<p plus="2">3</p>
<!-- <p>5</p> -->
```

### multiply

Alias: `times`

```html [example.html]
<p multiply="2">1.2</p>
<!-- <p>2.4</p> -->
```

### divide-by

Alias: `divide`

```html [example.html]
<div divide-by="2">1.2</div>
<!-- <p>0.6</p> -->
```

### modulo

Returns the remainder of one number divided by another.

```html [example.html]
<p modulo="2">3</p>
<!-- <p>1</p> -->
```

### newline-to-br

Insert an HTML line break (`<br />`) in front of each newline (`\n`) in a string.

```html [example.html]
<p newline-to-br>
  test
  test
</p>
<!-- <p><br>  test<br>  test<br></p> -->
```

### strip-newlines

Remove any newline characters (line breaks) from the string.

```html [example.html]
<p strip_newlines>
  test
  test
</p>
<!-- <p>  test  test</p> -->
```

### remove

Remove every occurrence of `text` from the string.

```html [example.html]
<p remove="rain">I strained to see the train through the rain</p>
<!-- <p>I sted to see the t through the </p> -->
```

### remove-first

Remove the first occurrence of `text` from the string.

```html [example.html]
<p remove-first="rain">I strained to see the train through the rain</p>
<!-- <p>I sted to see the train through the rain</p> -->
```

### replace

Replace every occurrence of the first argument with the second argument.

You must separate arguments with a pipe character (`|`).

```html [example.html]
<p replace="1|test">test</p>
<!-- <p>1es1</p> -->
```

### replace-first

Replace the first occurrence of the first argument with the second argument.

You must separate arguments with a pipe character (`|`).

```html [example.html]
<p replace-first="t|b">test</p>
<!-- <p>best</p> -->
```

### size

Return the number of characters in the string.

```html [example.html]
<p size>one</p>
<!-- <p>3</p> -->
```

### slice

Return a slice of the string starting at the provided index.

```html [example.html]
<p slice="1">test</p>
<!-- <p>est</p> -->
```

You may pass a startIndex and endIndex:

```html [example.html]
<p slice="0,-1">test</p>
<!-- <p>tes</p> -->
```

### truncate

Shorten a string down to the number of characters passed as the argument.

```html [example.html]
<p truncate="17">Ground control to Major Tom.</p>
<!-- <p>Ground control to...</p> -->
```

You may pass a custom ellipsis as the second argument.

Separate arguments with a comma:

```html [example.html]
<p truncate="17, no one">Ground control to Major Tom.</p>
<!-- <p>Ground control to no one</p> -->
```

### truncate-words

Shorten a string down to the number of words passed as the argument.

```html [example.html]
<p truncate-words="2">Ground control to Major Tom.</p>
<!-- <p>Ground control...</p> -->
```

You may pass a custom ellipsis as the second argument.

Separate arguments with a comma:

```html [example.html]
<p truncate-words="2, over and out">Ground control to Major Tom.</p>
<!-- <p>Ground control over and out</p> -->
```

### url-decode

Decode a string that has been encoded as a URL.

```html [example.html]
<p url-decode>%27Stop%21%27+said+Fred</p>
<!-- <p>'Stop!' said Fred</p> -->
```

### url-encode

Convert any URL-unsafe characters in a string into percent-encoded characters.

```html [example.html]
<p url-encode>user@example.com</p>
<!-- <p>user%40example.com</p> -->
```

</document_content>
</document>
<document index="37">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/inline-css.md</source>
<document_content>
---
title: "Inline CSS"
description: "Inline CSS in your HTML emails for better email client compatibility."
---

# Inline CSS

Automatically inline CSS from `<style>` tags in your HTML emails.

CSS inlining is still important in HTML email, mainly because of Outlook on Windows, which doesn't support multiple classes on elements.

It can also help preserve a decent layout in email clients that do not support embedded CSS (in `<style>` tags), or when an email is forwarded.

The utility-first approach in Tailwind CSS works great with CSS inlining: utility classes are not 'global', so you won't end up with a `font-family` inlined on every element (unless you really, really want to).

## Usage

To enable CSS inlining, simply set `css.inline` to `true` in your config:

```js [config.js]
export default {
  css: {
    inline: true,
  }
}
```

<Alert>You will want to keep CSS inlining off when developing ⚡[AMP4EMAIL templates](/guides/amp-email)</Alert>

## Customization

If you need control over how your CSS is inlined, you may pass a configuration object to `inlineCSS`. Doing this in your Environment `config.js` will enable CSS inlining for all Templates when building for that Environment.

### styleToAttribute

Type: `Object`\
Default: `{}`

Defines which CSS properties should be duplicated as what HTML attributes.

For example, this property-attribute assignment:

```js [config.js]
export default {
  css: {
    inline: {
      styleToAttribute: {
        'background-color': 'bgcolor',
      }
    }
  }
}
```

... will transform this:

```html
<table class="bg-slate-300">
  <tr>
    <td>...</td>
  </tr>
</table>
```

... into this:

```html
<table bgcolor="#cbd5e1" style="background-color: #cbd5e1">
  <tr>
    <td>...</td>
  </tr>
</table>
```

The available mappings are:

CSS Property | HTML Attribute
--- | ---
`background-color` | `bgcolor`
`background-image` | `background`
`text-align` | `align`
`vertical-align` | `valign`

### attributeToStyle

Type: `Boolean|String[]`\
Default: `undefined`

Duplicates specified HTML attributes as inline CSS.

See the documentation [here](/docs/transformers/attribute-to-style).

### applyWidthAttributes

Type: `Boolean`\
Default: `true`

Whether to use any CSS pixel widths to create `width` attributes on elements set in `css.inline.widthElements`.

Set it to `false` to prevent any `width` attributes from being added based on inline CSS width:

```js [config.js]
export default {
  css: {
    inline: {
      applyWidthAttributes: false,
    }
  }
}
```

### widthElements

Type: `String[]`\
Default: `['img', 'video']`

Array of HTML elements that can receive `width` attributes based on inline CSS width.

```js [config.js]
export default {
  css: {
    inline: {
      widthElements: ['table', 'td', 'th'],
    }
  }
}
```

### applyHeightAttributes

Type: `Boolean`\
Default: `true`

Whether to use any CSS pixel heights to create `height` attributes on elements set in `css.inline.heightElements`.

Set it to `false` to prevent any `height` attributes from being added based on inline CSS height:

```js [config.js]
export default {
  css: {
    inline: {
      applyHeightAttributes: false,
    }
  }
}
```

### heightElements

Type: `String[]`\
Default: `['img', 'video']`

Array of HTML elements that can receive `height` attributes based on inline CSS height.

```js [config.js]
export default {
  css: {
    inline: {
      heightElements: ['table', 'td', 'th'],
    }
  }
}
```

### excludedProperties

Type: `String[]`\
Default: `[]`

Array of CSS property names that should be excluded from the CSS inlining process.

Names are considered unique, so you will need to specify each one you'd like to exclude.

For example:

```js [config.js]
export default {
  css: {
    inline: {
      excludedProperties: ['padding', 'padding-left'],
    }
  }
}
```

<Alert>`--tw-shadow` is automatically excluded from the properties that can be inlined.</Alert>

### codeBlocks

Type: `Object`\
Default: `{ EJS: {}, HBS: {} }`

An object where each value has a start and end to specify fenced code blocks that should be ignored during CSS inlining.

By default, <abbr title="Embedded JavaScript Templates">EJS</abbr> and <abbr title="Handlebars">HBS</abbr> code blocks are ignored:

```js
{
  EJS: { start: '<%', end: '%>' },
  HBS: { start: '{{', end: '}}' },
}
```

### removeInlinedSelectors

Type: `Boolean`\
Default: `true`

When `css.inline` is enabled, classes will be removed from the `class` attribute of a tag after they have been successfully inlined.

Set this option to `false` to preserve the classes in the `class` attribute.

```js [config.production.js]
export default {
  css: {
    inline: {
      removeInlinedSelectors: false,
    }
  }
}
```

### preferUnitlessValues

Type: `Boolean`\
Default: `true`

When inlining CSS, `0` values will be inlined without units.

For example, `margin: 0px` will be inlined as `margin: 0`.

Set this to `false` to keep units on `0` values.

```js [config.js]
export default {
  css: {
    inline: {
      preferUnitlessValues: false,
    }
  }
}
```

### useAttributeSizes

Type: `Boolean`\
Default: `undefined`

Prefer HTML `width` and `height` attributes over inline CSS.

Useful for retina images in Outlook on Windows, which doesn't respect CSS sizes and will render the image in its natural size.

Set this to `true` to use HTML attributes for sizes instead of inline CSS:

```js [config.js]
export default {
  css: {
    inline: {
      useAttributeSizes: true,
    }
  }
}
```

<alert>`useAttributeSizes` will apply to all elements defined in [`widthElements`](/docs/transformers/inline-css#widthelements) and [`heightElements`](/docs/transformers/inline-css#heightelements)</alert>

### safelist

Type: `String[]`

An array of strings representing CSS selectors that should not be removed after inlining.

These can be substring matches, so you can use `text-red` to preserve `.text-red`, `.text-red-500`, etc.

```js [config.js]
export default {
  css: {
    inline: {
      safelist: ['text-red', '.bg-blue-500'],
    }
  }
}
```

## Prevent inlining

You may add an attribute on a `<style>` tag to prevent Juice from inlining the CSS inside it. Useful for writing email client CSS hacks, or for preserving CSS comments when using the [`removeCSSComments: false`](/docs/transformers/purge-css#removecsscomments) Cleanup option.

```html
<style data-embed>
  /* This CSS will not be inlined */
  .text-red { color: red; }
</style>
```

Maizzle supports the following attributes for this purpose:

-  `data-embed`
-  `no-inline`
-  `embed`

<Alert>CSS selectors that don't appear in your markup will still need to be [whitelisted for purging](/docs/transformers/purge-css#whitelist).</Alert>

## API

You can use the `inlineCSS` function to inline CSS in a string of HTML.

Your HTML string will need to have at least one `<style>` tag in the `<head>`.
Alternatively, you may pass your own CSS to inline through the `customCSS` option.

Additionally, you may configure the [Juice](https://www.npmjs.com/package/juice) library by passing options in the same object.

```js [app.js]
import { inlineCSS } from '@maizzle/framework'

const config = {
  customCSS: 'body { background-color: #f8f9fa; }',
  excludedProperties: ['padding', 'padding-left'] // Juice option
}

const html = await inlineCSS('html string', config)
```

</document_content>
</document>
<document index="38">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/minify.md</source>
<document_content>
---
title: "Email Code Minification"
description: "Minify your HTML email code so that production emails weigh even less, avoiding Gmail clipping."
---

# Minify Email Code

Use the `minify` option to trim down the HTML size of your production emails.

Minified email code weighs less in KB, resulting in faster sendouts, faster opens, and bandwidth savings on limited mobile data plans. Every little bit helps 🙂

Additionally, it reduces the risk of [Gmail clipping](https://github.com/hteumeuleu/email-bugs/issues/41).

## Usage

```js [config.js]
export default {
  minify: true,
}
```

## Customization

You may configure the underlying `html-crush` library:

```js [config.js]
export default {
  minify: {
    lineLengthLimit: 500,
  }
}
```

Checkout the full list of [html-crush options](https://codsen.com/os/html-crush/#optional-options-object).

<Alert type="warning">Minifying email code can lead to unexpected results if not done properly. Make sure you know what you're doing, and always test your emails!</Alert>

## Options

These are the options that can be passed inside `minify`:

### lineLengthLimit

Type: `Number`\
Default: `500`

Maximum line length. Works only when `removeLineBreaks` is `true`.

Lines should be no longer than 998 characters, as per [RFC 2822](https://www.rfc-editor.org/rfc/rfc2822#section-2.1.1).

### removeIndentations

Type: `Boolean`\
Default: `true`

By default, code indentation is removed.

### removeLineBreaks

Type: `Boolean`\
Default: `true`

Should line breaks be removed? Maizzle defaults this option to `true`.

### removeHTMLComments

Type: `Boolean|Number`\
Default: `false`

When set to a number, these are the available options:

  - `0` - don't remove any HTML comments
  - `1` - remove all comments except Outlook conditional comments
  - `2` - remove all comments, including Outlook conditional comments

### removeCSSComments

Type: `Boolean`\
Default: `true`

CSS comments are removed by default, both in `<style>` tags and in `style=""` attributes.

### breakToTheLeftOf

Type: `String[]`\
Default: `['</td', '<html', '</html', '<head', '</head', '<meta', '<link', '<table', '<script', '</script', '<!doctype', '<style', '</style', '<title', '<body', '@media', '</body', '<!--[if', '<!--<![endif', '<![endif]']`

When any of given strings are encountered and `removeLineBreaks` is `true`, current line will be terminated.

Set to `false` or `null` or an empty array to disable.

### mindTheInlineTags

Type: `String[]`\
Default: `['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'br', 'button', 'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr']`

Some inline tags can accidentally introduce extra text. The minifier will take extra precaution when minifying around these tags.

Set to `false`, `null`, or an empty array `[]` to disable.

## API

```js [app.js]
import { minify } from '@maizzle/framework'

const options = {/* html-crush options */}

const html = await minify('html string', options)
```

</document_content>
</document>
<document index="39">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/prettify.md</source>
<document_content>
---
title: "Prettify Email Code"
description: "Pretty-print your HTML email code before sending it to a human."
---

# Prettify Code

Maizzle can pretty print your HTML email code so that it's nicely indented.

Need to send HTML to a human? Enable `prettify` in your config:

## Usage

```js [config.js]
export default {
  prettify: true,
}
```

Enabling it will use this default configuration:

```js
{
  space_around_combinator: true, // Preserve space around CSS selector combinators
  newline_between_rules: false, // Remove empty lines between CSS rules
  indent_inner_html: false, // Helps reduce file size
  extra_liners: [] // Don't add extra new line before any tag
}
```

## Customization

You may configure JS Beautify's CSS and HTML Beautifier options.

Maybe you prefer tabs for indentation?

```js [config.js]
export default {
  prettify: {
    indent_with_tabs: true,
  }
}
```

Checkout the full [list of HTML & CSS beautifier options](https://www.npmjs.com/package/js-beautify#css--html).

## ocd

Type: `Boolean`\
Default: `false`

```js [config.js]
export default {
  prettify: {
    ocd: true,
  }
}
```

This option applies several code indentation strategies:

- condenses multiple newlines to a single newline
- trims leading and trailing whitespace
- ensures that a trailing newline is inserted
- normalizes whitespace before code comments

## API

```js [app.js]
import { prettify } from '@maizzle/framework'

const options = {/* prettify options */}

const html = await prettify('html string', options)
```

</document_content>
</document>
<document index="40">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/purge-css.md</source>
<document_content>
---
title: "Remove unused CSS"
description: "Purge unused CSS, remove HTML comments, or rewrite CSS selectors to be as short as possible."
---

# Remove unused CSS

Cleaning up your HTML email results in smaller file sizes, which translates to faster email sendouts, faster opens (think slow 3G), and snappier paint times.

Gmail will clip your email [around 102KB](https://github.com/hteumeuleu/email-bugs/issues/41), so anything past that mark won't even be in the DOM (which can lead to unexpected results like tracking pixel not loaded or, worse, hidden unsubscribe links). You might also want to consider the [environmental impact](https://github.com/email-markup-consortium/email-markup-consortium/discussions/39) of sending large, unoptimized emails.

This Transformer will remove any unused CSS styles and corresponding classes in your HTML, helping you reduce your file size.

## Usage

Enable it in your Environment config:

```js [config.js]
export default {
  css: {
    purge: true,
  }
}
```

## Customization

You may configure this Transformer through the `css.purge` key in your `config.js`.

### safelist

Type: `String[]`

Array of classes or id's that you don't want removed.

You may use any [matcher](https://www.npmjs.com/package/matcher) patterns, for example:

```js [config.js]
export default {
  css: {
    purge: {
      safelist: ['.External*', '.ReadMsgBody', '.yshortcuts', '.Mso*', '#*'],
    }
  }
}
```

Resetting email client styles is commonly done through CSS selectors that do not exist in your email's code.
Maizzle uses the [`tailwindcss-email-variants`](https://github.com/maizzle/tailwindcss-email-variants) plugin for this, so to make sure the plugin works as expected `safelist` defaults to this:

```js
[
  '*body*', // Gmail
  '.gmail*', // Gmail
  '.apple*', // Apple Mail
  '.ios*', // Mail on iOS
  '.ox-*', // Open-Xchange
  '.outlook*', // Outlook.com
  '[data-ogs*', // Outlook.com
  '.bloop_container', // Airmail
  '.Singleton', // Apple Mail 10
  '.unused', // Notes 8
  '.moz-text-html', // Thunderbird
  '.mail-detail-content', // Comcast, Libero webmail
  '*edo*', // Edison (all)
  '#*', // Freenet uses #msgBody
  '.lang*' // Fenced code blocks
]
```

### backend

Type: `Array<Record<string, string>>`\
Default: `[{heads: '{{', tails: '}}'}, {heads: '{%', tails: '%}'}]`

If you use computed class names, like for example `class="{{ computedRed }} text-sm"`, the library will normally treat `{{` and `}}` as class names and will remove them, since there will be no corresponding CSS selectors defined.

To prevent this from happening, use the `backend` option to define the delimiters:

```js [config.js]
export default {
  css: {
    purge: {
      backend: [
        { heads: '[[', tails: ']]' },
      ]
    }
  }
}
```

By default, Maizzle preserves `{{ }}` and `{% %}`.

### removeHTMLComments

Type: `Boolean`\
Default: `true`

Set to `false` to prevent `email-comb` from removing `<!-- HTML comments -->`.

```js [config.js]
export default {
  css: {
    purge: {
      removeHTMLComments: false,
    }
  }
}
```

### removeCSSComments

Type: `Boolean`\
Default: `true`

Set to `false` to prevent `email-comb` from removing `/* CSS comments */`.

```js [config.js]
export default {
  css: {
    purge: {
      removeCSSComments: false,
    }
  }
}
```

#### Preserving CSS comments when inlining

If you have [CSS inlining](/docs/transformers/inline-css) enabled, CSS comments will still be removed, even with `removeCSSComments` disabled.

You may use the `data-embed` attribute on a `<style>` tag to disable inlining for CSS inside it, if you need to preserve CSS comments.

For example, MailChimp uses CSS comments to define styles that are editable in their email editor. Here's how you can preserve them:

1. Set `removeCSSComments: false` in your config, as above
2. Write your CSS with comments in a separate `<style>` tag:

```html
<style data-embed>
  /*
    @tab Page
    @section Body Background
    @tip Set the background colour for the email body.
  */
  .wrapper {
    /*@editable*/background-color: #EEEEEE !important;
  }
</style>
```

### doNotRemoveHTMLCommentsWhoseOpeningTagContains

Type: `String[]`\
Default: `['[if', '[endif']`

HTML email code often includes Outlook or IE conditional comments, which you probably want to preserve. If the opening tag of a conditional includes any of the strings you list here, the Transformer will not remove that comment.

```js [config.js]
export default {
  css: {
    purge: {
      doNotRemoveHTMLCommentsWhoseOpeningTagContains: ['[if', '[endif'],
    }
  }
}
```

### uglify

Type: `Boolean`\
Default: `false`

Enable this to rename all classes and id's in both your `<style>` tags and your body HTML elements, to be as few characters as possible.

Used in production, it will help trim down your HTML size.

```js [config.js]
export default {
  css: {
    purge: {
      uglify: true,
    }
  }
}
```

## API

The Transformer uses the email-comb library, see all available options [here](https://www.npmjs.com/package/email-comb).

```js [app.js]
import { removeUnusedCSS } from '@maizzle/framework'

const config = {/* email-comb options */}

const html = await removeUnusedCSS(`<div class="unused">test</div>`, config)
```

</document_content>
</document>
<document index="41">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/remove-attributes.md</source>
<document_content>
---
title: "Remove attributes"
description: "Automatically remove attributes when building your HTML email."
---

# Remove attributes

Maizzle can automatically remove attributes from your HTML.

By default, it removes empty `style` and `class` attributes that are sometimes left over after the CSS inlining process.

## Usage

You may configure which attributes to remove through the `removeAttributes` array.

### Empty values

To remove attributes that have no value, specify the attribute name as a string:

```js [config.js]
export default {
  attributes: {
    remove: ['data-src'],
  }
}
```

Input:

```html [emails/example.html]
<img src="example.jpg" data-src alt="">
```

Output:

```html
<img src="example.jpg" alt="">
```

<Alert>Maizzle automatically removes empty `style` and `class` attributes, no need to add them yourself.</Alert>

### By name and value

If you know the exact name and value, you may pass them to the array as an object:

```js [config.js]
export default {
  attributes: {
    remove: [
      {name: 'id', value: 'test'},
    ],
  }
}
```

Input:

```html
<div style="color: #000" id="test">Test</div>
```

Output:

```html
<div style="color: #000">Test</div>
```

### With a RegExp

You may also use a regular expression for the `value`.

All attributes with a value matching the regex will be removed:

```js [config.js]
export default {
  attributes: {
    remove: [
      {name: 'data-id', value: /\d/},
    ],
  }
}
```

Input:

```html
<div data-id="test"></div>
<div data-id="99"></div>
```

Output:

```html
<div data-id="test"></div>
<div></div>
```

## API

```js [app.js]
import { removeAttributes } from '@maizzle/framework'

const options = [
  'id',
  {name: 'role', value: 'article'},
]

const html = await removeAttributes(`<div id="" style="" role="article"></div>`, options)
```

</document_content>
</document>
<document index="42">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/replace-strings.md</source>
<document_content>
---
title: "Replace strings"
description: "Programmatically replace strings in your HTML email content."
---

# Replace strings

Maizzle can batch-replace strings in your HTML email template, and you can even use regular expressions!

## Usage

Use the `replaceStrings` option to define key-value pairs of regular expressions and strings to replace them with:

```js [config.js]
export default {
  replaceStrings: {
    'find and replace this exact string': 'with this one',
    '\\s?data-src=""': '', // remove empty data-src="" attributes
  }
}
```

<Alert type="warning">Character classes need to be escaped when defining a regular expression for `replaceStrings`. As you can see above, `\s` becomes `\\s`.</Alert>

## API

```js [app.js]
import { replaceStrings } from '@maizzle/framework'

const html = await replaceStrings('initial text', {initial: 'updated'})
```

</document_content>
</document>
<document index="43">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/safe-class-names.md</source>
<document_content>
---
title: "Safe class names"
description: "Replace escaped characters in class names and CSS selectors for better email client compatibility."
---

# Safe class names

Some email clients don't support class names with escaped characters. Gmail in particular will discard the entire rule of such a class, so you can't safely use CSS class names like `w-1/2` or `sm:block`.

Maizzle normalizes escaped character class names like `\:` or `\/` by replacing them with email-safe alternatives, so you can keep using those fancy Tailwind CSS class names and not have to worry about it.

By default, it runs only when not developing locally. This means that it's disabled when you run `maizzle serve`, but it's enabled when running `maizzle build production`.

## Replacements

This is the default replacement strategy:

| Character | Replacement |
|-----------|-------------|
| :         | -           |
| /         | -           |
| %         | pc          |
| .         | _           |
| ,         | _           |
| #         | _           |
| [         | (removed)   |
| ]         | (removed)   |
| (         | (removed)   |
| )         | (removed)   |
| {         | {           |
| }         | }           |
| !         | important-  |
| &         | and-        |
| <         | lt-         |
| =         | eq-         |
| >         | gt-         |
| \|        | or-         |
| @         | at-         |
| ?         | q-          |
| \         | -           |
| "         | -           |
| $         | -           |
| '         | -           |
| *         | -           |
| +         | -           |
| ;         | -           |
| ^         | -           |
| `         | -           |
| ~         | -           |

## Customization

You may define new replacement mappings (or overwrite existing ones) by adding a `css.safe` key to your config:

```js [config.js]
export default {
  css: {
    safe: {
      ':': '__',
      '!': 'i-',
    }
  }
}
```

That would turn `sm:w-full` into `sm__w-full` and `sm:!text-xl` into `sm__i-text-xl`.

## Disabling

You can prevent Maizzle from rewriting your class names with safe characters, by setting this option to `false`:

```js [config.js]
export default {
  css: {
    safe: false,
  }
}
```

## API

You may use the `safeClassNames` Transformer in your application.

```js [app.js]
import { safeClassNames } from '@maizzle/framework'

const html = await safeClassNames(
  '<div class="sm:text-left w-1.5">foo</div>', // html string
  {'.': 'dot'} // replacements object
)
```

Result:

```html
<div class="sm-text-left w-1dot5">foo</div>
```

</document_content>
</document>
<document index="44">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/shorthand-css.md</source>
<document_content>
---
title: "Shorthand CSS"
description: "Group CSS properties of the same type into shorthand inline CSS."
---

# Shorthand CSS

Rewrite longhand CSS inside `style` attributes with shorthand syntax. Only works with `margin`, `padding` and `border`, and only when all sides are specified.

Shorthand syntax for CSS properties means less code, so fewer bytes to send over the wire. Today, most email clients support shorthand CSS.

Something like this:

```html
<p class="mx-2 my-4">Example</p>
```

... instead of becoming this:

```html
<p style="margin-left: 2px; margin-right: 2px; margin-top: 4px; margin-bottom: 4px;">Example</p>
```

... is rewritten to this:

```html
<p style="margin: 4px 2px;">Example</p>
```

By default, `shorthandCSS` is disabled.

## Usage

Enable it for all tags:

```js [config.js]
export default {
  css: {
    shorthand: true,
  }
}
```

Enable it only for a selection of tags:

```js [config.js]
export default {
  css: {
    shorthand: {
      tags: ['td', 'div'],
    }
  }
}
```

## Disabling

Set it to `false` or simply omit it:

```js [config.js]
export default {
  css: {
    shorthand: false,
  }
}
```

## API

```js [app.js]
import { shorthandCSS } from '@maizzle/framework'

const html = await shorthandCSS('html string')
```

</document_content>
</document>
<document index="45">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/six-hex.md</source>
<document_content>
---
title: "Six-digit HEX"
description: "Using six-digit hexadecimal for improved email client compatibility."
---

# Six-digit HEX

Some email clients do not support 3-digit HEX colors like `#fff` in `bgcolor` or `<font color="">`. This Transformer ensures that all your HEX colors inside `bgcolor` and `color` attributes are defined with six digits.

For better email client compatibility, it is enabled by default.

## Disabling

You may disable it by setting it to `false`:

```js [config.js]
export default {
  css: {
    sixHex: false,
  }
}
```

## API

```js [app.js]
import { sixHEX } from '@maizzle/framework'

const html = await ensureSixHEX('<td bgcolor="#fff"><font color=""#000>test</font></td>')
```

</document_content>
</document>
<document index="46">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/url-parameters.md</source>
<document_content>
---
title: "URL Parameters"
description: "Easily append custom URL parameters to links in your HTML email template."
---

# URL Parameters

Maizzle can automatically append custom parameters to your URLs.

## Usage

To add the same parameters to all URLs in all Templates, use the environment config:

```js [config.js]
export default {
  urlParameters: {
    _options: {
      tags: ['a'],
      qs: {}
    },
    utm_source: 'maizzle',
    utm_campaign: 'Campaign Name',
    utm_medium: 'email',
    custom_parameter: 'foo',
    '1stOfApril': 'bar'
  }
}
```

## Front Matter

Of course, you may define URL parameters at a Template level, through Front Matter:

```hbs [emails/example.html]
---
title: "These URL params are unique to this template"
urlParameters:
  utm_source: custom
  utm_campaign: "Pre-launch August"
---

<x-main>
  <!-- your email HTML... -->
</x-main>
```

## Options

Configure the tags to process and other transformer options.

### tags

Type: `String[]`\
Default: `['a']`

Array of tag names to process.

By default, only URLs inside [known attributes](#attributes) of tags in this array will be processed.

You may use CSS selectors to select only certain attributes. For example, this will apply parameters only to anchors that include example.com in their `href` value:

```js [config.js]
export default {
  urlParameters: {
    _options: {
      tags: ['a[href*="example.com"]'],
    },
    utm_source: 'maizzle',
  }
}
```

### attributes

Type: `String[]`\
Default: `['src', 'href', 'poster', 'srcset', 'background']`

Array of attributes to process for the given tags.

You may override this with your own list of attributes - the plugin will only process URLs in these attributes.

```js [config.js]
export default {
  urlParameters: {
    _options: {
      tags: ['a', 'img'],
      attributes: ['data-href', 'src']
    },
    foo: 'bar',
  }
}
```

Given this HTML:

```html
<a href="https://foo.bar" data-href="https://example.com">Test</a>
<img src="https://example.com">
```

The result will be:

```html
<a href="https://foo.bar" data-href="https://example.com?foo=bar">Test</a>
<img src="https://example.com?foo=bar">
```

### strict

Type: `Boolean`\
Default: `true`

By default, query parameters are appended only to valid URLs.

Disable strict mode to append parameters to any string:

```js [config.js]
export default {
  urlParameters: {
    _options: {
      strict: false,
    },
    foo: 'bar'
  }
}
```

Input:

```html
<a href="example.com">test</a>
```

Result:

```html
<a href="example.com?foo=bar">test</a>
```

### qs

Type: `Object`\
Default: `undefined`

Options to pass to the [query-string](https://github.com/sindresorhus/query-string#stringifyobject-options) library.

For example, Maizzle disables encoding by default, but you can enable it:

```js [config.js]
export default {
  urlParameters: {
    _options: {
      qs: {
        encode: true
      }
    },
    foo: '@Bar@'
  }
}
```

Result:

```html
https://example.com/?foo=%40Bar%40
```

## API

```js [app.js]
import { addURLParams } from '@maizzle/framework'

const html = await addURLParams('<a href="https://example.com">test</a>', {utm_source: 'maizzle'})
```

</document_content>
</document>
<document index="47">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/transformers/widows.md</source>
<document_content>
---
title: "Prevent Widow Words"
description: "Preventing widow words in your HTML email content."
---

# Prevent Widow Words

Add a `prevent-widows` attribute on any HTML tag to prevent widow words by adding a `&nbsp;` between the last two words inside it.

```html [emails/example.html]
<x-main>
  <div prevent-widows>
    <p>The quick brown fox jumped over the lazy dog.</p>
  </div>
</x-main>
```

The `prevent-widows` attribute will be removed and the HTML will be transformed to:

```html
<div>
  <p>The quick brown fox jumped over the lazy&nbsp;dog.</p>
</div>
```

## Configuration

You may configure the transformer through the `widowWords` key in your `config.js`:

```js [config.js]
export default {
  widowWords: {
    attributes: ['fix-widows'],
    // ...options for string-remove-widows
  },
}
```

### attrName

Type: `String`\
Default: `['prevent-widows', 'no-widows']`

A list of attribute names that will trigger the transformer.

Only tags that have this attribute will be processed.

### minWords

Type: `Number`\
Default: `3`

The minimum amount of words in a target string, in order to trigger the transformer.

You may set it to `0` or `false` to disable it.

### createWidows

Type: `Boolean`\
Default: `false`

Set this to `true` if you want the opposite of preventing widow words: it will replace all widow word `nbsp;` locations with a single space.


### ignore

Type: `Array<Record<string, string>>`\
Default: custom array

Start/end pairs of strings that will prevent the transformer from removing widow words inside of them. Maizzle will ignore the following  common templating language start and end delimiters:

- `{{ }}` -  Handlebars, Liquid, Nunjucks, Twig, Jinja2, Mustache
- `{% %}` -  Liquid, Nunjucks, Twig, Jinja2
- `<%= %>` - EJS, ERB
- `<% %>` -  EJS, ERB
- `{$ }` - Smarty
- `<?php ?>` - PHP
- `<?= ?>` - PHP
- `#{ }` - Pug

Any new pairs that you add will be merged on top of the default ones.

```js [config.js]
export default {
  widowWords: {
    ignore: [
      {
        start: '[[',
        end: ']]'
      },
    ],
  },
}
```

## Undo Widows

You can use the transformer the other way around, too.

```js [config.js]
export default {
  widowWords: {
    createWidows: true,
    attributes: ['create-widows'],
  },
}
```

Input:

```html [emails/example.html]
<x-main>
  <div create-widows>
    <p>The quick brown fox jumped over the lazy&nbsp;dog.</p>
  </div>
</x-main>
```

Output:

```html [emails/example.html]
<div>
  <p>The quick brown fox jumped over the lazy dog.</p>
</div>
```

## API

```js [app.js]
import { preventWidows } from '@maizzle/framework'

const html = await preventWidows(
  '<p prevent-widows>the quick brown fox</p>',
  {
    minWords: 4,
  }
)
```

</document_content>
</document>
<document index="48">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/examples/buttons.md</source>
<document_content>
---
title: "Buttons"
description: "Techniques for coding call to action buttons for HTML emails."
---

# Buttons

Buttons in HTML emails can be created with simple table structures with an anchor inside, or through advanced techniques involving <abbr title="Vector Markup Language">VML</abbr> or `mso-` CSS, for fully-clickable buttons in Outlook for Windows.

## Link

<Alert>This is inspired by <a href="https://twitter.com/M_J_Robbins">@M_J_Robbins</a>' link button - see the original on <a href="https://www.goodemailcode.com/email-code/link-button">goodemailcode.com</a></Alert>

We can use a smart combination of basic and vendor CSS properties to get fully clickable buttons in HTML - no VML required!

Here's the Filled button, fully clickable in Outlook:

<div class="example-preview">
  <div>
    <button
      class="block py-4 px-6 text-sm/none no-underline text-white font-semibold rounded bg-indigo-500 hover:bg-indigo-600 focus:outline-none">
        Read more
    </button>
  </div>

  ```html
  <a
    href="https://maizzle.com/"
    class="inline-block py-4 px-6 text-sm/none font-semibold rounded no-underline text-white bg-indigo-500 hover:bg-indigo-600"
  >
    <outlook>
      <i class="mso-font-width-[150%] mso-text-raise-[26pt]">&nbsp;</i>
    </outlook>
      <span class="mso-text-raise-[13pt]">Read more</span>
    <outlook>
      <i class="mso-font-width-[150%]">&nbsp;</i>
    </outlook>
  </a>
  ```
</div>

As you can see it's just a simple `<a>` tag, but with some nifty workarounds for Outlook's lack of support for `padding` on inline elements:

- left/right padding is faked with `<i>` elements that use `mso-font-width` with a `&emsp;` to grow in width; these elements are wrapped in conditional comments, so they only show in Outlook and Windows 10 Mail
- the text label is wrapped in a `<span>` and `mso-text-raise` adjusts its vertical position, allowing us to control the top padding
- the first `<i>` also adds bottom padding

<Alert>Line breaks and spaces between tags in the example above might render the button larger (although barely noticeable). If you want your button to be absolutely pixel perfect, just remove them.</Alert>

## VML

Another approach to buttons in HTML email is coding them with <abbr title="Vector Markup Language">VML</abbr>, Microsoft's obsolete and deprecated _Vector Markup Language_.

[buttons.cm](https://buttons.cm/), a tool by Campaign Monitor, makes it easy to generate a VML button.

However, you should keep in mind that VML buttons:

- have a larger code footprint
- must have a fixed width and height
- require that you add the URL in two places
- are converted to an image, which can degrade accessibility for screen reader users
- cannot be nested inside other VML elements (for example, background images for Outlook require VML, so you can't place a VML button on top of a background image for Outlook)

These limitations make VML buttons inaccessible, less flexible, and harder to maintain.

### Rounded corners in Outlook

Probably the only reason you'd want to use a VML button is because it's the only way to achieve rounded button corners in Outlook for Windows.

Here is a simplified VML button with rounded corners, styled with Tailwind CSS:

```html [vml-rounded-button.html]
<!--[if mso]>
<v:roundrect arcsize="50%" style="height: 48px; mso-wrap-style: none;" stroke="f" fillcolor="#1d4ed8">
<![endif]-->
  <a
    href="https://example.com/"
    class="inline-block p-0 px-6 text-base/10 rounded-md no-underline text-white bg-blue-700"
  >
    <outlook>
      <i class="mso-font-width-[150%] mso-text-raise-[26pt]">&nbsp;</i>
    </outlook>
    <span>Link Text</span>
    <outlook>
      <i class="mso-font-width-[150%]">&nbsp;</i>
    </outlook>
  </a>
<!--[if mso]>
</v:roundrect>
<![endif]-->
```

<Alert type="warning">Keep in mind that VML code cannot be nested, so you can't use such a button inside a `<v:rect>`, like when coding background images for Outlook on Windows.</Alert>

## Table-based

A simple table structure, with background color set on the cell.

For modern email clients, we use CSS padding on the `<a>` to make the entire button clickable. In Outlook and Windows 10 Mail, because CSS padding isn't supported on anchor tags, the MSO `mso-padding-alt` CSS property can be used on the table cell in order to preserve the _visual aspect_.

This means that in Outlook/Windows 10 Mail only the text itself will be clickable.

Table-based buttons are easier to code and maintain than VML buttons, the main trade-off being accessibility: the click area in Outlook is not ideal.

### Filled

The most common type of button.

For an extra touch, let's add rounded corners and a hover effect:

<div class="example-preview">
  <div>
    <button
      class="py-4 px-6 text-sm/none no-underline text-white font-semibold rounded bg-indigo-500 hover:bg-indigo-600 focus:outline-none">
        Read more
    </button>
  </div>

  ```html
  <table>
    <tr>
      <th class="bg-indigo-500 hover:bg-indigo-600 rounded mso-padding-alt-[12px_24px]">
        <a
          href="https://maizzle.com"
          class="block py-4 px-6 text-white text-sm/[100%] no-underline"
        >
          Button
        </a>
      </th>
    </tr>
  </table>
  ```
</div>

<Alert>Outlook doesn't support <code>border-radius</code>, it will render square corners.</Alert>

### Outlined

No background color, so it inherits its container's background (gray in our case). We add a colored border to the table cell to create the outline.

To make it more interesting, let's also change the background on hover:

<div class="example-preview">
  <div>
    <button
      class="py-3 px-6 rounded border-2 border-indigo-500 hover:border-indigo-600 hover:bg-indigo-600 text-sm text-indigo-500 hover:text-white font-bold leading-full focus:outline-none">
        Read more
    </button>
  </div>

  ```html
  <table>
    <tr>
      <th class="block border-2 border-indigo-500 hover:bg-indigo-500 rounded mso-padding-alt-[12px_24px]">
        <a
          href="https://maizzle.com"
          class="block py-3 px-6 text-sm/[100%] text-indigo-500 hover:text-white no-underline"
        >
          Button
        </a>
      </th>
    </tr>
  </table>
  ```
</div>

### Pill

Pill buttons simply use a larger border-radius value.

<div class="example-preview">
  <div>
    <button class="py-3 px-6 rounded-full shadow-md bg-indigo-500 hover:bg-indigo-600 text-sm text-white font-bold leading-full focus:outline-none">Read more</button>
  </div>

  ```html
  <table>
    <tr>
      <th class="bg-indigo-500 hover:bg-indigo-600 shadow-md rounded-full mso-padding-alt-[16px_24px]">
        <a
          href="https://maizzle.com"
          class="block py-3 px-6 text-sm/none text-white no-underline"
        >
          Button
        </a>
      </th>
    </tr>
  </table>
  ```
</div>

</document_content>
</document>
<document index="49">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/examples/cards.md</source>
<document_content>
---
title: "Cards"
description: "Create simple, effective attention grabbers in HTML emails with Tailwind CSS in Maizzle."
---

# Cards

The traditional content block for showing article excerpts, like those from a blog.

## Rounded with Shadow

<div class="example-preview">
  <div class="not-prose px-4">
    <table class="w-full sm:max-w-[400px] xl:max-w-[340px] shadow-xl rounded m-0">
      <tr>
        <td>
          <img
            class="rounded-tl rounded-tr m-0"
            src="https://images.unsplash.com/photo-1524758631624-e2822e304c36?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=600&h=300&q=80"
            alt
          >
        </td>
      </tr>
      <tr>
        <td class="bg-white p-6 rounded-br rounded-bl">
          <span class="text-xs text-slate-500">April 7, 2020</span>
          <h2 class="mt-2 mb-3 text-2xl leading-7">
            <a href="https://example.com" style="color:#000;display:inline-block;position:relative;margin:0;" class="text-gradient-none no-underline">Lorem ipsum dolor sit amet, consectetur</a>
          </h2>
          <p class="m-0 mb-4 text-base text-slate-500">Anim ullamco anim ipsum Lorem id voluptate consequat excepteur proident cillum mollit.</p>
          <a href="https://example.com" class="text-blue-500 no-underline hover:underline">Learn more &rarr;</a>
        </td>
      </tr>
    </table>
  </div>

  ```html example
  <table class="sm:w-full font-sans shadow-xl rounded">
    <tr>
      <td>
        <img
          class="rounded-t"
          src="https://images.unsplash.com/photo-1524758631624-e2822e304c36?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=600&h=300&q=80"
        >
      </td>
    </tr>
    <tr>
      <td class="p-6 bg-white rounded-b">
        <span class="text-xs text-slate-500">April 7, 2020</span>
        <h2 class="m-0 mt-2 mb-3 text-2xl leading-full">
          <a href="https://example.com" class="text-black hover:text-slate-700 no-underline">
            Lorem ipsum dolor sit amet, consectetur
          </a>
        </h2>
        <p class="m-0 mb-16 text-base text-slate-500">
          Anim ullamco anim ipsum Lorem id voluptate consequat excepteur proident cillum mollit.
        </p>
        <a href="https://example.com" class="text-blue-500 no-underline hover:underline">
          Learn more &rarr;
        </a>
      </td>
    </tr>
  </table>
  ```
</div>

</document_content>
</document>
<document index="50">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/examples/dividers.md</source>
<document_content>
---
title: "Dividers"
description: "How to create dividers or horizontal rules for HTML emails."
---

# Dividers

A Divider is a visible horizontal line that separates content areas.

Similar to Spacers, Dividers provide consistent vertical spacing while also offering visual separation of your content.

## Div

The simplest, most reliable way to create a visual, horizontal divider line in HTML emails is to use a `<div>` element:

```html [emails/example.html]
<div class="h-px leading-px bg-slate-300" role="separator">&zwj;</div>
```

The `separator` role indicates that this is a divider that separates and distinguishes sections of content.

You may adjust the top and bottom spacing around the divider with margin utilities:

```html [emails/example.html]
<div class="h-px leading-px bg-slate-300 my-8" role="separator">&zwj;</div>
```

## Semantic

To create a semantic Divider, we can use a regular `<hr>` element:

```html [emails/example.html]
<hr class="border-0 bg-slate-500 text-gray-500 h-px">
```

### How it works

1. We first reset the `border-width`, so we can apply our own colors
2. We use a combination of `background-color` and `color` - the latter is for Outlook (Windows)
3. Removing the border means the element now has no `height`, so we use `h-px` to set it to `1px`

The `<hr>` Divider is based on Mark Robbins' excellent work, available at [goodemailcode.com](https://www.goodemailcode.com/email-code/hr).

### Customization

You can customize the divider and give it a custom width or height, change its color, the top/bottom space around it, and even its alignment.

#### Width

An `<hr>` goes full width by default, but we can set a custom width.

While we're at it, let's also use `max-w-full`, to make it responsive.

```html [emails/example.html]
<hr class="border-0 bg-slate-500 text-slate-500 h-px w-[400px] max-w-full">
```

Need a custom width for mobile devices? Use the `sm` breakpoint:

```html [emails/example.html]
<hr class="border-0 bg-slate-500 text-slate-500 h-px sm:w-16 max-w-full">
```

#### Margin

You may customize top and bottom spacing with CSS margins.

For example, let's add `32px` to the top and bottom:

```html [emails/example.html]
<hr class="border-0 bg-slate-500 text-slate-500 h-px my-8">
```

Need uneven spacing?

```html [emails/example.html]
<hr class="border-0 bg-slate-500 text-slate-500 h-px mt-4 mb-8">
```

<Alert>Note that `<hr>` elements come with margins by default, so you might want to set a custom one or reset it with `m-0`. For example, Chrome resets to `8px`.</Alert>

#### Alignment

You can use the `align` attribute to align a Divider.

```html [emails/example.html]
<hr align="right" class="border-0 bg-slate-500 text-slate-500 h-px mt-4 mb-8">
```

By default, it will be centered.

#### Vertical

For a vertical Divider, simply use a narrow width and a bigger height:

```html [emails/example.html]
<hr class="border-0 bg-slate-500 text-slate-500 w-px h-16 m-0">
```

### Outlook note

The `<hr>` divider is harder to control in Outlook on Windows - it usually renders wider than intended and you can't use left/right CSS margins.

A proposed solution, as seen in Mark's example, is to wrap it in a `<div>` and add margins to that instead:

```html [emails/example.html]
<div class="mx-6">
  <hr class="border-0 bg-slate-500 text-gray-500 h-px">
</div>
```

In our tests, the semantic `<hr>` divider has been hard to control in Outlook on Windows, so we recommend using the Div or Table Divider.

The Maizzle Starter includes a [Divider component](/docs/components/divider) that uses the `<div>` technique.

## Table divider

The spacing above and below the Table Divider line is defined through the vertical padding of the inner `<td>` element, with Tailwind CSS utilities:

```html [emails/example.html]
<table class="w-full" role="separator">
  <tr>
    <td class="py-6">
      <div class="bg-slate-300 h-px leading-px">&zwj;</div>
    </td>
  </tr>
</table>
```

How it works:

- `py-6` adds 24px top and bottom padding
- the `<div>` is the horizontal line: we set its height and line-height to 1px, and give it a background color
- we use a `&zwj;` to add something inside the `<div>`, so it can take up height

Feel free to use `&nbsp;` instead of `&zwj;` - both work just fine 👌

### Outlook note

The `<div>` element where we use `leading-px` needs some extra attention for Outlook. Otherwise, it will render thicker than intended.

To make Outlook respect the line height you set on elements, you may use the `mso-line-height-rule-exactly` class that is available from the `tailwindcss-mso` plugin (included in the Starter).

```html [emails/example.html]
<table class="w-full" role="separator">
  <tr>
    <td class="py-6">
      <div class="bg-slate-300 h-px leading-px mso-line-height-rule-exactly">&zwj;</div>
    </td>
  </tr>
</table>
```

</document_content>
</document>
<document index="51">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/examples/google-fonts.md</source>
<document_content>
---
title: "Google Fonts"
description: "Easily import and use Google Fonts in your HTML email templates."
---

# Google Fonts

Adding Google Fonts to your Maizzle templates is very easy: you simply copy the code they provide and paste it into your Layout or Template.

For this example, we'll use Merriweather and Open Sans.

## Layout

Using the same Google Fonts in all your emails? Paste the code in your main Layout.

For example, add it before Tailwind CSS:

```html [layouts/main.html]
<head>
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Merriweather&family=Open+Sans&display=swap" rel="stylesheet" media="screen">

  <style>
    @tailwind components;
    @tailwind utilities;
  </style>
</head>
```

## Template

If you only need Google Fonts in a certain Template, push to the `head` stack:

```html [emails/example.html]
<x-main>
  <push name="head">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
      rel="stylesheet"
      media="screen"
      href="https://fonts.googleapis.com/css2?family=Merriweather&family=Open+Sans&display=swap"
    >
  </push>

  <table class="font-merriweather">
    <!-- ... -->
  </table>
</x-main>
```

You'll see `<stack name="head" />` in `main.html` - that's where Google Fonts will be output!

<Alert>Notice the `media="screen"` attribute on the last `<link>` tag - that helps avoid the Times New Roman fallback font bug in older versions of Outlook.</Alert>

## Tailwind CSS utility

After pasting in the code from Google Fonts, you have one more thing to do: register the `fontFamily` utilities in your `tailwind.config.js`, so you can use classes generated by Tailwind.

For example, let's register a Tailwind utility for Open Sans:

```js [tailwind.config.js]
export default {
  theme: {
    extend: {
      fontFamily: {
        'open-sans': ['"Open Sans"', 'ui-sans-serif', 'system-ui', '-apple-system', '"Segoe UI"', 'sans-serif'],
        merriweather: ["'Merriweather'", 'ui-serif', 'Georgia', 'Cambria', '"Times New Roman"', 'Times', 'serif'],
      },
    },
  }
}
```

Now you can use the `font-open-sans` and `font-merriweather` utility classes.

## Avoid inlining

Although having the font-family CSS inlined on the first element in your HTML should be enough, there might be situations where that isn't desirable.

Email clients that support web fonts don't actually require the `font-family` CSS to be inlined in your HTML. Therefore, we can make use of Tailwind's breakpoints and tuck the class inside an `@media screen {}` query.

This way it doesn't get inlined and you can keep this CSS away from any email client that doesn't support `@media` queries.

To do this, we first register a `screen` breakpoint:

```js [tailwind.config.js] {6}
export default {
  theme: {
    screens: {
      sm: {max: '600px'},
      xs: {max: '425px'},
      screen: {raw: 'screen'}, // [!code ++]
    }
  }
}
```

We can use it like this:

```html [emails/example.html]
<div class="screen:font-open-sans">
  <h1>Lorem ipsum</h1>
  <p>Labore exercitation consequat tempor quis eu nulla amet.</p>
</div>
```

## @font-face

Some email clients or <abbr title="Email Service Provider">ESP</abbr>s don't support `<link>` tags or CSS `import()`, but do support web fonts. In such cases, you can use `@font-face` and add your Google Fonts right inside your `<style>` tag.

First, visit the URL that Google Fonts creates for you after you've selected your fonts.

In our example, it's the following:

```html
https://fonts.googleapis.com/css2?family=Merriweather:wght@400;700&family=Open+Sans:wght@400;600&display=swap
```

You will see lots of `@font-face` declarations in there, for example

```css
/* latin */
@font-face {
  font-family: 'Merriweather';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/merriweather/v22/u-440qyriQwlOrhSvowK_l5-fCZM.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
```

Copy only the `@font-face` declarations that you need and add them either in a Template or in the Layout your templates extend (for global usage) - see our [web fonts in HTML emails guide](/guides/custom-fonts#add-in-template) to learn how to do so.

Note that you'll still need to register the [Tailwind CSS utility](#tailwind-utility) in order to use the fonts.

</document_content>
</document>
<document index="52">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/examples/grids.md</source>
<document_content>
---
title: "Grids"
description: "Learn how to create a simple grid system for HTML email with Tailwind CSS in Maizzle."
---

# Grids

You'll sometimes need to create multi-column HTML email layouts. Here's how to create a responsive email grid with Tailwind CSS in Maizzle.

## Percentage

The simplest (and recommended) approach is to use Tailwind percentage widths:

<div class="example-preview">
  <div class="not-prose px-4">
    <table class="w-full max-w-[600px]">
      <tr>
        <td class="w-4/12 bg-slate-200 p-2">4 cols</td>
        <td class="w-8/12 bg-slate-300 p-2">8 cols</td>
      </tr>
    </table>
  </div>

  ```html
  <table class="w-[600px] sm:w-full">
    <tr>
      <td class="w-4/12">4 cols</td>
      <td class="w-8/12">8 cols</td>
    </tr>
  </table>
  ```
</div>

Tailwind comes configured with 2, 3, 4, 5, 6 and 12 column grids, so you can create columns with classes like `w-2/3` or `w-4/6`.

## Fixed

Of course, you can use fixed widths if you prefer.

<div class="example-preview">
  <div class="not-prose">
    <table class="w-full max-w-[600px]">
      <tr>
        <td class="bg-slate-200 p-2 w-[300px]">300px</td>
        <td class="bg-slate-300 p-2 w-[300px]">300px</td>
      </tr>
    </table>
  </div>

  ```html
  <table class="w-[600px] sm:w-full">
    <tr>
      <td class="w-[300px]">6 cols</td>
      <td class="w-[300px]">6 cols</td>
    </tr>
  </table>
  ```
</div>

## Stacking

Responsive HTML emails usually reset the columns to stack on mobile. We can easily achieve this with a couple utility classes.

Using the [percentage](#percentage) example, we might do:

<div class="example-preview">
  <div class="not-prose">
    <table class="w-full max-w-[600px]">
      <tr>
        <td class="w-full sm:w-4/12 inline-block bg-slate-200 p-2">4 cols</td>
        <td class="w-full sm:w-8/12 inline-block bg-slate-300 p-2">8 cols</td>
      </tr>
    </table>
  </div>

  ```html
  <table class="w-[600px] sm:w-full">
    <tr>
      <td class="w-4/12 sm:w-full inline-block">4 cols</td>
      <td class="w-8/12 sm:w-full inline-block">8 cols</td>
    </tr>
  </table>
  ```
</div>

Some email clients strip the `doctype` of your email, which prevents `inline-block` from working on `<td>`. This can be fixed by using `<th>` instead, but requires resetting the font weight and text alignment:

<div class="example-preview">
  <div class="not-prose">
    <table class="w-full max-w-[600px]">
      <tr>
        <th class="w-full sm:w-4/12 inline-block bg-slate-200 p-2 font-normal text-left">4 cols</th>
        <th class="w-full sm:w-8/12 inline-block bg-slate-300 p-2 font-normal text-left">8 cols</th>
      </tr>
    </table>
  </div>

  ```html
  <table class="w-[600px] sm:w-full">
    <tr>
      <th class="w-4/12 sm:w-full inline-block font-normal text-left">4 cols</th>
      <th class="w-8/12 sm:w-full inline-block font-normal text-left">8 cols</th>
    </tr>
  </table>
  ```
</div>

Need a custom column stacking order on mobile? See the [reverse stack](/docs/examples/reverse-stack) docs.

</document_content>
</document>
<document index="53">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/examples/reverse-stack.md</source>
<document_content>
---
title: "Reverse Stack"
description: "Reorder stacked columns in a mobile responsive HTML email template with table layout CSS properties."
---

# Reverse Stack

With responsive HTML emails, you sometimes need to reverse the order in which stacked columns appear on mobile. You might even want to set a custom stacking order for layouts with 3+ columns.

## Reverse 2 col

Imagine a two column layout, with text on the left and an image on the right:

```html [2-col.html]
<table class="w-full">
  <tr>
    <th class="sm:block w-1/2 sm:w-full font-sans font-normal text-left">
      <p class="text-2xl font-hairline text-black">Left text</p>
      <p class="text-slate-700">Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore aspernatur.</p>
    </th>
    <th class="sm:block w-1/2 sm:w-full font-normal text-left">
      <img src="https://picsum.photos/600/600" alt="Unsplash photo">
    </th>
  </tr>
</table>
```

Naturally, the image will show under the text when viewed on a mobile device.

However, using table responsive display utilities, we can reverse the columns:

```html [2-col-reverse.html]
<table class="w-full">
  <tr>
    <th class="w-1/2 sm:table-footer-group font-sans font-normal text-left">
      <div class="sm:w-full sm:px-8">
        <h2 class="text-2xl font-hairline text-black">Left text</h2>
        <p class="text-slate-700 m-0">Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore aspernatur.</p>
      </div>
    </th>
    <th class="w-1/2 sm:table-header-group font-normal text-left">
      <div class="sm:w-full sm:px-8">
        <img src="https://picsum.photos/600/600" alt="Unsplash photo">
      </div>
    </th>
  </tr>
</table>
```

It's done in 2 simple steps:

1. Use the responsive `table-{...}-group` utilities on each column, to reverse column order on small screens
2. Wrap the contents of each column in a `<div>` and use it to set padding for mobile. This is required because the CSS properties used to reverse the column order do not support padding

See the [2 col reorder demo on CodePen](https://codepen.io/maizzle/pen/dgpxbB?editors=1000).

## Reorder 3+ cols

In a similar fashion, we can reorder a 3+ column layout:

```html [3-col-reverse.html]
<table class="w-full">
  <tr class="sm:w-full sm:table">
    <th class="w-1/3 sm:table-footer-group">
      <div class="sm:px-2">
        <h2 class="text-xl font-hairline">Last on mobile</h2>
      </div>
    </th>
    <th class="w-1/3 sm:table-footer-group">
      <div class="sm:px-2">
        <h2 class="text-xl font-hairline">Second on mobile</h2>
      </div>
    </th>
    <th class="w-1/3 sm:table-caption sm:w-full">
      <div class="sm:px-2">
        <h2 class="text-xl font-hairline">First on mobile</h2>
      </div>
    </th>
  </tr>
</table>
```

This only needed a couple of extra steps:

- Make the `<tr>` full width on mobile, by adding `sm:w-full` and `sm:table`
- Use `sm:table-caption` and `sm:w-full` on the column that you want to display first on mobile

See the [3+ col reorder demo on CodePen](https://codepen.io/maizzle/pen/dgpxLp?editors=1000).

</document_content>
</document>
<document index="54">
<source>/Users/josh/Documents/GitHub/maizzle/maizzle.com/content/docs/examples/spacers.md</source>
<document_content>
---
title: "Spacers"
description: "Creating reliable vertical spacing for HTML email with Tailwind CSS."
---

# Spacers

Vertical spacing in HTML emails can be tricky, mainly because of inconsistent support for (and rendering of) margin, padding, and `<br>` tags.

Here's how easy it is to create simple yet reliable spacers for your emails, using basic HTML and Tailwind CSS utility classes.

## Div

The simplest vertical spacer for HTML emails:

```html [emails/example.html]
<div class="leading-4" role="separator">&zwj;</div>
```

How it works:

1. `leading-4` sets the spacer's height with `line-height: 16px;`
2. `role="separator"` indicates the element is a divider, improving accessibility
3. `&zwj;` adds 'content' inside, so that the `<div>` can take up height

You may specify a different height for smaller devices by using the `sm:` screen variant:

```html [emails/example.html]
<div class="leading-4 sm:leading-2" role="separator">&zwj;</div>
```

<Alert>Responsive heights will only work in email clients that support `@media` queries.</Alert>

The `div` spacer is also available as a [component](/docs/components/spacer).

## Row

Need to add space between `<table>` rows?

```html [emails/example.html]
<tr role="separator">
  <td class="leading-4">&zwj;</td>
</tr>
```

The default ARIA role for a `<tr>` is `row`, so we use `role="separator"` to indicate that this is a separator, not a table row.

## Semantic

We can use an `<hr>` to create a semantic Spacer.

```html [emails/example.html]
<hr class="border-0 text-white my-4 min-h-full">
```

How it works:

- we hide the line by resetting the border
- we give it the same color as the background of the page (for Outlook)
- we control the height with top and bottom margins

The `min-h-full` class is used for compatibility with Apple email clients.

<Alert type="warning">Do not add `role="separator"` on the `<hr>` spacer, as it is implied.</Alert>

</document_content>
</document>
</documents>
