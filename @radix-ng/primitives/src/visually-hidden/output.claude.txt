<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/visually-hidden/README.md</source>
<document_content>
# @radix-ng/primitives/visually-hidden

Secondary entry point of `@radix-ng/primitives`. It can be used by importing from `@radix-ng/primitives/visually-hidden`.

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/visually-hidden/index.ts</source>
<document_content>
export * from './src/visually-hidden-input-bubble.directive';
export * from './src/visually-hidden-input.directive';
export * from './src/visually-hidden.directive';

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/visually-hidden/ng-package.json</source>
<document_content>
{
    "lib": {
        "entryFile": "index.ts"
    }
}

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/visually-hidden/stories/visually-hidden-input.stories.ts</source>
<document_content>
import { componentWrapperDecorator, Meta, moduleMetadata, StoryObj } from '@storybook/angular';
import { RdxVisuallyHiddenInputBubbleDirective } from '../src/visually-hidden-input-bubble.directive';
import { RdxVisuallyHiddenInputDirective } from '../src/visually-hidden-input.directive';
import { RdxVisuallyHiddenDirective } from '../src/visually-hidden.directive';

const html = String.raw;

export default {
    title: 'Utilities/Visually-HiddenInput',
    decorators: [
        moduleMetadata({
            imports: [
                RdxVisuallyHiddenDirective,
                RdxVisuallyHiddenInputBubbleDirective,
                RdxVisuallyHiddenInputDirective
            ]
        }),
        componentWrapperDecorator(
            (story) =>
                `
                    <div class="radix-themes light light-theme"
                      data-radius="medium"
                      data-scaling="100%">${story}</div>`
        )
    ]
} as Meta;

type Story = StoryObj;

export const Default: Story = {
    render: (args) => ({
        props: args,
        template: html`
            <div>
                <div>
                    <label class="Label" for="visibleInput">Visible Input:</label>
                    <input class="Input" id="visibleInput" type="text" name="visibleInput" value="Visible Input" />
                </div>

                <div>
                    <label for="hiddenInput">Hidden Input:</label>
                    <input
                        rdxVisuallyHiddenInput
                        [feature]="'fully-hidden'"
                        [name]="'hiddenInput'"
                        [value]="'Hidden Value'"
                        [checked]="true"
                        [required]="true"
                        [disabled]="false"
                    />
                </div>

                <input
                    rdxVisuallyHiddenInput
                    [feature]="'fully-hidden'"
                    [name]="'testInput'"
                    [value]="{ key1: 'value1', key2: 'value2' }"
                    [checked]="true"
                    [required]="true"
                />
                <p>The input above is visually hidden but still interactable.</p>
            </div>

            <style>
                p {
                    color: white;
                    font-size: 15px;
                }

                input {
                    all: unset;
                }

                .Input {
                    width: 200px;
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    border-radius: 4px;
                    padding: 0 10px;
                    margin-left: 10px;
                    height: 35px;
                    font-size: 15px;
                    line-height: 1;
                    color: white;
                    background-color: var(--black-a5);
                    box-shadow: 0 0 0 1px var(--black-a9);
                }

                .Input:focus {
                    box-shadow: 0 0 0 2px black;
                }
                .Input::selection {
                    background-color: var(--black-a9);
                    color: white;
                }

                label {
                    color: white;
                    font-size: 15px;
                    line-height: 35px;
                    font-weight: 500;
                }
            </style>
        `
    })
};

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/visually-hidden/stories/visually-hidden.docs.mdx</source>
<document_content>
import { Meta } from '@storybook/blocks';

<Meta title="Utilities/Visually Hidden" />

# Visually Hidden

#### Hides content from the screen in an accessible way.

#### You can use also [a11y](https://material.angular.io/cdk/a11y), they also have an auxiliary class for this.

## Features

- âœ… Visually hides content while preserving it for assistive technology.

## Import

Screen readers and other assistive technology skip elements that have display: none, visibility: hidden, opacity: 0, height: 0, or width: 0. In some cases you may need to visually hide an element while keeping it available to assistive technology.
You can do so using the a11y-visually-hidden Sass mixin, which emits the .cdk-visually-hidden CSS class:

```scss
@use '@angular/cdk';

@include cdk.a11y-visually-hidden();
```

## Examples

```html
<div class="custom-checkbox">
  <input class="cdk-visually-hidden" type="checkbox" />
</div>
```

## Accessibility

This is useful in certain scenarios as an alternative to traditional labelling with aria-label or aria-labelledby.

</document_content>
</document>
<document index="6">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/visually-hidden/src/visually-hidden-input-bubble.directive.ts</source>
<document_content>
import { Directive, effect, ElementRef, inject, input, linkedSignal } from '@angular/core';
import { RdxVisuallyHiddenDirective } from './visually-hidden.directive';

/**
 *
 */
@Directive({
    selector: 'input[rdxVisuallyHiddenInputBubble]',
    hostDirectives: [{ directive: RdxVisuallyHiddenDirective, inputs: ['feature: feature'] }],
    host: {
        '[attr.name]': 'name()',
        '[attr.required]': 'required()',
        '[attr.disabled]': 'disabled()',
        '[attr.checked]': 'checked()',
        '[value]': 'value()',
        '(change)': 'onChange()'
    }
})
export class RdxVisuallyHiddenInputBubbleDirective<T> {
    private readonly elementRef = inject(ElementRef);

    readonly name = input<string>('');
    readonly value = input<T | string | null>();
    readonly checked = input<boolean | undefined>(undefined);
    readonly required = input<boolean | undefined>(undefined);
    readonly disabled = input<boolean | undefined>(undefined);
    readonly feature = input<string>('fully-hidden');

    protected readonly valueEffect = linkedSignal({
        source: this.value,
        computation: (value: NoInfer<string | T | null | undefined>) => value
    });

    constructor() {
        effect(() => {
            this.updateInputValue();
        });
    }

    updateValue(value: string) {
        this.valueEffect.set(value);
    }

    protected onChange() {
        this.updateInputValue();
    }

    private updateInputValue() {
        let valueChanged = false;
        let checkedChanged = false;

        // Check if the value has changed before applying the update
        const currentValue = this.inputElement.value;
        const newValue = String(this.value());

        if (currentValue !== newValue) {
            this.inputElement.value = newValue;
            valueChanged = true;
        }

        if (this.inputElement.type === 'checkbox' || this.inputElement.type === 'radio') {
            const currentChecked = this.inputElement.checked;
            const newChecked = !!this.checked();

            if (currentChecked !== newChecked) {
                this.inputElement.checked = newChecked;
                checkedChanged = true;
            }
        }

        if (valueChanged || checkedChanged) {
            this.dispatchInputEvents();
        }
    }

    private get inputElement() {
        return this.elementRef.nativeElement;
    }

    private dispatchInputEvents() {
        const inputEvent = new Event('input', { bubbles: true });
        const changeEvent = new Event('change', { bubbles: true });

        this.inputElement.dispatchEvent(inputEvent);
        this.inputElement.dispatchEvent(changeEvent);
    }
}

</document_content>
</document>
<document index="7">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/visually-hidden/src/visually-hidden-input.directive.ts</source>
<document_content>
// Implementation from https://github.com/unovue/radix-vue

import { Directive, ElementRef, OnInit, computed, inject, input } from '@angular/core';
import { RdxVisuallyHiddenInputBubbleDirective } from './visually-hidden-input-bubble.directive';

@Directive({
    selector: '[rdxVisuallyHiddenInput]',
    hostDirectives: [
        {
            directive: RdxVisuallyHiddenInputBubbleDirective,
            inputs: [
                'feature: feature',
                'name: name ',
                'value: value',
                'checked: checked',
                'disabled: disabled',
                'required: required'
            ]
        }
    ]
})
export class RdxVisuallyHiddenInputDirective<T> implements OnInit {
    private readonly elementRef = inject(ElementRef);

    readonly name = input<string>('');
    readonly value = input<T | string>();
    readonly checked = input<boolean | undefined>(undefined);
    readonly required = input<boolean | undefined>(undefined);
    readonly disabled = input<boolean | undefined>(undefined);
    readonly feature = input<'focusable' | 'fully-hidden'>('fully-hidden');

    readonly parsedValue = computed<{ name: string; value: any }[]>(() => {
        const value = this.value();
        const name = this.name();

        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
            return [{ name, value }];
        }

        if (Array.isArray(value)) {
            return value.flatMap((obj, index) => {
                if (typeof obj === 'object') {
                    return Object.entries(obj).map(([key, val]) => ({
                        name: `[${name}][${index}][${key}]`,
                        value: val
                    }));
                } else {
                    return { name: `[${name}][${index}]`, value: obj };
                }
            });
        }

        if (value !== null && typeof value === 'object') {
            return Object.entries(value).map(([key, val]) => ({
                name: `[${name}][${key}]`,
                value: val
            }));
        }

        return [];
    });

    ngOnInit() {
        const parsedValues = this.parsedValue();

        parsedValues.forEach((parsed) => {
            const inputElement = this.elementRef.nativeElement;
            inputElement.setAttribute('name', parsed.name);
            inputElement.setAttribute('value', parsed.value);
        });
    }
}

</document_content>
</document>
<document index="8">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/visually-hidden/src/visually-hidden.directive.ts</source>
<document_content>
import { Directive, input, linkedSignal } from '@angular/core';

/**
 *
 * <span rdxVisuallyHidden [feature]="'fully-hidden'">
 *   <ng-content></ng-content>
 * </span>
 *
 * <button (click)="directiveInstance.feature.set('focusable')">Make Focusable</button>
 * <button (click)="directiveInstance.feature.set('fully-hidden')">Hide</button>
 */
@Directive({
    selector: '[rdxVisuallyHidden]',
    host: {
        '[attr.aria-hidden]': 'feature() === "focusable" ? "true" : undefined',
        '[hidden]': 'feature() === "fully-hidden" ? true : undefined',
        '[attr.tabindex]': 'feature() === "fully-hidden" ? "-1" : undefined',
        '[style.position]': '"absolute"',
        '[style.border]': '"0"',
        '[style.display]': 'feature() === "focusable" ? "inline-block" : "none"',
        '[style.width]': '"1px"',
        '[style.height]': '"1px"',
        '[style.padding]': '"0"',
        '[style.margin]': '"-1px"',
        '[style.overflow]': '"hidden"',
        '[style.clip]': '"rect(0, 0, 0, 0)"',
        '[style.clipPath]': '"inset(50%)"',
        '[style.white-space]': '"nowrap"',
        '[style.word-wrap]': '"normal"'
    }
})
export class RdxVisuallyHiddenDirective {
    readonly feature = input<'focusable' | 'fully-hidden'>('focusable');

    protected readonly featureEffect = linkedSignal({
        source: this.feature,
        computation: (feature: 'focusable' | 'fully-hidden') => feature
    });

    updateFeature(feature: 'focusable' | 'fully-hidden') {
        this.featureEffect.set(feature);
    }
}

</document_content>
</document>
</documents>
