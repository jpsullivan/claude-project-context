<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-core/compat.ts</source>
<document_content>
import { convertNxGenerator } from '@nx/devkit';
import { migrateCoreGenerator } from './generator';

export default convertNxGenerator(migrateCoreGenerator);

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-core/generator.spec.ts</source>
<document_content>
import { applicationGenerator, E2eTestRunner, UnitTestRunner } from '@nx/angular/generators';
import { Tree } from '@nx/devkit';
import { createTreeWithEmptyWorkspace } from '@nx/devkit/testing';
import { migrateCoreGenerator } from './generator';
import { MigrateCoreGeneratorSchema } from './schema';

// patch some imports to avoid running the actual code
jest.mock('enquirer');
jest.mock('@nx/devkit', () => {
	const original = jest.requireActual('@nx/devkit');
	return {
		...original,
		ensurePackage: (pkg: string) => jest.requireActual(pkg),
		createProjectGraphAsync: jest.fn().mockResolvedValue({
			nodes: {},
			dependencies: {},
		}),
	};
});

describe('migrate-core generator', () => {
	let tree: Tree;
	const options: MigrateCoreGeneratorSchema = { skipFormat: true };

	beforeEach(async () => {
		tree = createTreeWithEmptyWorkspace();

		await applicationGenerator(tree, {
			name: 'app',
			directory: 'app',
			skipFormat: true,
			e2eTestRunner: E2eTestRunner.None,
			unitTestRunner: UnitTestRunner.None,
			skipPackageJson: true,
			skipTests: true,
		});
	});

	it('should update the import statements', async () => {
		tree.write(
			'app/src/app/app.component.ts',
			`
			import { Component } from '@angular/core';
			import { hlm } from '@spartan-ng/ui-core';

			@Component({
				template: \`
				\`
			})
			export class AppComponent {}
			`,
		);

		await migrateCoreGenerator(tree, options);

		const content = tree.read('app/src/app/app.component.ts', 'utf-8');
		expect(content).toContain(`import { hlm } from '@spartan-ng/brain/core';`);
	});

	it('should update the import statements with multiple imports', async () => {
		tree.write(
			'app/src/app/app.component.ts',
			`
			import { Component } from '@angular/core';
			import { hlm, brnZoneFull, createInjectionToken, ExposesState } from '@spartan-ng/ui-core';

			@Component({
				template: \`
				\`
			})
			export class AppComponent {}
			`,
		);

		await migrateCoreGenerator(tree, options);

		const content = tree.read('app/src/app/app.component.ts', 'utf-8');
		expect(content).toContain(
			`import { hlm, brnZoneFull, createInjectionToken, ExposesState } from '@spartan-ng/brain/core';`,
		);
	});

	it('should import type only imports', async () => {
		tree.write(
			'app/src/app/app.component.ts',
			`
			import { Component } from '@angular/core';
			import type { hlm } from '@spartan-ng/ui-core';

			@Component({
				template: \`
				\`
			})
			export class AppComponent {}
			`,
		);

		await migrateCoreGenerator(tree, options);

		const content = tree.read('app/src/app/app.component.ts', 'utf-8');
		expect(content).toContain(`import type { hlm } from '@spartan-ng/brain/core';`);
	});

	it('should update default imports', async () => {
		tree.write(
			'app/src/app/app.component.ts',
			`
			import { Component } from '@angular/core';
			import hlm from '@spartan-ng/ui-core';

			@Component({
				template: \`
				\`
			})
			export class AppComponent {}
			`,
		);

		await migrateCoreGenerator(tree, options);

		const content = tree.read('app/src/app/app.component.ts', 'utf-8');
		expect(content).toContain(`import hlm from '@spartan-ng/brain/core';`);
	});

	it('should update star imports', async () => {
		tree.write(
			'app/src/app/app.component.ts',
			`
			import { Component } from '@angular/core';
			import * as hlm from '@spartan-ng/ui-core';

			@Component({
				template: \`
				\`
			})
			export class AppComponent {}
			`,
		);

		await migrateCoreGenerator(tree, options);

		const content = tree.read('app/src/app/app.component.ts', 'utf-8');
		expect(content).toContain(`import * as hlm from '@spartan-ng/brain/core';`);
	});

	it('should update exports', async () => {
		tree.write(
			'app/src/app/app.component.ts',
			`
			export { hlm } from '@spartan-ng/ui-core';
			`,
		);
		await migrateCoreGenerator(tree, options);

		const content = tree.read('app/src/app/app.component.ts', 'utf-8');
		expect(content).toContain(`export { hlm } from '@spartan-ng/brain/core';`);
	});

	it('should update star exports', async () => {
		tree.write(
			'app/src/app/app.component.ts',
			`
			export * from '@spartan-ng/ui-core';
			`,
		);
		await migrateCoreGenerator(tree, options);

		const content = tree.read('app/src/app/app.component.ts', 'utf-8');
		expect(content).toContain(`export * from '@spartan-ng/brain/core';`);
	});

	it('should update the tailwind config file', async () => {
		tree.write(
			'app/tailwind.config.js',
			`
/** @type {import('tailwindcss').Config} */
module.exports = {
	presets: [require('@spartan-ng/ui-core/hlm-tailwind-preset')],
	content: [
		'./src/**/*.{html,ts}',
	],
	theme: {
		extend: {},
	},
	plugins: [],
};
			`,
		);

		await migrateCoreGenerator(tree, options);

		const content = tree.read('app/tailwind.config.js', 'utf-8');
		expect(content).toContain(`/** @type {import('tailwindcss').Config} */
module.exports = {
	presets: [require('@spartan-ng/brain/hlm-tailwind-preset')],
	content: [
		'./src/**/*.{html,ts}',
	],
	theme: {
		extend: {},
	},
	plugins: [],
};`);
	});
});

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-core/generator.ts</source>
<document_content>
import { formatFiles, Tree } from '@nx/devkit';
import { visitFiles } from '../../utils/visit-files';
import { MigrateCoreGeneratorSchema } from './schema';

export async function migrateCoreGenerator(tree: Tree, options: MigrateCoreGeneratorSchema) {
	updateImports(tree);
	updateTailwindConfig(tree);

	if (!options.skipFormat) {
		await formatFiles(tree);
	}
}

/**
 * Update imports from @spartan-ng/ui-core to @spartan-ng/brain/core
 */
function updateImports(tree: Tree) {
	visitFiles(tree, '/', (path) => {
		const content = tree.read(path).toString('utf-8');

		if (content.includes('@spartan-ng/ui-core')) {
			const updatedCode = content
				// Handle `import { ... } from '@spartan-ng/ui-core';`
				.replace(/import\s+\{[^}]*\}\s+from\s+['"]@spartan-ng\/ui-core['"];/g, (match) =>
					match.replace('@spartan-ng/ui-core', '@spartan-ng/brain/core'),
				)
				// Handle `import type { ... } from '@spartan-ng/ui-core';`
				.replace(/import\s+type\s+\{[^}]*\}\s+from\s+['"]@spartan-ng\/ui-core['"];/g, (match) =>
					match.replace('@spartan-ng/ui-core', '@spartan-ng/brain/core'),
				)
				// Handle `export { ... } from '@spartan-ng/ui-core';`
				.replace(/export\s+\{[^}]*\}\s+from\s+['"]@spartan-ng\/ui-core['"];/g, (match) =>
					match.replace('@spartan-ng/ui-core', '@spartan-ng/brain/core'),
				)
				// Handle `import * as name from '@spartan-ng/ui-core';`
				.replace(/import\s+\*\s+as\s+\w+\s+from\s+['"]@spartan-ng\/ui-core['"];/g, (match) =>
					match.replace('@spartan-ng/ui-core', '@spartan-ng/brain/core'),
				)
				// Handle `import defaultExport from '@spartan-ng/ui-core';`
				.replace(/import\s+\w+\s+from\s+['"]@spartan-ng\/ui-core['"];/g, (match) =>
					match.replace('@spartan-ng/ui-core', '@spartan-ng/brain/core'),
				)
				// Handle `export * from '@spartan-ng/ui-core';`
				.replace(/export\s+\*\s+from\s+['"]@spartan-ng\/ui-core['"];/g, (match) =>
					match.replace('@spartan-ng/ui-core', '@spartan-ng/brain/core'),
				);

			tree.write(path, updatedCode);
		}
	});
}

/**
 * Update the tailwind config file
 */
function updateTailwindConfig(tree: Tree) {
	visitFiles(tree, '/', (path) => {
		// technically the tailwind config file could be anywhere and named anything
		// but all we need to do is a simple string replace '@spartan-ng/ui-core/hlm-tailwind-preset' with '@spartan-ng/brain/hlm-tailwind-preset'
		const content = tree.read(path).toString('utf-8');

		if (content.includes('@spartan-ng/ui-core/hlm-tailwind-preset')) {
			const updatedCode = content.replace(
				/@spartan-ng\/ui-core\/hlm-tailwind-preset/g,
				'@spartan-ng/brain/hlm-tailwind-preset',
			);

			tree.write(path, updatedCode);
		}
	});
}

export default migrateCoreGenerator;

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-core/schema.d.ts</source>
<document_content>
export interface MigrateCoreGeneratorSchema {
	skipFormat?: boolean;
}

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/migrate-core/schema.json</source>
<document_content>
{
	"$schema": "http://json-schema.org/draft-07/schema",
	"$id": "MigrateCore",
	"title": "",
	"type": "object",
	"properties": {
		"skipFormat": {
			"type": "boolean",
			"default": false,
			"description": "Skip formatting files"
		}
	},
	"required": []
}

</document_content>
</document>
</documents>
