<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/healthcheck/healthchecks/brain-imports.ts</source>
<document_content>
import { visitNotIgnoredFiles } from '@nx/devkit';
import { migrateBrainImportsGenerator } from '../../migrate-brain-imports/generator';
import importMap from '../../migrate-brain-imports/import-map';
import { Healthcheck, HealthcheckSeverity } from '../healthchecks';

export const brainImportsHealthcheck: Healthcheck = {
	name: 'Brain imports',
	async detect(tree, failure) {
		visitNotIgnoredFiles(tree, '/', (file) => {
			// if the file is a .ts or .json file, check for brain imports/packages
			if (!file.endsWith('.ts') || file.endsWith('.json')) {
				return;
			}

			const contents = tree.read(file, 'utf-8');

			if (!contents) {
				return;
			}

			for (const [importPath, brainPackage] of Object.entries(importMap)) {
				if (contents.includes(importPath)) {
					failure(
						`The import ${importPath} is deprecated. Please use the ${brainPackage} package instead.`,
						HealthcheckSeverity.Error,
						true,
					);
				}
			}
		});
	},
	fix: async (tree) => {
		await migrateBrainImportsGenerator(tree, { skipFormat: true });
		return true;
	},
	prompt: 'Would you like to migrate brain imports?',
};

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/healthcheck/healthchecks/brn-radio.ts</source>
<document_content>
import { visitNotIgnoredFiles } from '@nx/devkit';
import { migrateRadioGenerator } from '../../migrate-radio/generator';
import { Healthcheck, HealthcheckSeverity } from '../healthchecks';

export const brainRadioHealthcheck: Healthcheck = {
	name: 'Brain Radio',
	async detect(tree, failure) {
		visitNotIgnoredFiles(tree, '/', (file) => {
			// if the file is a .ts or .htlm file, check for brain radio
			if (!file.endsWith('.ts') && !file.endsWith('.html')) {
				return;
			}

			const contents = tree.read(file, 'utf-8');

			if (!contents) {
				return;
			}

			if (contents.includes('<brn-radio')) {
				failure(
					`The <brn-radio> component is deprecated. Please use the <hlm-radio> instead.`,
					HealthcheckSeverity.Error,
					true,
				);
			}
		});
	},
	fix: async (tree) => {
		await migrateRadioGenerator(tree, { skipFormat: true });
		return true;
	},
	prompt: 'Would you like to migrate brain radio?',
};

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/healthcheck/healthchecks/brn-toggle-group.ts</source>
<document_content>
import { visitNotIgnoredFiles } from '@nx/devkit';
import { migrateToggleGroupGenerator } from '../../migrate-toggle-group/generator';
import { Healthcheck, HealthcheckSeverity } from '../healthchecks';

export const brainToggleHealthcheck: Healthcheck = {
	name: 'Brain Toggle Group',
	async detect(tree, failure) {
		visitNotIgnoredFiles(tree, '/', (file) => {
			// if the file is a .ts or .htlm file, check for helm icons
			if (!file.endsWith('.ts') && !file.endsWith('.html')) {
				return;
			}

			const contents = tree.read(file, 'utf-8');

			if (!contents) {
				return;
			}

			if (
				contents.includes("BrnToggleGroupModule } from '@spartan-ng/brain/toggle'") ||
				contents.includes("import { BrnToggleGroupModule } from '@spartan-ng/brain/toggle'") ||
				(contents.includes('BrnToggleGroupModule') && contents.includes('@spartan-ng/brain/toggle')) ||
				contents.includes("HlmToggleGroupModule } from '@spartan-ng/ui-toggle-helm'") ||
				(contents.includes('HlmToggleGroupModule') && contents.includes('@spartan-ng/ui-toggle-helm'))
			) {
				failure(
					'The <brn-toggle-group> component from the toggle brain package is deprecated. Please use the <brn-toggle-group> from the toggle-group package instead.',
					HealthcheckSeverity.Error,
					true,
				);
			}
		});
	},
	fix: async (tree) => {
		await migrateToggleGroupGenerator(tree, { skipFormat: true });
		return true;
	},
	prompt: 'Would you like to migrate toggle-group?',
};

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/healthcheck/healthchecks/core-imports.ts</source>
<document_content>
import { visitNotIgnoredFiles } from '@nx/devkit';
import { migrateCoreGenerator } from '../../migrate-core/generator';
import { Healthcheck, HealthcheckSeverity } from '../healthchecks';

export const coreImportsHealthcheck: Healthcheck = {
	name: 'Core imports',
	async detect(tree, failure) {
		visitNotIgnoredFiles(tree, '/', (file) => {
			// if the file is a .ts file, check for core imports
			if (!file.endsWith('.ts')) {
				return;
			}

			const contents = tree.read(file, 'utf-8');

			if (!contents) {
				return;
			}

			if (contents.includes('@spartan-ng/ui-core')) {
				failure(
					`The import @spartan-ng/ui-core is deprecated. Please use the @spartan-ng/brain/core package instead.`,
					HealthcheckSeverity.Error,
					true,
				);
			}
		});
	},
	fix: async (tree) => {
		await migrateCoreGenerator(tree, { skipFormat: true });
		return true;
	},
	prompt: 'Would you like to migrate core imports?',
};

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/healthcheck/healthchecks/hlm-icon.ts</source>
<document_content>
import { visitNotIgnoredFiles } from '@nx/devkit';
import { migrateIconGenerator } from '../../migrate-icon/generator';
import { Healthcheck, HealthcheckSeverity } from '../healthchecks';

export const helmIconHealthcheck: Healthcheck = {
	name: 'Helm Icons',
	async detect(tree, failure) {
		visitNotIgnoredFiles(tree, '/', (file) => {
			// if the file is a .ts or .htlm file, check for helm icons
			if (!file.endsWith('.ts') && !file.endsWith('.html')) {
				return;
			}

			const contents = tree.read(file, 'utf-8');

			if (!contents) {
				return;
			}

			if (contents.includes('<hlm-icon')) {
				failure(
					`The <hlm-icon> component is deprecated. Please use the <ng-icon hlm> instead.`,
					HealthcheckSeverity.Error,
					true,
				);
			}
		});
	},
	fix: async (tree) => {
		await migrateIconGenerator(tree, { skipFormat: true });
		return true;
	},
	prompt: 'Would you like to migrate helm icons?',
};

</document_content>
</document>
<document index="6">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/healthcheck/healthchecks/hlm-scroll-area.ts</source>
<document_content>
import { visitNotIgnoredFiles } from '@nx/devkit';
import { migrateScrollAreaGenerator } from '../../migrate-scroll-area/generator';
import { Healthcheck, HealthcheckSeverity } from '../healthchecks';

export const scrollAreaHealthcheck: Healthcheck = {
	name: 'Helm Scroll Area',
	async detect(tree, failure) {
		visitNotIgnoredFiles(tree, '/', (file) => {
			// if the file is a .ts or .htlm file, check for helm icons
			if (!file.endsWith('.ts') && !file.endsWith('.html')) {
				return;
			}

			const contents = tree.read(file, 'utf-8');

			if (!contents) {
				return;
			}

			if (contents.includes('<hlm-scroll-area')) {
				failure(
					`The <hlm-scroll-area> component is deprecated. Please use the <ng-scrollbar hlm> instead.`,
					HealthcheckSeverity.Error,
					true,
				);
			}
		});
	},
	fix: async (tree) => {
		await migrateScrollAreaGenerator(tree, { skipFormat: true });
		return true;
	},
	prompt: 'Would you like to migrate helm scroll areas?',
};

</document_content>
</document>
<document index="7">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/healthcheck/healthchecks/hlm-select.ts</source>
<document_content>
import { visitNotIgnoredFiles } from '@nx/devkit';
import { hasHelmClasses } from '../../../utils/hlm-class';
import migrateSelectGenerator from '../../migrate-select/generator';
import { Healthcheck, HealthcheckSeverity } from '../healthchecks';

export const selectHealthcheck: Healthcheck = {
	name: 'Helm Select',
	async detect(tree, failure) {
		visitNotIgnoredFiles(tree, '/', (file) => {
			// if the file is a .ts or .htlm file, check for helm icons
			if (!file.endsWith('.ts') && !file.endsWith('.html')) {
				return;
			}

			const contents = tree.read(file, 'utf-8');

			if (!contents) {
				return;
			}

			// check if the legacy openedChange event is being used
			if (/<(brn-select|hlm-select)[^>]*\(\s*openedChange\s*\)=/g.test(contents)) {
				failure('Select is using the renamed openedChange event.', HealthcheckSeverity.Error, true);
			}

			// check if the legacy focus classes are being used
			if (
				hasHelmClasses(tree, file, {
					component: 'HlmSelectOptionComponent',
					classes: ['focus:bg-accent', 'focus:text-accent-foreground'],
				})
			) {
				failure('Select option is using the legacy focus classes.', HealthcheckSeverity.Error, true);
			}
		});
	},
	fix: async (tree) => {
		await migrateSelectGenerator(tree, { skipFormat: true });
		return true;
	},
	prompt: 'Would you like to migrate selects?',
};

</document_content>
</document>
<document index="8">
<source>/Users/josh/Documents/GitHub/spartan-ng/spartan/libs/cli/src/generators/healthcheck/healthchecks/version.ts</source>
<document_content>
import { readJson } from '@nx/devkit';
import { PackageJson } from 'nx/src/utils/package-json';
import * as semver from 'semver';
import { Healthcheck, HealthcheckSeverity } from '../healthchecks';

export const versionHealthcheck: Healthcheck = {
	name: 'Spartan - Dependency Check',
	async detect(tree, failure, skip) {
		// If there is no package.json, skip this healthcheck
		if (!tree.exists('package.json')) {
			skip('No package.json found.');
			return;
		}

		// read the package.json
		const packageJson = readJson(tree, 'package.json');

		// merge the dependencies and devDependencies
		const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };

		const dependenciesToCheck = ['@spartan-ng/brain', '@spartan-ng/cli'];

		for (const dep of dependenciesToCheck) {
			if (!dependencies[dep]) {
				failure(`The dependency ${dep} is not installed.`, HealthcheckSeverity.Error, true);
				continue;
			}

			const installedVersion = dependencies[dep];

			// check if the installed version is the latest version
			const request = await fetch(`https://registry.npmjs.org/${dep}/latest`);

			if (!request.ok) {
				failure(`Failed to fetch metadata for ${dep}.`, HealthcheckSeverity.Error, false);
				continue;
			}

			const metadata = (await request.json()) as PackageJson;

			if (!semver.satisfies(metadata.version, installedVersion)) {
				failure(
					`The installed version of ${dep} is not the latest version. The latest version is ${metadata.version}.`,
					HealthcheckSeverity.Warning,
					true,
				);
				continue;
			}
		}
	},
	fix: async (tree) => {
		const packageJson = readJson(tree, 'package.json');
		const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
		const dependenciesToCheck = ['@spartan-ng/brain', '@spartan-ng/cli'];

		for (const dep of dependenciesToCheck) {
			if (!dependencies[dep]) {
				return false;
			}

			const request = await fetch(`https://registry.npmjs.org/${dep}/latest`);

			if (!request.ok) {
				return false;
			}

			const metadata = (await request.json()) as PackageJson;

			// update the dependency to the latest version in the respective section
			if (packageJson.dependencies[dep]) {
				packageJson.dependencies[dep] = `^${metadata.version}`;
			} else {
				packageJson.devDependencies[dep] = `^${metadata.version}`;
			}
		}

		tree.write('package.json', JSON.stringify(packageJson, null, 2));

		return true;
	},
	prompt: 'Would you like to update to the latest versions of the dependencies?',
};

</document_content>
</document>
</documents>
