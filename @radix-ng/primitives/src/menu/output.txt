<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/README.md</source>
<document_content>
# @radix-ng/primitives/menu

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/index.ts</source>
<document_content>
import { NgModule } from '@angular/core';
import { RdxMenuContentDirective } from './src/menu-content.directive';
import { RdxMenuDirective } from './src/menu-directive';
import { RdxMenuGroupDirective } from './src/menu-group.directive';
import { RdxMenuItemCheckboxDirective } from './src/menu-item-checkbox.directive';
import { RdxMenuItemIndicatorDirective } from './src/menu-item-indicator.directive';
import { RdxMenuItemRadioDirective } from './src/menu-item-radio.directive';
import { RdxMenuItemDirective } from './src/menu-item.directive';
import { RdxMenuLabelDirective } from './src/menu-label.directive';
import { RdxMenuRadioGroupDirective } from './src/menu-radio-group.directive';
import { RdxMenuSeparatorDirective } from './src/menu-separator.directive';
import { RdxMenuTriggerDirective } from './src/menu-trigger.directive';

export * from './src/menu-content.directive';
export * from './src/menu-directive';
export * from './src/menu-group.directive';
export * from './src/menu-item-checkbox.directive';
export * from './src/menu-item-indicator.directive';
export * from './src/menu-item-radio.directive';
export * from './src/menu-item.directive';
export * from './src/menu-label.directive';
export * from './src/menu-radio-group.directive';
export * from './src/menu-separator.directive';
export * from './src/menu-trigger.directive';

export type { RdxMenuAlign, RdxMenuSide } from './src/menu-trigger.directive';

const menuImports = [
    RdxMenuDirective,
    RdxMenuItemCheckboxDirective,
    RdxMenuItemRadioDirective,
    RdxMenuItemIndicatorDirective,
    RdxMenuTriggerDirective,
    RdxMenuGroupDirective,
    RdxMenuRadioGroupDirective,
    RdxMenuItemDirective,
    RdxMenuSeparatorDirective,
    RdxMenuContentDirective,
    RdxMenuLabelDirective
];

@NgModule({
    imports: [...menuImports],
    exports: [...menuImports]
})
export class RdxMenuModule {}

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/ng-package.json</source>
<document_content>
{
    "lib": {
        "entryFile": "index.ts"
    }
}

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/stories/menu.stories.ts</source>
<document_content>
import { componentWrapperDecorator, Meta, moduleMetadata, StoryObj } from '@storybook/angular';
import { Check, Dot, LucideAngularModule } from 'lucide-angular';
import { RdxMenuModule } from '../index';
import { MenuCheckboxItemsStory } from './components/menu-checkbox-items';
import { MenuRadioItemsStory } from './components/menu-radio-items';
import { MenuWithLabelsItemsStory } from './components/menu-with-labels-items';
import { MenuWithSubMenuStory } from './components/menu-with-sub-menu';

const html = String.raw;

export default {
    title: 'Utilities/Menu',
    decorators: [
        moduleMetadata({
            imports: [
                RdxMenuModule,
                LucideAngularModule,
                MenuRadioItemsStory,
                MenuCheckboxItemsStory,
                MenuWithLabelsItemsStory,
                MenuWithSubMenuStory,
                LucideAngularModule.pick({ Check, Dot })
            ]
        }),
        componentWrapperDecorator(
            (story) => html`
                <div
                    class="radix-themes light light-theme radix-themes-default-fonts rt-Flex rt-r-ai-start rt-r-jc-center rt-r-position-relative"
                    data-accent-color="indigo"
                    data-radius="medium"
                    data-scaling="100%"
                >
                    ${story}

                    <style>
                        /* reset */
                        button {
                            all: unset;
                        }

                        .MenuRoot {
                            display: flex;
                            background-color: white;
                            padding: 3px;
                            border-radius: 6px;
                            box-shadow: 0 2px 10px var(--black-a7);
                        }

                        .MenuTrigger {
                            padding: 8px 12px;
                            outline: none;
                            user-select: none;
                            font-weight: 500;
                            line-height: 1;
                            border-radius: 4px;
                            color: var(--violet-11);
                            font-size: 13px;
                            display: flex;
                            align-items: center;
                            justify-content: space-between;
                            gap: 2px;
                        }

                        .MenuTrigger[data-highlighted],
                        .MenuTrigger[data-state='open'] {
                            background-color: var(--violet-4);
                        }

                        .MenuContent,
                        .MenuSubContent {
                            min-width: 220px;
                            background-color: white;
                            border-radius: 6px;
                            padding: 5px;
                            box-shadow:
                                0px 10px 38px -10px rgba(22, 23, 24, 0.35),
                                0px 10px 20px -15px rgba(22, 23, 24, 0.2);
                            animation-duration: 400ms;
                            animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
                            will-change: transform, opacity;
                        }

                        .MenuItem,
                        .MenuSubTrigger,
                        .MenuCheckboxItem,
                        .MenuRadioItem {
                            all: unset;
                            font-size: 13px;
                            line-height: 1;
                            color: var(--violet-11);
                            border-radius: 4px;
                            display: flex;
                            align-items: center;
                            height: 25px;
                            padding: 0 10px;
                            position: relative;
                            user-select: none;
                        }

                        .MenuItem.inset,
                        .MenuSubTrigger.inset,
                        .MenuCheckboxItem.inset,
                        .MenuRadioItem.inset {
                            padding-left: 20px;
                        }

                        .MenuItem[data-state='open'],
                        .MenuSubTrigger[data-state='open'] {
                            background-color: var(--violet-4);
                            color: var(--violet-11);
                        }

                        .MenuItem[data-highlighted],
                        .MenuSubTrigger[data-highlighted],
                        .MenuCheckboxItem[data-highlighted],
                        .MenuRadioItem[data-highlighted] {
                            background-image: linear-gradient(135deg, var(--violet-9) 0%, var(--violet-10) 100%);
                            color: var(--violet-1);
                        }

                        .MenuItem[data-disabled],
                        .MenuSubTrigger[data-disabled],
                        .MenuCheckboxItem[data-disabled],
                        .MenuRadioItem[data-disabled] {
                            color: var(--mauve-8);
                            pointer-events: none;
                        }

                        .MenuItemIndicator {
                            position: absolute;
                            left: 0;
                            width: 20px;
                            display: inline-flex;
                            align-items: center;
                            justify-content: center;
                        }

                        .MenuSeparator {
                            height: 1px;
                            background-color: var(--violet-6);
                            margin: 5px;
                        }

                        [data-highlighted] > .RightSlot {
                            color: white;
                        }

                        [data-disabled] > .RightSlot {
                            color: var(--mauve-8);
                        }
                    </style>
                </div>
            `
        )
    ]
} as Meta;

type Story = StoryObj;

export const Default: Story = {
    render: () => ({
        template: html`
            <div class="MenuRoot" RdxMenuRoot>
                <div class="MenuTrigger" RdxMenuItem RdxMenuTrigger [menuTriggerFor]="file">File</div>
            </div>

            <ng-template #file>
                <div class="MenuContent" RdxMenuContent>
                    <div class="MenuItem" RdxMenuItem>Undo</div>
                    <div class="MenuItem" RdxMenuItem>Redo</div>
                    <div class="MenuSeparator" RdxMenuSeparator></div>
                    <div class="MenuItem" RdxMenuItem>Cut</div>
                    <div class="MenuItem" RdxMenuItem>Copy</div>
                    <div class="MenuItem" RdxMenuItem>Paste</div>
                </div>
            </ng-template>
        `
    })
};

export const ItemDisabled: Story = {
    render: () => ({
        template: html`
            <div class="MenuRoot" RdxMenuRoot>
                <div class="MenuTrigger" RdxMenuItem RdxMenuTrigger [menuTriggerFor]="file">File</div>
            </div>

            <ng-template #file>
                <div class="MenuContent" RdxMenuContent>
                    <div class="MenuItem" RdxMenuItem disabled>Undo</div>
                    <div class="MenuItem" RdxMenuItem>Redo</div>
                    <div class="MenuSeparator" RdxMenuSeparator></div>
                    <div class="MenuItem" RdxMenuItem>Cut</div>
                    <div class="MenuItem" RdxMenuItem disabled>Copy</div>
                    <div class="MenuItem" RdxMenuItem>Paste</div>
                </div>
            </ng-template>
        `
    })
};

export const RadioItem: Story = {
    render: () => ({
        template: html`
            <menu-radio-items-story />
        `
    })
};

export const CheckboxItem: Story = {
    render: () => ({
        template: html`
            <menu-checkbox-items-story />
        `
    })
};

export const WithLabels: Story = {
    render: () => ({
        template: html`
            <menu-with-labels-items-story />
        `
    })
};

export const WithSubMenu: Story = {
    render: () => ({
        template: html`
            <menu-with-sub-menu-story />
        `
    })
};

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/stories/components/menu-checkbox-items.ts</source>
<document_content>
import { ChangeDetectionStrategy, Component, signal } from '@angular/core';
import { RdxMenuModule } from '@radix-ng/primitives/menu';
import { LucideAngularModule, X } from 'lucide-angular';

@Component({
    selector: 'menu-checkbox-items-story',
    imports: [RdxMenuModule, LucideAngularModule],
    styleUrl: 'styles.css',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: `
        <div class="MenuRoot" RdxMenuRoot>
            <div
                class="MenuTrigger"
                [menuTriggerFor]="menuGroup"
                align="start"
                sideOffset="5"
                alignOffset="-3"
                RdxMenuItem
                RdxMenuTrigger
            >
                File
            </div>
        </div>

        <ng-template #menuGroup>
            <div class="MenuContent" RdxMenuContent>
                <div
                    class="MenuCheckboxItem inset"
                    [checked]="checkedState()"
                    (menuItemTriggered)="handleSelectAll()"
                    RdxMenuItemCheckbox
                >
                    Select All
                    <lucide-icon class="MenuItemIndicator" [img]="X" RdxMenuItemIndicator size="16" strokeWidth="2" />
                </div>

                <div class="MenuSeparator" RdxMenuSeparator></div>
                @for (item of options(); track $index) {
                    <div
                        class="MenuCheckboxItem inset"
                        [checked]="selectedItems.includes(item)"
                        (menuItemTriggered)="handleSelection(item)"
                        RdxMenuItemCheckbox
                    >
                        {{ item }}
                        <lucide-icon
                            class="MenuItemIndicator"
                            [img]="X"
                            RdxMenuItemIndicator
                            size="16"
                            strokeWidth="2"
                        />
                    </div>
                }
            </div>
        </ng-template>
    `
})
export class MenuCheckboxItemsStory {
    options = signal<string[]>(['Crows', 'Ravens', 'Magpies', 'Jackdaws']);

    selectedItems = this.options();

    handleSelection(option: string) {
        if (this.selectedItems.includes(option)) {
            this.selectedItems = this.selectedItems.filter((el) => el !== option);
        } else {
            this.selectedItems = this.selectedItems.concat(option);
        }
    }

    handleSelectAll() {
        if (this.selectedItems.length === this.options().length) this.selectedItems = [];
        else this.selectedItems = this.options();
    }

    checkedState() {
        return this.selectedItems.length === this.options().length
            ? true
            : this.selectedItems.length > 0
              ? 'indeterminate'
              : false;
    }

    protected readonly X = X;
}

</document_content>
</document>
<document index="6">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/stories/components/menu-radio-items.ts</source>
<document_content>
import { ChangeDetectionStrategy, Component, signal } from '@angular/core';
import { RdxMenuModule } from '@radix-ng/primitives/menu';
import { Dot, LucideAngularModule } from 'lucide-angular';

@Component({
    selector: 'menu-radio-items-story',
    imports: [RdxMenuModule, LucideAngularModule],
    styleUrl: 'styles.css',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: `
        <div class="MenuRoot" RdxMenuRoot>
            <div
                class="MenuTrigger"
                [menuTriggerFor]="menuGroup"
                side="bottom"
                align="start"
                sideOffset="5"
                alignOffset="-3"
                RdxMenuItem
                RdxMenuTrigger
            >
                File
            </div>
        </div>

        <ng-template #menuGroup>
            <div class="MenuContent" RdxMenuContent>
                <div class="MenuItem inset" RdxMenuItem>Minimize window</div>
                <div class="MenuItem inset" RdxMenuItem>Zoom</div>
                <div class="MenuItem inset" RdxMenuItem>Smaller</div>

                <div class="MenuSeparator" RdxMenuSeparator></div>
                <div RdxMenuRadioGroup>
                    @for (item of items(); track $index) {
                        <div
                            class="MenuRadioItem inset"
                            [checked]="item === selectedItem"
                            (menuItemTriggered)="selectedItem = item"
                            RdxMenuItemRadio
                        >
                            {{ item }}
                            <lucide-icon
                                class="MenuItemIndicator"
                                [img]="Dot"
                                RdxMenuItemIndicator
                                size="16"
                                strokeWidth="5"
                            />
                        </div>
                    }
                </div>
            </div>
        </ng-template>
    `
})
export class MenuRadioItemsStory {
    readonly items = signal(['README.md', 'index.js', 'page.css']);

    selectedItem: string | undefined;

    protected readonly Dot = Dot;
}

</document_content>
</document>
<document index="7">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/stories/components/menu-with-labels-items.ts</source>
<document_content>
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { RdxMenuModule } from '@radix-ng/primitives/menu';

@Component({
    selector: 'menu-with-labels-items-story',
    imports: [
        RdxMenuModule
    ],
    styleUrl: 'styles.css',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: `
        <div class="MenuRoot" RdxMenuRoot>
            <div
                class="MenuTrigger"
                [menuTriggerFor]="menuGroup"
                align="center"
                sideOffset="8"
                RdxMenuItem
                RdxMenuTrigger
            >
                File
            </div>
        </div>

        <ng-template #menuGroup>
            <div class="MenuContent" RdxMenuContent>
                <div RdxMenuGroup>
                    @for (foodGroup of foodGroups; track $index) {
                        <div class="MenuLabel" RdxMenuLabel>{{ foodGroup.label }}</div>

                        @for (food of foodGroup.foods; track $index) {
                            <div class="MenuItem" (onSelect)="handleSelect(food.value)" RdxMenuItem>
                                {{ food.label }}
                            </div>
                        }
                        @if ($index < foodGroups.length - 1) {
                            <div class="MenuSeparator" RdxMenuSeparator></div>
                        }
                    }
                </div>
            </div>
        </ng-template>
    `
})
export class MenuWithLabelsItemsStory {
    handleSelect(food: string) {
        console.log(food);
    }

    readonly foodGroups: Array<{
        label?: string;
        foods: Array<{ value: string; label: string; disabled?: boolean }>;
    }> = [
        {
            label: 'Fruits',
            foods: [
                { value: 'apple', label: 'Apple' },
                { value: 'banana', label: 'Banana' },
                { value: 'blueberry', label: 'Blueberry' },
                { value: 'grapes', label: 'Grapes' },
                { value: 'pineapple', label: 'Pineapple' }
            ]
        },
        {
            label: 'Vegetables',
            foods: [
                { value: 'aubergine', label: 'Aubergine' },
                { value: 'broccoli', label: 'Broccoli' },
                { value: 'carrot', label: 'Carrot', disabled: true },
                { value: 'courgette', label: 'Courgette' },
                { value: 'leek', label: 'Leek' }
            ]
        },
        {
            label: 'Meat',
            foods: [
                { value: 'beef', label: 'Beef' },
                { value: 'beef-with-sauce', label: 'Beef with sauce' },
                { value: 'chicken', label: 'Chicken' },
                { value: 'lamb', label: 'Lamb' },
                { value: 'pork', label: 'Pork' }
            ]
        },
        {
            foods: [
                { value: 'candies', label: 'Candies' },
                { value: 'chocolates', label: 'Chocolates' }
            ]
        }
    ];
}

</document_content>
</document>
<document index="8">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/stories/components/menu-with-sub-menu.ts</source>
<document_content>
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { RdxPositionAlign, RdxPositionSide } from '@radix-ng/primitives/core';
import { RdxMenuModule } from '@radix-ng/primitives/menu';
import { ArrowRight, LucideAngularModule } from 'lucide-angular';

@Component({
    selector: 'menu-with-sub-menu-story',
    imports: [RdxMenuModule, LucideAngularModule],
    styleUrl: 'styles.css',
    changeDetection: ChangeDetectionStrategy.OnPush,
    template: `
        <div class="MenuRoot" RdxMenuRoot>
            <div
                class="MenuTrigger"
                [menuTriggerFor]="menuGroup"
                align="start"
                sideOffset="5"
                alignOffset="-3"
                RdxMenuItem
                RdxMenuTrigger
            >
                File
            </div>
        </div>

        <ng-template #menuGroup>
            <div class="MenuContent" RdxMenuContent>
                <div class="MenuItem " RdxMenuItem>Undo</div>
                <div class="MenuItem " RdxMenuItem>Redo</div>
                <div class="MenuSeparator" RdxMenuSeparator></div>

                <div
                    class="MenuItem"
                    [menuTriggerFor]="subMenu"
                    align="start"
                    sideOffset="-20"
                    alignOffset="210"
                    RdxMenuItem
                    RdxMenuTrigger
                >
                    Find
                    <div class="RightSlot"><lucide-angular [img]="ArrowRight" size="16" strokeWidth="2" /></div>
                </div>

                <div class="MenuSeparator" RdxMenuSeparator></div>

                <div class="MenuItem " RdxMenuItem>Cut</div>
                <div class="MenuItem " RdxMenuItem>Copy</div>
                <div class="MenuItem " RdxMenuItem>Paste</div>
            </div>
        </ng-template>

        <ng-template #subMenu>
            <div class="MenuSubContent" RdxMenuContent>
                <div class="MenuItem" RdxMenuItem>Undo</div>
                <div class="MenuItem" RdxMenuItem>Redo</div>
                <div class="MenuSeparator" RdxMenuSeparator></div>
                <div class="MenuItem" RdxMenuItem>Cut</div>
                <div class="MenuItem" RdxMenuItem>Copy</div>
                <div class="MenuItem" RdxMenuItem>Paste</div>
            </div>
        </ng-template>
    `
})
export class MenuWithSubMenuStory {
    protected readonly ArrowRight = ArrowRight;
    protected readonly RdxPositionAlign = RdxPositionAlign;
    protected readonly RdxPositionSide = RdxPositionSide;
}

</document_content>
</document>
<document index="9">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/stories/components/styles.css</source>
<document_content>
/* reset */
:host {
    button {
        all: unset;
    }
}

.MenuRoot {
    display: flex;
    background-color: white;
    padding: 3px;
    border-radius: 6px;
    box-shadow: 0 2px 10px var(--black-a7);
}

.MenuTrigger {
    padding: 8px 12px;
    outline: none;
    user-select: none;
    font-weight: 500;
    line-height: 1;
    border-radius: 4px;
    color: var(--violet-11);
    font-size: 13px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2px;
}

.MenuTrigger[data-highlighted],
.MenuTrigger[data-state='open'] {
    background-color: var(--violet-4);
}

.MenuContent,
.MenuSubContent {
    min-width: 220px;
    background-color: white;
    border-radius: 6px;
    padding: 5px;
    box-shadow:
        0px 10px 38px -10px rgba(22, 23, 24, 0.35),
        0px 10px 20px -15px rgba(22, 23, 24, 0.2);
    animation-duration: 400ms;
    animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
    will-change: transform, opacity;
}

.MenuItem,
.MenuSubTrigger,
.MenuCheckboxItem,
.MenuRadioItem {
    all: unset;
    font-size: 13px;
    line-height: 1;
    color: var(--violet-11);
    border-radius: 4px;
    display: flex;
    align-items: center;
    height: 25px;
    padding: 0 10px;
    position: relative;
    user-select: none;
}

.MenuItem.inset,
.MenuSubTrigger.inset,
.MenuCheckboxItem.inset,
.MenuRadioItem.inset {
    padding-left: 20px;
}

.MenuItem[data-state='open'],
.MenuSubTrigger[data-state='open'] {
    background-color: var(--violet-4);
    color: var(--violet-11);
}

.MenuItem[data-highlighted],
.MenuSubTrigger[data-highlighted],
.MenuCheckboxItem[data-highlighted],
.MenuRadioItem[data-highlighted] {
    background-image: linear-gradient(135deg, var(--violet-9) 0%, var(--violet-10) 100%);
    color: var(--violet-1);
}

.MenuItem[data-disabled],
.MenuSubTrigger[data-disabled],
.MenuCheckboxItem[data-disabled],
.MenuRadioItem[data-disabled] {
    color: var(--mauve-8);
    pointer-events: none;
}

.MenuItemIndicator {
    position: absolute;
    left: 0;
    width: 20px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.MenuSeparator {
    height: 1px;
    background-color: var(--violet-6);
    margin: 5px;
}

.MenuLabel {
    padding-left: 5px;
    font-size: 12px;
    line-height: 25px;
    color: var(--mauve-11);
}

.RightSlot {
    margin-left: auto;
    padding-left: 20px;
    color: var(--mauve-9);
}

[data-highlighted] > .RightSlot {
    color: white;
}

[data-disabled] > .RightSlot {
    color: var(--mauve-8);
}

</document_content>
</document>
<document index="10">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-content.directive.ts</source>
<document_content>
import { CdkMenu } from '@angular/cdk/menu';
import { Directive } from '@angular/core';

@Directive({
    selector: '[RdxMenuContent]',
    hostDirectives: [CdkMenu],
    host: {
        role: 'menu',
        '[attr.aria-orientation]': '"vertical"'
    }
})
export class RdxMenuContentDirective {}

</document_content>
</document>
<document index="11">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-directive.ts</source>
<document_content>
import { CdkMenu } from '@angular/cdk/menu';
import { Directive } from '@angular/core';

@Directive({
    selector: '[RdxMenuRoot],[RdxMenuSub]',
    hostDirectives: [CdkMenu]
})
export class RdxMenuDirective {}

</document_content>
</document>
<document index="12">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-group.directive.ts</source>
<document_content>
import { CdkMenuGroup } from '@angular/cdk/menu';
import { Directive } from '@angular/core';

@Directive({
    selector: '[RdxMenuGroup]',
    hostDirectives: [CdkMenuGroup],
    host: {
        role: 'group'
    }
})
export class RdxMenuGroupDirective {}

</document_content>
</document>
<document index="13">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-item-checkbox.directive.ts</source>
<document_content>
import { BooleanInput } from '@angular/cdk/coercion';
import { CdkMenuItemCheckbox } from '@angular/cdk/menu';
import { booleanAttribute, computed, Directive, effect, inject, input, signal } from '@angular/core';
import { outputFromObservable } from '@angular/core/rxjs-interop';
import { getCheckedState, isIndeterminate } from './utils';

@Directive({
    selector: '[RdxMenuItemCheckbox]',
    hostDirectives: [
        {
            directive: CdkMenuItemCheckbox,
            outputs: ['cdkMenuItemTriggered: menuItemTriggered']
        }
    ],
    host: {
        role: 'menuitemcheckbox',
        '[attr.aria-checked]': 'isIndeterminate(checked()) ? "mixed" : checked()',
        '[attr.data-state]': 'getCheckedState(checked())',
        '[attr.data-highlighted]': "highlightedState() ? '' : undefined",

        '(focus)': 'onFocus()',
        '(blur)': 'onBlur()',
        '(pointermove)': 'onPointerMove($event)'
    }
})
export class RdxMenuItemCheckboxDirective {
    private readonly cdkMenuItemCheckbox = inject(CdkMenuItemCheckbox, { host: true });

    readonly disabled = input<boolean, BooleanInput>(false, { transform: booleanAttribute });

    readonly checked = input<boolean | 'indeterminate'>(false);

    readonly onCheckedChange = outputFromObservable(this.cdkMenuItemCheckbox.triggered);

    protected readonly disabledState = computed(() => this.disabled);

    protected readonly highlightedState = computed(() => this.isFocused());

    private readonly isFocused = signal(false);

    constructor() {
        effect(() => {
            if (isIndeterminate(this.checked())) {
                this.cdkMenuItemCheckbox.checked = true;
            } else {
                this.cdkMenuItemCheckbox.checked = !this.checked();
            }

            this.cdkMenuItemCheckbox.disabled = this.disabled();
        });
    }

    onFocus(): void {
        if (!this.disabled()) {
            this.isFocused.set(true);
        }
    }

    onBlur(): void {
        this.isFocused.set(false);
    }

    onPointerMove(event: PointerEvent) {
        if (event.defaultPrevented) return;

        if (!(event.pointerType === 'mouse')) return;

        if (!this.disabled()) {
            const item = event.currentTarget;
            (item as HTMLElement)?.focus({ preventScroll: true });
        }
    }

    protected readonly isIndeterminate = isIndeterminate;
    protected readonly getCheckedState = getCheckedState;
}

</document_content>
</document>
<document index="14">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-item-indicator.directive.ts</source>
<document_content>
import { Directive, inject } from '@angular/core';
import { RdxMenuItemCheckboxDirective } from './menu-item-checkbox.directive';
import { RdxMenuItemRadioDirective } from './menu-item-radio.directive';
import { getCheckedState, isIndeterminate } from './utils';

@Directive({
    selector: '[RdxMenuItemIndicator]',
    host: {
        '[attr.data-state]': 'getCheckedState(isChecked)',

        '[style.display]': 'isChecked ? "" : "none"'
    }
})
export class RdxMenuItemIndicatorDirective {
    private readonly menuItemRadio = inject(RdxMenuItemRadioDirective, { host: true, optional: true });

    private readonly menuCheckboxItem = inject(RdxMenuItemCheckboxDirective, { host: true, optional: true });

    get isChecked(): boolean {
        if (this.menuItemRadio) {
            return this.menuItemRadio.checked();
        }
        if (this.menuCheckboxItem) {
            return isIndeterminate(this.menuCheckboxItem.checked()) || this.menuCheckboxItem.checked() === true;
        }
        return false;
    }

    protected readonly getCheckedState = getCheckedState;
}

</document_content>
</document>
<document index="15">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-item-radio.directive.ts</source>
<document_content>
import { BooleanInput } from '@angular/cdk/coercion';
import { CdkMenuItemRadio } from '@angular/cdk/menu';
import { booleanAttribute, computed, Directive, effect, inject, input, signal } from '@angular/core';
import { outputFromObservable } from '@angular/core/rxjs-interop';
import { getCheckedState } from './utils';

@Directive({
    selector: '[RdxMenuItemRadio]',
    hostDirectives: [
        {
            directive: CdkMenuItemRadio,
            outputs: ['cdkMenuItemTriggered: menuItemTriggered']
        }
    ],
    host: {
        role: 'menuitemradio',
        '[attr.aria-checked]': 'checked()',
        '[attr.data-state]': 'getCheckedState(checked())',
        '[attr.data-highlighted]': "highlightedState() ? '' : undefined",

        '(focus)': 'onFocus()',
        '(blur)': 'onBlur()',
        '(pointermove)': 'onPointerMove($event)'
    }
})
export class RdxMenuItemRadioDirective {
    private readonly cdkMenuItemRadio = inject(CdkMenuItemRadio, { host: true });

    readonly disabled = input<boolean, BooleanInput>(false, { transform: booleanAttribute });

    readonly checked = input<boolean, BooleanInput>(false, { transform: booleanAttribute });

    readonly onValueChange = outputFromObservable(this.cdkMenuItemRadio.triggered);

    protected readonly disabledState = computed(() => this.disabled());

    protected readonly highlightedState = computed(() => this.isFocused());

    private readonly isFocused = signal(false);

    constructor() {
        effect(() => {
            this.cdkMenuItemRadio.checked = this.checked();
            this.cdkMenuItemRadio.disabled = this.disabled();
        });
    }

    onFocus(): void {
        if (!this.disabled()) {
            this.isFocused.set(true);
        }
    }

    onBlur(): void {
        this.isFocused.set(false);
    }

    onPointerMove(event: PointerEvent) {
        if (event.defaultPrevented) return;

        if (!(event.pointerType === 'mouse')) return;

        if (!this.disabled()) {
            const item = event.currentTarget;
            (item as HTMLElement)?.focus({ preventScroll: true });
        }
    }

    protected readonly getCheckedState = getCheckedState;
}

</document_content>
</document>
<document index="16">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-item.directive.ts</source>
<document_content>
import { BooleanInput } from '@angular/cdk/coercion';
import { CdkMenuItem } from '@angular/cdk/menu';
import { booleanAttribute, computed, Directive, effect, inject, input, signal } from '@angular/core';
import { outputFromObservable } from '@angular/core/rxjs-interop';

@Directive({
    selector: '[RdxMenuItem]',
    hostDirectives: [
        {
            directive: CdkMenuItem,
            outputs: ['cdkMenuItemTriggered: menuItemTriggered']
        }
    ],
    host: {
        role: 'menuitem',
        tabindex: '-1',
        '[attr.data-orientation]': "'horizontal'",
        '[attr.data-state]': 'isOpenState()',
        '[attr.aria-disabled]': "disabledState() ? '' : undefined",
        '[attr.data-disabled]': "disabledState() ? '' : undefined",
        '[attr.data-highlighted]': "highlightedState() ? '' : undefined",

        '(focus)': 'onFocus()',
        '(blur)': 'onBlur()',
        '(pointermove)': 'onPointerMove($event)'
    }
})
export class RdxMenuItemDirective {
    private readonly cdkMenuItem = inject(CdkMenuItem, { host: true });

    readonly disabled = input<boolean, BooleanInput>(false, { transform: booleanAttribute });

    readonly onSelect = outputFromObservable(this.cdkMenuItem.triggered);

    private readonly isFocused = signal(false);

    protected readonly disabledState = computed(() => this.disabled());

    protected readonly isOpenState = signal(false);

    protected readonly highlightedState = computed(() => this.isFocused());

    constructor() {
        effect(() => {
            this.cdkMenuItem.disabled = this.disabled();
            this.isOpenState.set(this.cdkMenuItem.isMenuOpen());
        });
    }

    onFocus(): void {
        if (!this.disabled()) {
            this.isFocused.set(true);
        }
    }

    onBlur(): void {
        this.isFocused.set(false);
    }

    onPointerMove(event: PointerEvent) {
        if (event.defaultPrevented) return;

        if (!(event.pointerType === 'mouse')) return;

        if (!this.disabled()) {
            const item = event.currentTarget;
            (item as HTMLElement)?.focus({ preventScroll: true });
        }
    }
}

</document_content>
</document>
<document index="17">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-label.directive.ts</source>
<document_content>
import { Directive } from '@angular/core';

@Directive({
    selector: '[RdxMenuLabel]'
})
export class RdxMenuLabelDirective {}

</document_content>
</document>
<document index="18">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-radio-group.directive.ts</source>
<document_content>
import { CdkMenuGroup } from '@angular/cdk/menu';
import { Directive } from '@angular/core';

@Directive({
    selector: '[RdxMenuRadioGroup]',
    hostDirectives: [CdkMenuGroup]
})
export class RdxMenuRadioGroupDirective {}

</document_content>
</document>
<document index="19">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-separator.directive.ts</source>
<document_content>
import { Directive } from '@angular/core';

@Directive({
    selector: '[RdxMenuSeparator]',
    host: {
        role: 'separator',
        '[attr.aria-orientation]': "'horizontal'"
    }
})
export class RdxMenuSeparatorDirective {}

</document_content>
</document>
<document index="20">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/menu-trigger.directive.ts</source>
<document_content>
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { CdkMenuTrigger } from '@angular/cdk/menu';
import {
    booleanAttribute,
    computed,
    Directive,
    effect,
    inject,
    input,
    numberAttribute,
    SimpleChange,
    untracked
} from '@angular/core';

export type RdxMenuAlign = 'start' | 'center' | 'end';
export type RdxMenuSide = 'top' | 'right' | 'bottom' | 'left';

@Directive({
    selector: '[RdxMenuTrigger]',
    hostDirectives: [
        {
            directive: CdkMenuTrigger,
            inputs: ['cdkMenuTriggerFor: menuTriggerFor', 'cdkMenuPosition: menuPosition']
        }
    ],
    host: {
        role: 'menuitem',
        '[attr.aria-haspopup]': "'menu'",
        '[attr.aria-expanded]': 'cdkTrigger.isOpen()',
        '[attr.data-state]': "cdkTrigger.isOpen() ? 'open': 'closed'",
        '[attr.data-disabled]': "disabled() ? '' : undefined",

        '(pointerdown)': 'onPointerDown($event)'
    }
})
export class RdxMenuTriggerDirective {
    protected readonly cdkTrigger = inject(CdkMenuTrigger, { host: true });

    readonly menuTriggerFor = input.required();

    /**
     * @description The preferred side of the trigger to render against when open. Will be reversed when collisions occur and avoidCollisions is enabled.
     */
    readonly side = input<RdxMenuSide>();

    readonly align = input<RdxMenuAlign>();

    /**
     * @description The distance in pixels from the trigger.
     */
    readonly sideOffset = input<number, NumberInput>(NaN, {
        transform: numberAttribute
    });

    /**
     * @description An offset in pixels from the "start" or "end" alignment options.
     */
    readonly alignOffset = input<number, NumberInput>(NaN, {
        transform: numberAttribute
    });

    readonly disabled = input<boolean, BooleanInput>(false, {
        transform: booleanAttribute
    });

    private enablePositions = false;

    // TODO
    private readonly positions = computed(() => this.computePositions());

    private computePositions() {
        if (this.align() || this.sideOffset() || this.alignOffset() || this.side()) {
            this.enablePositions = true;
        }

        const side = this.side() || 'bottom';
        const align = this.align() || 'center';
        const sideOffset = this.sideOffset() || 0;
        const alignOffset = this.alignOffset() || 0;

        let originX: 'start' | 'center' | 'end' = 'center';
        let originY: 'top' | 'center' | 'bottom' = 'center';
        let overlayX: 'start' | 'center' | 'end' = 'center';
        let overlayY: 'top' | 'center' | 'bottom' = 'center';
        let offsetX = 0;
        let offsetY = 0;

        switch (side) {
            case 'top':
                originY = 'top';
                overlayY = 'bottom';
                offsetY = -sideOffset;
                break;
            case 'bottom':
                originY = 'bottom';
                overlayY = 'top';
                offsetY = sideOffset;
                break;
            case 'left':
                originX = 'start';
                overlayX = 'end';
                offsetX = -sideOffset;
                break;
            case 'right':
                originX = 'end';
                overlayX = 'start';
                offsetX = sideOffset;
                break;
        }

        switch (align) {
            case 'start':
                if (side === 'top' || side === 'bottom') {
                    originX = 'start';
                    overlayX = 'start';
                    offsetX = alignOffset;
                } else {
                    originY = 'top';
                    overlayY = 'top';
                    offsetY = alignOffset;
                }
                break;
            case 'end':
                if (side === 'top' || side === 'bottom') {
                    originX = 'end';
                    overlayX = 'end';
                    offsetX = -alignOffset;
                } else {
                    originY = 'bottom';
                    overlayY = 'bottom';
                    offsetY = -alignOffset;
                }
                break;
            case 'center':
            default:
                if (side === 'top' || side === 'bottom') {
                    originX = 'center';
                    overlayX = 'center';
                } else {
                    originY = 'center';
                    overlayY = 'center';
                }
                break;
        }

        return {
            originX,
            originY,
            overlayX,
            overlayY,
            offsetX,
            offsetY
        };
    }

    constructor() {
        this.onMenuPositionEffect();
    }

    /** @ignore */
    onPointerDown($event: MouseEvent) {
        // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)
        // but not when the control key is pressed (avoiding MacOS right click)
        if (!this.disabled() && $event.button === 0 && !$event.ctrlKey) {
            /* empty */
            if (!this.cdkTrigger.isOpen()) {
                // prevent trigger focusing when opening
                // this allows the content to be given focus without competition
                $event.preventDefault();
            }
        }
    }

    private onMenuPositionEffect() {
        effect(() => {
            const positions = this.positions();

            untracked(() => {
                if (this.enablePositions) {
                    this.setMenuPositions([positions]);
                }
            });
        });
    }

    private setMenuPositions(positions: CdkMenuTrigger['menuPosition']) {
        const prevMenuPosition = this.cdkTrigger.menuPosition;
        this.cdkTrigger.menuPosition = positions;
        this.fireNgOnChanges('menuPosition', this.cdkTrigger.menuPosition, prevMenuPosition);
    }

    private fireNgOnChanges<K extends keyof CdkMenuTrigger, V extends CdkMenuTrigger[K]>(
        input: K,
        currentValue: V,
        previousValue: V,
        firstChange = false
    ) {
        this.cdkTrigger.ngOnChanges({
            [input]: new SimpleChange(previousValue, currentValue, firstChange)
        });
    }
}

</document_content>
</document>
<document index="21">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/menu/src/utils.ts</source>
<document_content>
export type CheckedState = boolean | 'indeterminate';

export function isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {
    return checked === 'indeterminate';
}

export function getCheckedState(checked: CheckedState) {
    return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';
}

</document_content>
</document>
</documents>
