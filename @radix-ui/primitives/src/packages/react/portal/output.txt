<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/radix-ui/primitives/packages/react/portal/README.md</source>
<document_content>
# `react-portal`

## Installation

```sh
$ yarn add @radix-ui/react-portal
# or
$ npm install @radix-ui/react-portal
```

## Usage

View docs [here](https://radix-ui.com/primitives/docs/utilities/portal).

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/radix-ui/primitives/packages/react/portal/eslint.config.mjs</source>
<document_content>
// @ts-check
import { configs } from '@repo/eslint-config/react-package';

export default configs;

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/radix-ui/primitives/packages/react/portal/package.json</source>
<document_content>
{
  "name": "@radix-ui/react-portal",
  "version": "1.1.5-rc.5",
  "license": "MIT",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.mts",
        "default": "./dist/index.mjs"
      },
      "require": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      }
    }
  },
  "source": "./src/index.ts",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "dist",
    "README.md"
  ],
  "sideEffects": false,
  "scripts": {
    "lint": "eslint --max-warnings 0 src",
    "clean": "rm -rf dist",
    "version": "yarn version"
  },
  "dependencies": {
    "@radix-ui/react-primitive": "workspace:*",
    "@radix-ui/react-use-layout-effect": "workspace:*"
  },
  "devDependencies": {
    "@repo/eslint-config": "workspace:*",
    "@repo/typescript-config": "workspace:*",
    "@types/react": "^19.0.7",
    "@types/react-dom": "^19.0.3",
    "eslint": "^9.18.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "typescript": "^5.7.3"
  },
  "peerDependencies": {
    "@types/react": "*",
    "@types/react-dom": "*",
    "react": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc",
    "react-dom": "^16.8 || ^17.0 || ^18.0 || ^19.0 || ^19.0.0-rc"
  },
  "peerDependenciesMeta": {
    "@types/react": {
      "optional": true
    },
    "@types/react-dom": {
      "optional": true
    }
  },
  "homepage": "https://radix-ui.com/primitives",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/radix-ui/primitives.git"
  },
  "bugs": {
    "url": "https://github.com/radix-ui/primitives/issues"
  },
  "stableVersion": "1.1.4"
}

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/radix-ui/primitives/packages/react/portal/src/index.ts</source>
<document_content>
'use client';
export {
  Portal,
  //
  Root,
} from './portal';
export type { PortalProps } from './portal';

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/radix-ui/primitives/packages/react/portal/src/portal.stories.tsx</source>
<document_content>
import * as React from 'react';
import { Portal } from '@radix-ui/react-portal';

export default { title: 'Utilities/Portal' };

export const Base = () => (
  <div
    style={{
      maxWidth: 300,
      maxHeight: 200,
      overflow: 'auto',
      border: '1px solid',
    }}
  >
    <h1>This content is rendered in the main DOM tree</h1>
    <p>
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos porro, est ex quia itaque facere
      fugit necessitatibus aut enim. Nisi rerum quae, repellat in perspiciatis explicabo laboriosam
      necessitatibus eius pariatur.
    </p>

    <Portal>
      <h1>This content is rendered in a portal (another DOM tree)</h1>
      <p>
        Because of the portal, it can appear in a different DOM tree from the main one (by default a
        new element inside the body), even though it is part of the same React tree.
      </p>
    </Portal>
  </div>
);

export const CustomContainer = () => {
  const [portalContainer, setPortalContainer] = React.useState<HTMLDivElement | null>(null);

  return (
    <>
      <div style={{ maxWidth: 300, padding: 10, margin: 10, border: '1px solid' }}>
        <h1>Container A</h1>
        <Portal asChild container={portalContainer}>
          <p>
            This content is rendered in a portal inside Container A but appears inside Container B
            because we have used Container B as a container element for the Portal.
          </p>
        </Portal>
      </div>

      <div
        ref={setPortalContainer}
        style={{ maxWidth: 300, padding: 10, margin: 10, border: '1px solid' }}
      >
        <h1>Container B</h1>
      </div>
    </>
  );
};

export const Chromatic = () => {
  const [portalContainer, setPortalContainer] = React.useState<HTMLDivElement | null>(null);

  return (
    <div style={{ padding: 150 }}>
      <h1>Default (append to body)</h1>
      <div style={{ padding: 10, margin: 10, border: '1px solid blue' }}>
        <p>Container A</p>

        <Portal asChild>
          <div
            style={{
              padding: 10,
              margin: 10,
              border: '1px solid blue',
              position: 'absolute',
              top: 0,
              left: 0,
              zIndex: 9999999,
            }}
          >
            <p>This content is rendered in a portal (another DOM tree)</p>
            <p>
              Because of the portal, it can appear in a different DOM tree from the main one (by
              default a new element inside the body), even though it is part of the same React tree.
            </p>
          </div>
        </Portal>
      </div>

      <h1>Custom container</h1>
      <div style={{ padding: 10, margin: 10, border: '1px solid green' }}>
        <p>Container B</p>
        <Portal asChild container={portalContainer}>
          <div style={{ padding: 10, margin: 10, border: '1px solid green' }}>
            <p>
              This content is rendered in a portal inside Container B but appears inside Container C
              because we have used Container C as a container element for the Portal.
            </p>
          </div>
        </Portal>
      </div>

      <div ref={setPortalContainer} style={{ padding: 10, margin: 10, border: '1px solid' }}>
        <p>Container C</p>
      </div>

      <h1>zIndex and order</h1>
      <p>See squares in the top-left</p>
      <Portal asChild>
        <div
          style={{
            width: 20,
            height: 20,
            backgroundColor: 'red',
            position: 'absolute',
            top: 0,
            left: 0,
            zIndex: 9999999,
          }}
        />
      </Portal>
      <Portal asChild>
        <div
          style={{
            width: 20,
            height: 20,
            backgroundColor: 'green',
            marginLeft: 10,
            marginTop: 10,
            position: 'absolute',
            top: 0,
            left: 0,
            zIndex: 9999999,
          }}
        />
      </Portal>
      <Portal asChild>
        <div
          style={{
            width: 20,
            height: 20,
            backgroundColor: 'blue',
            marginLeft: 20,
            marginTop: 20,
            position: 'absolute',
            top: 0,
            left: 0,
            zIndex: 9999999,
          }}
        />
      </Portal>
    </div>
  );
};
Chromatic.parameters = { chromatic: { disable: false } };

</document_content>
</document>
<document index="6">
<source>/Users/josh/Documents/GitHub/radix-ui/primitives/packages/react/portal/src/portal.tsx</source>
<document_content>
import * as React from 'react';
import ReactDOM from 'react-dom';
import { Primitive } from '@radix-ui/react-primitive';
import { useLayoutEffect } from '@radix-ui/react-use-layout-effect';

/* -------------------------------------------------------------------------------------------------
 * Portal
 * -----------------------------------------------------------------------------------------------*/

const PORTAL_NAME = 'Portal';

type PortalElement = React.ElementRef<typeof Primitive.div>;
type PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;
interface PortalProps extends PrimitiveDivProps {
  /**
   * An optional container where the portaled content should be appended.
   */
  container?: Element | DocumentFragment | null;
}

const Portal = React.forwardRef<PortalElement, PortalProps>((props, forwardedRef) => {
  const { container: containerProp, ...portalProps } = props;
  const [mounted, setMounted] = React.useState(false);
  useLayoutEffect(() => setMounted(true), []);
  const container = containerProp || (mounted && globalThis?.document?.body);
  return container
    ? ReactDOM.createPortal(<Primitive.div {...portalProps} ref={forwardedRef} />, container)
    : null;
});

Portal.displayName = PORTAL_NAME;

/* -----------------------------------------------------------------------------------------------*/

const Root = Portal;

export {
  Portal,
  //
  Root,
};
export type { PortalProps };

</document_content>
</document>
</documents>
