<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/progress/README.md</source>
<document_content>
# @radix-ng/primitives/progress

Secondary entry point of `@radix-ng/primitives`.

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/progress/index.ts</source>
<document_content>
import { NgModule } from '@angular/core';
import { RdxProgressIndicatorDirective } from './src/progress-indicator.directive';
import { RdxProgressRootDirective } from './src/progress-root.directive';

export * from './src/progress-indicator.directive';
export * from './src/progress-root.directive';

export type { ProgressProps } from './src/progress-root.directive';

const _imports = [
    RdxProgressRootDirective,
    RdxProgressIndicatorDirective
];

@NgModule({
    imports: [..._imports],
    exports: [..._imports]
})
export class RdxProgressModule {}

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/progress/ng-package.json</source>
<document_content>
{
    "lib": {
        "entryFile": "index.ts"
    }
}

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/progress/__test__/progress.spec.ts</source>
<document_content>
import { Component } from '@angular/core';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { RdxProgressIndicatorDirective } from '../src/progress-indicator.directive';
import { RdxProgressRootDirective } from '../src/progress-root.directive';

@Component({
    template: `
        <div [id]="id" [value]="value" [max]="max" rdxProgressRoot>
            <div rdxProgressIndicator></div>
        </div>
    `,
    imports: [RdxProgressRootDirective, RdxProgressIndicatorDirective]
})
class TestHostComponent {
    value = 50;
    max = 100;
    id = 'test-progress';
}

describe('RdxProgress', () => {
    let component: TestHostComponent;
    let fixture: ComponentFixture<TestHostComponent>;

    beforeEach(async () => {
        await TestBed.configureTestingModule({
            imports: [TestHostComponent]
        }).compileComponents();

        fixture = TestBed.createComponent(TestHostComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });

    it('should set the correct aria attributes and data attributes', () => {
        const progressElement: HTMLElement = fixture.nativeElement.querySelector('div[role="progressbar"]');

        expect(progressElement.getAttribute('aria-valuemax')).toBe('100');
        expect(progressElement.getAttribute('aria-valuemin')).toBe('0');
        expect(progressElement.getAttribute('aria-valuenow')).toBe('50');
        expect(progressElement.getAttribute('aria-valuetext')).toBe('50%');
        expect(progressElement.getAttribute('data-state')).toBe('loading');
        expect(progressElement.getAttribute('data-value')).toBe('50');
        expect(progressElement.getAttribute('data-max')).toBe('100');
        expect(progressElement.id).toBe('test-progress');
    });

    it('should show complete state when value equals max', () => {
        component.value = 100;
        fixture.detectChanges();

        const progressElement: HTMLElement = fixture.nativeElement.querySelector('div[role="progressbar"]');

        expect(progressElement.getAttribute('data-state')).toBe('complete');
    });
});

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/progress/stories/progress-circular.ts</source>
<document_content>
import { Component, computed, effect, signal } from '@angular/core';
import { RdxProgressIndicatorDirective } from '../src/progress-indicator.directive';
import { RdxProgressRootDirective } from '../src/progress-root.directive';

@Component({
    selector: 'progress-circular',
    imports: [RdxProgressRootDirective, RdxProgressIndicatorDirective],
    template: `
        <div class="progress-container">
            <div [value]="progress()" rdxProgressRoot>
                <svg class="svg-full" viewBox="0 0 100 100">
                    <!-- Background circle -->
                    <path class="circle-track" [attr.d]="trackPath()" />
                    <!-- Progress circle -->
                    <path
                        class="circle-progress"
                        [attr.d]="trackPath()"
                        [style.stroke-linecap]="'round'"
                        [style.stroke-dasharray]="dashOffset() + 'px, ' + circumference + 'px'"
                        [style.stroke-dashoffset]="'0px'"
                        rdxProgressIndicator
                    />
                </svg>
                <div class="progress-center">
                    <span class="progress-text">{{ progress() }}%</span>
                </div>
            </div>
        </div>
    `,
    styles: [
        `
            .progress-container {
                position: relative;
                width: 160px;
                height: 160px;
            }

            .svg-full {
                width: 100%;
                height: 100%;
            }

            .circle-track {
                fill: none;
                stroke: #e0e0e0;
                stroke-width: 6px;
            }

            .circle-progress {
                fill: none;
                stroke: black;
                stroke-width: 6px;
                transition:
                    stroke-dasharray 0.7s,
                    opacity 0.7s;
            }

            .progress-center {
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .progress-text {
                font-size: 1.125rem;
                font-weight: bold;
                color: #333;
            }
        `

    ]
})
export class ProgressCircularComponent {
    private readonly RADIUS = 45;
    protected readonly circumference = 2 * Math.PI * this.RADIUS;

    progress = signal<number>(0);

    readonly dashOffset = computed(() => (this.progress() / 100) * this.circumference);

    trackPath = computed(() => {
        const r = this.RADIUS;
        return `
          M 50 50
          m 0 -${r}
          a ${r} ${r} 0 1 1 0 ${r * 2}
          a ${r} ${r} 0 1 1 0 -${r * 2}
          `;
    });

    constructor() {
        effect(() => {
            setInterval(() => {
                if (this.progress() < 100) {
                    this.progress.update((value) => value + 10);
                } else {
                    this.progress.set(0);
                }
            }, 1000);
        });
    }
}

</document_content>
</document>
<document index="6">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/progress/stories/progress.docs.mdx</source>
<document_content>
import { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';
import { RdxProgressRootDirective } from '../src/progress-root.directive';
import * as ProgressDirectiveStories from './progress.stories';

<Meta title="Primitives/Progress" />

# Progress

#### Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.

<Canvas sourceState="hidden" of={ProgressDirectiveStories.Default} />

## Features

- âœ… Provides context for assistive technology to read the progress of a task.

## Usage

Get started with importing the directive:

```typescript
import { RdxProgressRootDirective, RdxProgressIndicatorDirective } from '@radix-ng/primitives/progress';
```

## Example

```html
<div class="ProgressRoot" rdxProgressRoot [value]="progress">
  <div class="ProgressIndicator" rdxProgressIndicator [style.transform]="'translateX(-' + (100 - progress) +'%)'"></div>
</div>
```

## API Reference

### RdxProgressRootDirective

<ArgTypes of={RdxProgressRootDirective} />

<Markdown>
  {`
  | Data Attribute | Value |
  | ----------- | --------- |
  | [data-state]    | "complete" or "indeterminate" or "loading"   |
  | [data-value]    | The current value          |
  | [data-max] |  The max value     |
  `}
</Markdown>

### RdxProgressIndicatorDirective

Used to show the progress visually. It also makes progress accessible to assistive technologies.

<Markdown>
  {`
  | Data Attribute | Value |
  | ----------- | --------- |
  | [data-state]    | "complete" or "indeterminate" or "loading"   |
  | [data-value]    | The current value          |
  | [data-max] |  The max value     |
  `}
</Markdown>

## Accessibility

Adheres to the [`progressbar` role requirements](https://www.w3.org/WAI/ARIA/apg/patterns/meter).


## Examples

### Progress Circular

<Canvas sourceState="hidden" of={ProgressDirectiveStories.ProgressCircular} />

</document_content>
</document>
<document index="7">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/progress/stories/progress.stories.ts</source>
<document_content>
import { componentWrapperDecorator, Meta, moduleMetadata, StoryObj } from '@storybook/angular';
import { RdxProgressIndicatorDirective } from '../src/progress-indicator.directive';
import { RdxProgressRootDirective } from '../src/progress-root.directive';
import { ProgressCircularComponent } from './progress-circular';

const html = String.raw;

export default {
    title: 'Primitives/Progress',
    decorators: [
        moduleMetadata({
            imports: [RdxProgressRootDirective, RdxProgressIndicatorDirective, ProgressCircularComponent]
        }),
        componentWrapperDecorator(
            (story) => html`
                <div class="radix-themes light light-theme" data-radius="medium" data-scaling="100%">${story}</div>
            `
        )
    ],
    argTypes: {
        progress: {
            options: ['10', '30', '70', '95'],
            control: { type: 'select' }
        }
    }
} as Meta;

type Story = StoryObj;

export const Default: Story = {
    args: {
        progress: 70
    },
    render: (args) => ({
        props: args,
        template: html`
            <div class="ProgressRoot" rdxProgressRoot [value]="progress">
                <div
                    class="ProgressIndicator"
                    rdxProgressIndicator
                    [style.transform]="'translateX(-' + (100 - progress) +'%)'"
                ></div>
            </div>

            <style>
                .ProgressRoot {
                    position: relative;
                    overflow: hidden;
                    background: var(--black-a9);
                    border-radius: 99999px;
                    width: 300px;
                    height: 25px;

                    /* Fix overflow clipping in Safari */
                    /* https://gist.github.com/domske/b66047671c780a238b51c51ffde8d3a0 */
                    transform: translateZ(0);
                }

                .ProgressIndicator {
                    background-color: white;
                    width: 100%;
                    height: 100%;
                    transition: transform 660ms cubic-bezier(0.65, 0, 0.35, 1);
                }
            </style>
        `
    })
};

export const ProgressCircular: Story = {
    render: () => ({
        template: html`
            <progress-circular />
        `
    })
};

</document_content>
</document>
<document index="8">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/progress/src/progress-indicator.directive.ts</source>
<document_content>
import { Directive } from '@angular/core';
import { injectProgress } from './progress-root.directive';

/**
 * Directive to manage progress indicator state and attributes.
 *
 * This directive is used to display the progress indicator inside the progress bar.
 * It inherits the state and value from the `RdxProgressRootDirective`.
 */
@Directive({
    selector: '[rdxProgressIndicator]',
    exportAs: 'rdxProgressIndicator',
    host: {
        '[attr.data-state]': 'progress.progressState()',
        '[attr.data-value]': 'progress.value()',
        '[attr.data-max]': 'progress.max()'
    }
})
export class RdxProgressIndicatorDirective {
    /**
     * This allows the directive to access the progress bar state and values.
     */
    protected readonly progress = injectProgress();
}

</document_content>
</document>
<document index="9">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/progress/src/progress-root.directive.ts</source>
<document_content>
import { computed, Directive, effect, inject, InjectionToken, input, model } from '@angular/core';
import { isNullish, isNumber, provideToken } from '@radix-ng/primitives/core';

export const RdxProgressToken = new InjectionToken<RdxProgressRootDirective>('RdxProgressDirective');

/**
 * Injects the current instance of RdxProgressRootDirective.
 * @returns The instance of RdxProgressRootDirective.
 */
export function injectProgress(): RdxProgressRootDirective {
    return inject(RdxProgressToken);
}

export type ProgressState = 'indeterminate' | 'complete' | 'loading';

export interface ProgressProps {
    value?: number | null;
    max?: number;
    /**
     * A function to get the accessible label text representing the current value in a human-readable format.
     *
     *  If not provided, the value label will be read as the numeric value as a percentage of the max value.
     */
    getValueLabel?: (value: number, max: number) => string;
}

const MIN_PERCENT = 0;
const DEFAULT_MAX = 100;

/**
 * Directive to manage progress bar state and attributes.
 *
 * This directive provides a way to create a progress bar with customizable value and max attributes.
 * It handles aria attributes for accessibility and provides different states like 'indeterminate', 'complete', and 'loading'.
 *
 * @group Components
 */
@Directive({
    selector: '[rdxProgressRoot]',
    exportAs: 'rdxProgressRoot',
    providers: [provideToken(RdxProgressToken, RdxProgressRootDirective)],
    host: {
        role: 'progressbar',
        '[attr.aria-valuemax]': 'max()',
        '[attr.aria-valuemin]': '0',
        '[attr.aria-valuenow]': 'value()',
        '[attr.aria-valuetext]': 'label()',
        '[attr.aria-label]': 'label()',
        '[attr.data-state]': 'progressState()',
        '[attr.data-value]': 'value() ?? undefined',
        '[attr.data-max]': 'max()',
        // set tab index to -1 so screen readers will read the aria-label
        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox
        tabindex: '-1'
    }
})
export class RdxProgressRootDirective {
    /**
     * The current value of the progress bar.
     * @group Props
     * @defaultValue 0
     */
    readonly value = model<number>(MIN_PERCENT);

    /**
     * The maximum value of the progress bar.
     * @defaultValue 100
     * @group Props
     */
    readonly max = model<number>(DEFAULT_MAX);

    /**
     * Function to generate the value label.
     * @group Props
     */
    readonly valueLabel = input<(value: number, max: number) => string>((value, max) =>
        this.defaultGetValueLabel(value, max)
    );

    protected readonly label = computed(() => this.valueLabel()(this.value(), this.max()));

    readonly progressState = computed<ProgressState>(() => {
        if (isNullish(this.value())) {
            return 'indeterminate';
        }
        if (this.value() === this.max()) {
            return 'complete';
        }
        return 'loading';
    });

    constructor() {
        effect(() => {
            const correctedValue = this.validateValue(this.value(), this.max());
            if (correctedValue != null && correctedValue !== this.value()) {
                this.value.set(correctedValue);
            }
        });

        effect(() => {
            const correctedMax = this.validateMax(this.max());
            if (correctedMax !== this.max()) {
                this.max.set(correctedMax);
            }
        });
    }

    private validateValue(value: any, max: number): number | null {
        const isValidValueError =
            isNullish(value) || (isNumber(value) && !Number.isNaN(value) && value <= max && value >= 0);

        if (isValidValueError) return value as null;

        console.error(`Invalid prop \`value\` of value \`${value}\` supplied to \`ProgressRoot\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${DEFAULT_MAX} if no \`max\` prop is set)
  - \`null\`  or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`);
        return null;
    }

    private validateMax(max: number): number {
        const isValidMaxError = isNumber(max) && !Number.isNaN(max) && max > 0;

        if (isValidMaxError) return max;

        console.error(
            `Invalid prop \`max\` of value \`${max}\` supplied to \`ProgressRoot\`. Only numbers greater than 0 are valid max values. Defaulting to \`${DEFAULT_MAX}\`.`
        );
        return DEFAULT_MAX;
    }

    private defaultGetValueLabel(value: number, max: number) {
        return `${Math.round((value / max) * 100)}%`;
    }
}

</document_content>
</document>
</documents>
