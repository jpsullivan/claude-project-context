<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/avatar/README.md</source>
<document_content>
# @radix-ng/primitives/avatar

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/avatar/index.ts</source>
<document_content>
import { NgModule } from '@angular/core';
import { RdxAvatarFallbackDirective } from './src/avatar-fallback.directive';
import { RdxAvatarImageDirective } from './src/avatar-image.directive';
import { RdxAvatarRootDirective } from './src/avatar-root.directive';

export * from './src/avatar-fallback.directive';
export * from './src/avatar-image.directive';
export * from './src/avatar-root.directive';
export type { RdxImageLoadingStatus } from './src/avatar-root.directive';
export * from './src/avatar.config';

const _imports = [
    RdxAvatarRootDirective,
    RdxAvatarFallbackDirective,
    RdxAvatarImageDirective
];

@NgModule({
    imports: [..._imports],
    exports: [..._imports]
})
export class RdxCheckboxModule {}

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/avatar/ng-package.json</source>
<document_content>
{
    "lib": {
        "entryFile": "index.ts"
    }
}

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/avatar/src/avatar-fallback.directive.ts</source>
<document_content>
import { computed, Directive, effect, inject, input, OnDestroy, signal } from '@angular/core';
import { RdxAvatarRootContext } from './avatar-root.directive';
import { injectAvatarConfig } from './avatar.config';

/**
 * @group Components
 */
@Directive({
    selector: 'span[rdxAvatarFallback]',
    standalone: true,
    exportAs: 'rdxAvatarFallback',
    host: {
        '[style.display]': 'shouldRender() ? null : "none" '
    }
})
export class RdxAvatarFallbackDirective implements OnDestroy {
    protected readonly avatarRoot = inject(RdxAvatarRootContext);

    private readonly config = injectAvatarConfig();

    /**
     * Useful for delaying rendering so it only appears for those with slower connections.
     *
     * @group Props
     * @defaultValue 0
     */
    readonly delayMs = input<number>(this.config.delayMs);

    readonly shouldRender = computed(() => this.canRender() && this.avatarRoot.imageLoadingStatus() !== 'loaded');

    protected readonly canRender = signal(false);
    private timeoutId: ReturnType<typeof setTimeout> | null = null;

    constructor() {
        effect(() => {
            const status = this.avatarRoot.imageLoadingStatus();
            if (status === 'loading') {
                this.startDelayTimer();
            } else {
                this.clearDelayTimer();
                this.canRender.set(true);
            }
        });
    }

    private startDelayTimer() {
        this.clearDelayTimer();
        if (this.delayMs() > 0) {
            this.timeoutId = setTimeout(() => {
                this.canRender.set(true);
            }, this.delayMs());
        } else {
            this.canRender.set(true);
        }
    }

    private clearDelayTimer() {
        if (this.timeoutId !== null) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
        }
    }

    ngOnDestroy() {
        this.clearDelayTimer();
    }
}

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/avatar/src/avatar-image.directive.ts</source>
<document_content>
import { computed, Directive, ElementRef, inject, input, OnInit, output } from '@angular/core';
import { RdxAvatarRootContext, RdxImageLoadingStatus } from './avatar-root.directive';

/**
 * @group Components
 */
@Directive({
    selector: 'img[rdxAvatarImage]',
    standalone: true,
    exportAs: 'rdxAvatarImage',
    host: {
        '(load)': 'onLoad()',
        '(error)': 'onError()',
        '[style.display]': '(imageLoadingStatus() === "loaded")? null : "none"'
    }
})
export class RdxAvatarImageDirective implements OnInit {
    private readonly avatarRoot = inject(RdxAvatarRootContext);
    private readonly elementRef = inject(ElementRef<HTMLImageElement>);

    /**
     * @group Props
     */
    readonly src = input<string>();

    /**
     * A callback providing information about the loading status of the image.
     * This is useful in case you want to control more precisely what to render as the image is loading.
     *
     * @group Emits
     */
    readonly onLoadingStatusChange = output<RdxImageLoadingStatus>();

    protected readonly imageLoadingStatus = computed(() => this.avatarRoot.imageLoadingStatus());

    ngOnInit(): void {
        this.nativeElement.src = this.src();

        if (!this.nativeElement.src) {
            this.setImageStatus('error');
        } else if (this.nativeElement.complete) {
            this.setImageStatus('loaded');
        } else {
            this.setImageStatus('loading');
        }
    }

    onLoad() {
        this.setImageStatus('loaded');
    }

    onError() {
        this.setImageStatus('error');
    }

    private setImageStatus(status: RdxImageLoadingStatus) {
        this.avatarRoot.imageLoadingStatus.set(status);
        this.onLoadingStatusChange.emit(status);
    }

    get nativeElement() {
        return this.elementRef.nativeElement;
    }
}

</document_content>
</document>
<document index="6">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/avatar/src/avatar-root.directive.ts</source>
<document_content>
import { Directive, Injectable, signal } from '@angular/core';

export type RdxImageLoadingStatus = 'idle' | 'loading' | 'loaded' | 'error';

@Injectable()
export class RdxAvatarRootContext {
    readonly imageLoadingStatus = signal<RdxImageLoadingStatus>('loading');
}

@Directive({
    selector: 'span[rdxAvatarRoot]',
    exportAs: 'rdxAvatarRoot',
    standalone: true,
    providers: [RdxAvatarRootContext]
})
export class RdxAvatarRootDirective {}

</document_content>
</document>
<document index="7">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/avatar/src/avatar.config.ts</source>
<document_content>
import { inject, InjectionToken, Provider } from '@angular/core';

export interface RdxAvatarConfig {
    /**
     * Define a delay before the fallback is shown.
     * This is useful to only show the fallback for those with slower connections.
     * @default 0
     */
    delayMs: number;
}

export const defaultAvatarConfig: RdxAvatarConfig = {
    delayMs: 0
};

export const RdxAvatarConfigToken = new InjectionToken<RdxAvatarConfig>('RdxAvatarConfigToken');

export function provideRdxAvatarConfig(config: Partial<RdxAvatarConfig>): Provider[] {
    return [
        {
            provide: RdxAvatarConfigToken,
            useValue: { ...defaultAvatarConfig, ...config }
        }
    ];
}

export function injectAvatarConfig(): RdxAvatarConfig {
    return inject(RdxAvatarConfigToken, { optional: true }) ?? defaultAvatarConfig;
}

</document_content>
</document>
</documents>
