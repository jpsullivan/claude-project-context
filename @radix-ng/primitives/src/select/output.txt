<documents>
<document index="1">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/README.md</source>
<document_content>
# @radix-ng/primitives/select

</document_content>
</document>
<document index="2">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/index.ts</source>
<document_content>
import { NgModule } from '@angular/core';
import { RdxSelectContentDirective } from './src/select-content.directive';
import { RdxSelectGroupDirective } from './src/select-group.directive';
import { RdxSelectIconDirective } from './src/select-icon.directive';
import { RdxSelectItemIndicatorDirective } from './src/select-item-indicator.directive';
import { RdxSelectItemDirective } from './src/select-item.directive';
import { RdxSelectLabelDirective } from './src/select-label.directive';
import { RdxSelectSeparatorDirective } from './src/select-separator.directive';
import { RdxSelectTriggerDirective } from './src/select-trigger.directive';
import { RdxSelectValueDirective } from './src/select-value.directive';
import { RdxSelectComponent } from './src/select.component';

export * from './src/select-content.directive';
export * from './src/select-group.directive';
export * from './src/select-icon.directive';
export * from './src/select-item-indicator.directive';
export * from './src/select-item.directive';
export * from './src/select-label.directive';
export * from './src/select-separator.directive';
export * from './src/select-trigger.directive';
export * from './src/select-value.directive';
export * from './src/select.component';

const _imports = [
    RdxSelectContentDirective,
    RdxSelectGroupDirective,
    RdxSelectItemDirective,
    RdxSelectItemIndicatorDirective,
    RdxSelectLabelDirective,
    RdxSelectComponent,
    RdxSelectSeparatorDirective,
    RdxSelectTriggerDirective,
    RdxSelectValueDirective,
    RdxSelectIconDirective
];

@NgModule({
    imports: [..._imports],
    exports: [..._imports]
})
export class RdxSelectModule {}

</document_content>
</document>
<document index="3">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/ng-package.json</source>
<document_content>
{
    "lib": {
        "entryFile": "index.ts"
    }
}

</document_content>
</document>
<document index="4">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/stories/select.docs.mdx</source>
<document_content>
import { ArgTypes, Canvas, Meta } from '@storybook/blocks';
import * as SelectStories from './select.stories';
import { RdxSelectComponent } from '../src/select.component';
import { RdxSelectItemDirective } from '../src/select-item.directive';
import { RdxSelectTriggerDirective } from '../src/select-trigger.directive';
import { RdxSelectContentDirective } from '../src/select-content.directive';

<Meta title="Primitives/Select" />

# Select

#### A vertically stacked set of interactive headings that each reveal an associated section of content.

## Single

<Canvas sourceState="hidden" of={SelectStories.Default} />

## Features

- ✅ Can be controlled or uncontrolled.
- ✅ Offers 2 positioning modes.
- ✅ Supports items, labels, groups of items.
- ✅ Focus is fully managed.
- ✅ Full keyboard navigation.
- ✅ Supports custom placeholder.
- ✅ Typeahead support.
- ✅ Supports Right to Left direction.

## Anatomy

```html
<div rdxSelectRoot>
    <div rdxSelectContent>
        <div rdxSelectItem></div>
    </div>
</div>
```

## Import

Get started with importing the directives:

```typescript
import {
  RdxAccordionRootDirective,
  RdxAccordionItemDirective,
  RdxAccordionTriggerDirective,
  RdxAccordionContentDirective
} from '@radix-ng/primitives/select';
```

## API Reference

### Root
`RdxSelectComponent`

<ArgTypes of={RdxSelectComponent} />

### Item
`RdxSelectItemDirective`

<ArgTypes of={RdxSelectItemDirective} />

### Trigger
`RdxSelectTriggerDirective`

<ArgTypes of={RdxSelectTriggerDirective} />

### Content
`RdxSelectContentDirective`

<ArgTypes of={RdxSelectContentDirective} />

</document_content>
</document>
<document index="5">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/stories/select.stories.ts</source>
<document_content>
import { BrowserAnimationsModule, provideAnimations } from '@angular/platform-browser/animations';
import {
    RdxSelectComponent,
    RdxSelectContentDirective,
    RdxSelectGroupDirective,
    RdxSelectIconDirective,
    RdxSelectItemDirective,
    RdxSelectItemIndicatorDirective,
    RdxSelectLabelDirective,
    RdxSelectSeparatorDirective,
    RdxSelectTriggerDirective,
    RdxSelectValueDirective
} from '@radix-ng/primitives/select';
import { componentWrapperDecorator, Meta, moduleMetadata, StoryObj } from '@storybook/angular';
import { Check, ChevronDown, LucideAngularModule } from 'lucide-angular';

const html = String.raw;

export default {
    title: 'Primitives/Select',
    decorators: [
        moduleMetadata({
            imports: [
                RdxSelectComponent,
                RdxSelectSeparatorDirective,
                RdxSelectLabelDirective,
                RdxSelectItemIndicatorDirective,
                RdxSelectItemDirective,
                RdxSelectGroupDirective,
                BrowserAnimationsModule,
                RdxSelectContentDirective,
                RdxSelectTriggerDirective,
                RdxSelectValueDirective,
                RdxSelectIconDirective,
                LucideAngularModule,
                LucideAngularModule.pick({ ChevronDown, Check })
            ],
            providers: [provideAnimations()]
        }),
        componentWrapperDecorator(
            (story) => html`
                <div
                    class="radix-themes light light-theme radix-themes-default-fonts"
                    data-accent-color="indigo"
                    data-radius="medium"
                    data-scaling="100%"
                >
                    ${story}
                </div>

                <style>
                    /* reset */
                    button {
                        all: unset;
                    }

                    .SelectTrigger {
                        display: inline-flex;
                        align-items: center;
                        justify-content: center;
                        border-radius: 4px;
                        padding: 0 15px;
                        font-size: 13px;
                        line-height: 1;
                        height: 35px;
                        gap: 5px;
                        background-color: white;
                        color: var(--violet-11);
                        box-shadow: 0 2px 10px var(--black-a7);
                    }
                    .SelectTrigger:hover {
                        background-color: var(--mauve-3);
                    }
                    .SelectTrigger:focus {
                        box-shadow: 0 0 0 2px black;
                    }
                    .SelectTrigger[data-placeholder] {
                        color: var(--violet-9);
                    }

                    .SelectIcon {
                        color: Var(--violet-11);
                    }

                    .SelectContent {
                        overflow: hidden;
                        background-color: white;
                        border-radius: 6px;
                        box-shadow:
                            0px 10px 38px -10px rgba(22, 23, 24, 0.35),
                            0px 10px 20px -15px rgba(22, 23, 24, 0.2);
                    }

                    .SelectViewport {
                        padding: 5px;
                    }

                    .SelectItem {
                        font-size: 13px;
                        line-height: 1;
                        color: var(--violet-11);
                        border-radius: 3px;
                        display: flex;
                        align-items: center;
                        height: 25px;
                        padding: 0 35px 0 25px;
                        position: relative;
                        user-select: none;
                    }
                    .SelectItem[data-disabled] {
                        color: var(--mauve-8);
                        pointer-events: none;
                    }
                    .SelectItem[data-highlighted] {
                        outline: none;
                        background-color: var(--violet-9);
                        color: var(--violet-1);
                    }

                    .SelectLabel {
                        padding: 0 25px;
                        font-size: 12px;
                        line-height: 25px;
                        color: var(--mauve-11);
                    }

                    .SelectSeparator {
                        height: 1px;
                        background-color: var(--violet-6);
                        margin: 5px;
                    }

                    .SelectItemIndicator {
                        position: absolute;
                        left: 0;
                        width: 25px;
                        display: inline-flex;
                        align-items: center;
                        justify-content: center;
                    }

                    .SelectScrollButton {
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        height: 25px;
                        background-color: white;
                        color: var(--violet-11);
                        cursor: default;
                    }
                </style>
            `
        )
    ]
} as Meta;

type Story = StoryObj;

export const Default: Story = {
    args: {
        foodGroups: [
            {
                label: 'Fruits',
                foods: [
                    { value: 'apple', label: 'Apple' },
                    { value: 'banana', label: 'Banana' },
                    { value: 'blueberry', label: 'Blueberry' },
                    { value: 'grapes', label: 'Grapes' },
                    { value: 'pineapple', label: 'Pineapple' }
                ]
            },
            {
                label: 'Vegetables',
                foods: [
                    { value: 'aubergine', label: 'Aubergine' },
                    { value: 'broccoli', label: 'Broccoli' },
                    { value: 'carrot', label: 'Carrot', disabled: true },
                    { value: 'courgette', label: 'Courgette' },
                    { value: 'leek', label: 'Leek' }
                ]
            },
            {
                label: 'Meat',
                foods: [
                    { value: 'beef', label: 'Beef' },
                    { value: 'beef-with-sauce', label: 'Beef with sauce' },
                    { value: 'chicken', label: 'Chicken' },
                    { value: 'lamb', label: 'Lamb' },
                    { value: 'pork', label: 'Pork' }
                ]
            },
            {
                foods: [
                    { value: 'candies', label: 'Candies' },
                    { value: 'chocolates', label: 'Chocolates' }
                ]
            }
        ]
    },
    render: (args) => ({
        props: args,
        template: html`
            <span rdxSelect>
                <button class="SelectTrigger" rdxSelectTrigger>
                    <span rdxSelectValue placeholder="Select a fruit…"></span>
                    <lucide-icon class="SelectIcon" size="16" name="chevron-down" rdxSelectIcon />
                </button>
                <div class="SelectContent SelectViewport" rdxSelectContent>
                    @for (group of foodGroups; track group; let last = $last) {
                    <div class="SelectGroup" rdxSelectGroup>
                        <div class="SelectLabel" rdxSelectLabel>{{ group.label }}</div>
                        @for (food of group.foods; track food) {
                        <div class="SelectItem" rdxSelectItem [value]="food.value" [disabled]="food.disabled">
                            <lucide-icon class="SelectItemIndicator" rdxSelectItemIndicator size="16" name="check" />
                            {{ food.label }}
                        </div>
                        }
                    </div>
                    @if (!last) {
                    <div class="SelectSeparator" rdxSelectSeparator></div>
                    } }
                </div>
            </span>
        `
    })
};

</document_content>
</document>
<document index="6">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/__tests__/select-content.directive.spec.ts</source>
<document_content>
import { RdxSelectContentDirective } from '../src/select-content.directive';

xdescribe('RdxSelectContentDirective', () => {
    it('should create an instance', () => {
        const directive = new RdxSelectContentDirective();
        expect(directive).toBeTruthy();
    });
});

</document_content>
</document>
<document index="7">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/__tests__/select-item.directive.spec.ts</source>
<document_content>
import { RdxSelectItemDirective } from '../src/select-item.directive';

xdescribe('RdxSelectItemDirective', () => {
    it('should create an instance', () => {
        const directive = new RdxSelectItemDirective();
        expect(directive).toBeTruthy();
    });
});

</document_content>
</document>
<document index="8">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/__tests__/select-trigger.directive.spec.ts</source>
<document_content>
import { RdxSelectTriggerDirective } from '../src/select-trigger.directive';

xdescribe('RdxSelectTriggerDirective', () => {
    it('should create an instance', () => {
        const directive = new RdxSelectTriggerDirective();
        expect(directive).toBeTruthy();
    });
});

</document_content>
</document>
<document index="9">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/__tests__/select.directive.spec.ts</source>
<document_content>
import { RdxSelectComponent } from '../src/select.component';

xdescribe('RdxSelectDirective', () => {
    it('should create an instance', () => {
        const directive = new RdxSelectComponent();
        expect(directive).toBeTruthy();
    });
});

</document_content>
</document>
<document index="10">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select-content.directive.ts</source>
<document_content>
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { AfterContentInit, ContentChildren, DestroyRef, Directive, inject, QueryList } from '@angular/core';
import { pairwise, startWith, Subject } from 'rxjs';
import { RdxSelectItemDirective } from './select-item.directive';
import { RdxSelectComponent } from './select.component';

@Directive({
    selector: '[rdxSelectContent]',
    standalone: true,
    exportAs: 'rdxSelectContent',
    host: {
        '[attr.role]': '"listbox"',
        '[attr.data-state]': "select.open ? 'open': 'closed'",
        '[attr.data-side]': 'true',
        '[attr.data-align]': 'true',
        '(keydown)': 'keyManager.onKeydown($event)'
    }
})
export class RdxSelectContentDirective implements AfterContentInit {
    protected readonly destroyRef = inject(DestroyRef);
    protected readonly dir = inject(Directionality, { optional: true });
    protected select = inject(RdxSelectComponent);

    readonly highlighted = new Subject<RdxSelectItemDirective>();

    keyManager: ActiveDescendantKeyManager<RdxSelectItemDirective>;

    @ContentChildren(RdxSelectItemDirective, { descendants: true })
    options: QueryList<RdxSelectItemDirective>;

    constructor() {
        this.highlighted.pipe(startWith(null), pairwise()).subscribe(([prev, item]) => {
            if (prev) {
                prev.highlighted = false;
            }

            if (item) {
                item.highlighted = true;
            }
        });
    }

    initKeyManager() {
        return new ActiveDescendantKeyManager<RdxSelectItemDirective>(this.options)
            .withTypeAhead()
            .withVerticalOrientation()
            .withHorizontalOrientation(this.dir?.value ?? 'ltr');
    }

    ngAfterContentInit(): void {
        this.keyManager = this.initKeyManager();
    }
}

</document_content>
</document>
<document index="11">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select-group.directive.ts</source>
<document_content>
import { Directive } from '@angular/core';

@Directive({
    selector: '[rdxSelectGroup]',
    standalone: true,
    exportAs: 'rdxSelectGroup',
    host: {
        '[attr.role]': '"group"'
    }
})
export class RdxSelectGroupDirective {}

</document_content>
</document>
<document index="12">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select-icon.directive.ts</source>
<document_content>
import { Directive } from '@angular/core';

@Directive({
    selector: '[rdxSelectIcon]',
    standalone: true,
    exportAs: 'rdxSelectIcon',
    host: {
        '[attr.aria-hidden]': 'true'
    }
})
export class RdxSelectIconDirective {}

</document_content>
</document>
<document index="13">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select-item-indicator.directive.ts</source>
<document_content>
import { Directive, inject } from '@angular/core';
import { RdxSelectItemDirective } from './select-item.directive';

@Directive({
    selector: '[rdxSelectItemIndicator]',
    standalone: true,
    exportAs: 'rdxSelectItemIndicator',
    host: {
        '[attr.aria-hidden]': 'true',
        '[style.display]': 'item.selected ? "" : "none"'
    }
})
export class RdxSelectItemIndicatorDirective {
    protected item = inject(RdxSelectItemDirective);
}

</document_content>
</document>
<document index="14">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select-item.directive.ts</source>
<document_content>
import { Highlightable } from '@angular/cdk/a11y';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { booleanAttribute, Directive, ElementRef, EventEmitter, inject, Input } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { RdxSelectContentDirective } from './select-content.directive';
import { RdxSelectComponent } from './select.component';

let nextId = 0;

export class RdxSelectItemChange<T = RdxSelectItemDirective> {
    constructor(public source: T) {}
}

@Directive({
    selector: '[rdxSelectItem]',
    standalone: true,
    exportAs: 'rdxSelectItem',
    host: {
        '[attr.role]': '"option"',
        '[attr.data-state]': 'dataState',
        '[attr.aria-selected]': 'selected',
        '[attr.data-disabled]': 'disabled || null',
        '[attr.data-highlighted]': 'highlighted || null',
        '[attr.tabindex]': '-1',
        '(focus)': 'content.highlighted.next(this)',
        '(click)': 'selectViaInteraction()',
        '(keydown)': 'handleKeydown($event)',
        '(pointermove)': 'onPointerMove()'
    }
})
export class RdxSelectItemDirective implements Highlightable {
    protected readonly select = inject(RdxSelectComponent);
    protected readonly content = inject(RdxSelectContentDirective);
    readonly onSelectionChange = new EventEmitter<RdxSelectItemChange>();
    protected readonly nativeElement = inject(ElementRef).nativeElement;

    highlighted: boolean = false;

    selected: boolean;

    get dataState(): string {
        return this.selected ? 'checked' : 'unchecked';
    }

    /**
     * The unique SelectItem id.
     * @ignore
     */
    readonly id: string = `rdx-select-item-${nextId++}`;

    @Input()
    set value(value: string) {
        this._value = value;
    }

    get value(): string {
        return this._value || this.id;
    }

    private _value?: string;

    @Input() textValue: string | null = null;

    /** Whether the SelectItem is disabled. */
    @Input({ transform: booleanAttribute })
    set disabled(value: boolean) {
        this._disabled = value;
    }

    get disabled(): boolean {
        return this._disabled;
    }

    private _disabled: boolean;

    get viewValue(): string {
        return this.textValue ?? this.nativeElement.textContent;
    }

    constructor() {
        this.content.highlighted.pipe(takeUntilDestroyed()).subscribe((value) => {
            if (value !== this) {
                this.highlighted = false;
            }
        });
    }

    /** Gets the label to be used when determining whether the option should be focused.
     * @ignore
     */
    getLabel(): string {
        return this.viewValue;
    }

    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     * @ignore
     */
    selectViaInteraction(): void {
        if (!this.disabled) {
            this.selected = true;

            this.onSelectionChange.emit(new RdxSelectItemChange(this));
        }
    }

    /** @ignore */
    handleKeydown(event: KeyboardEvent): void {
        if (event.keyCode === ENTER || event.keyCode === SPACE) {
            this.selectViaInteraction();

            // Prevent the page from scrolling down and form submits.
            event.preventDefault();
            event.stopPropagation();
        }
    }

    /** @ignore */
    setActiveStyles(): void {
        this.highlighted = true;
        this.nativeElement.focus({ preventScroll: true });
    }

    /** @ignore */
    setInactiveStyles(): void {
        this.highlighted = false;
    }

    protected onPointerMove(): void {
        if (!this.highlighted) {
            this.nativeElement.focus({ preventScroll: true });
            this.select.updateActiveItem(this);
        }
    }
}

</document_content>
</document>
<document index="15">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select-label.directive.ts</source>
<document_content>
import { Directive } from '@angular/core';

@Directive({
    selector: '[rdxSelectLabel]',
    standalone: true,
    exportAs: 'rdxSelectLabel'
})
export class RdxSelectLabelDirective {}

</document_content>
</document>
<document index="16">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select-separator.directive.ts</source>
<document_content>
import { Directive } from '@angular/core';

@Directive({
    selector: '[rdxSelectSeparator]',
    standalone: true,
    exportAs: 'rdxSelectSeparator',
    host: {
        '[attr.aria-hidden]': 'true'
    }
})
export class RdxSelectSeparatorDirective {}

</document_content>
</document>
<document index="17">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select-trigger.directive.ts</source>
<document_content>
import { ContentChild, Directive, ElementRef, inject } from '@angular/core';
import { RdxSelectValueDirective } from './select-value.directive';
import { RdxSelectComponent } from './select.component';

@Directive({
    selector: '[rdxSelectTrigger]',
    standalone: true,
    host: {
        '[attr.type]': '"button"',
        '[attr.role]': '"combobox"',
        '[attr.aria-autocomplete]': '"none"',
        '[attr.dir]': 'select.dir.value',
        '[attr.aria-expanded]': 'select.open',
        '[attr.aria-required]': 'select.required',

        '[attr.disabled]': 'select.disabled ? "" : null',
        '[attr.data-disabled]': 'select.disabled ? "" : null',
        '[attr.data-state]': "select.open ? 'open': 'closed'",
        '[attr.data-placeholder]': 'value.placeholder || null'
    }
})
export class RdxSelectTriggerDirective {
    protected nativeElement = inject(ElementRef).nativeElement;
    protected select = inject(RdxSelectComponent);

    @ContentChild(RdxSelectValueDirective) protected value: RdxSelectValueDirective;

    focus() {
        this.nativeElement.focus();
    }
}

</document_content>
</document>
<document index="18">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select-value.directive.ts</source>
<document_content>
import { Component, inject, Input } from '@angular/core';
import { RdxSelectComponent } from './select.component';

@Component({
    selector: '[rdxSelectValue]',
    standalone: true,
    exportAs: 'rdxSelectValue',
    template: `
        {{ select.selectionModel.isEmpty() ? placeholder : select.selected }}
    `,
    styles: `
        /* we don't want events from the children to bubble through the item they came from */
        :host {
            pointer-events: none;
        }
    `
})
export class RdxSelectValueDirective {
    select = inject(RdxSelectComponent);

    @Input() placeholder: string;
}

</document_content>
</document>
<document index="19">
<source>/Users/josh/Documents/GitHub/radix-ng/primitives/packages/primitives/select/src/select.component.ts</source>
<document_content>
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { SelectionModel } from '@angular/cdk/collections';
import { CdkConnectedOverlay, ConnectedPosition, Overlay, OverlayModule } from '@angular/cdk/overlay';
import {
    AfterContentInit,
    booleanAttribute,
    ChangeDetectorRef,
    Component,
    ContentChild,
    ContentChildren,
    DestroyRef,
    ElementRef,
    EventEmitter,
    forwardRef,
    inject,
    Input,
    NgZone,
    OnInit,
    Output,
    QueryList,
    ViewChild
} from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { defer, delay, merge, Observable, Subscription, switchMap, take } from 'rxjs';
import { RdxSelectContentDirective } from './select-content.directive';
import { RdxSelectItemChange, RdxSelectItemDirective } from './select-item.directive';
import { RdxSelectTriggerDirective } from './select-trigger.directive';

let nextId = 0;

@Component({
    selector: '[rdxSelect]',
    template: `
        <ng-content select="[rdxSelectTrigger]" />

        <ng-template
            [cdkConnectedOverlayOpen]="open"
            [cdkConnectedOverlayOrigin]="elementRef"
            [cdkConnectedOverlayPositions]="positions"
            [cdkConnectedOverlayScrollStrategy]="overlay.scrollStrategies.reposition()"
            (attach)="onAttached()"
            (backdropClick)="close()"
            (detach)="onDetach()"
            cdkConnectedOverlay
        >
            <ng-content select="[rdxSelectContent]" />
        </ng-template>
    `,
    host: {
        '(click)': 'toggle()',
        '(keydown)': 'content.keyManager.onKeydown($event)'
    },
    imports: [
        OverlayModule
    ]
})
export class RdxSelectComponent implements OnInit, AfterContentInit {
    protected overlay = inject(Overlay);
    protected elementRef = inject(ElementRef);
    protected changeDetectorRef = inject(ChangeDetectorRef);
    private readonly destroyRef = inject(DestroyRef);
    private readonly ngZone = inject(NgZone);

    @ContentChild(RdxSelectTriggerDirective) protected trigger: RdxSelectTriggerDirective;

    @ContentChild(forwardRef(() => RdxSelectContentDirective))
    protected content: RdxSelectContentDirective;

    @ContentChildren(forwardRef(() => RdxSelectItemDirective), { descendants: true })
    items: QueryList<RdxSelectItemDirective>;

    @ViewChild(CdkConnectedOverlay, { static: false }) overlayDir: CdkConnectedOverlay;

    /** Deals with the selection logic. */
    selectionModel: SelectionModel<RdxSelectItemDirective>;

    /**
     * This position config ensures that the top "start" corner of the overlay
     * is aligned with the top "start" of the origin by default (overlapping
     * the trigger completely). If the panel cannot fit below the trigger, it
     * will fall back to a position above the trigger.
     */
    positions: ConnectedPosition[] = [
        {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top'
        },
        {
            originX: 'start',
            originY: 'top',
            overlayX: 'start',
            overlayY: 'bottom'
        }
    ];

    private closeSubscription = Subscription.EMPTY;

    /**
     * @ignore
     */
    readonly dir = inject(Directionality, { optional: true });

    /**
     * @ignore
     */
    protected keyManager: ActiveDescendantKeyManager<RdxSelectItemDirective>;

    /**
     * @ignore
     */
    readonly id: string = `rdx-select-${nextId++}`;

    @Input() defaultValue: string;
    @Input() name: string;

    @Input({ transform: booleanAttribute }) defaultOpen: boolean;

    @Input({ transform: booleanAttribute }) open: boolean = false;

    /** Whether the Select is disabled. */
    @Input({ transform: booleanAttribute }) disabled: boolean;

    @Input({ transform: booleanAttribute }) required: boolean;

    /**
     * The controlled value of the item to expand
     */
    @Input()
    set value(value: string) {
        if (this._value !== value) {
            this._value = value;

            this.selectValue(value);

            this.changeDetectorRef.markForCheck();
        }
    }

    get value(): string | null {
        return this._value ?? this.defaultValue;
    }

    private _value?: string;

    @Output() readonly onValueChange: EventEmitter<string> = new EventEmitter<string>();

    @Output() readonly onOpenChange: EventEmitter<boolean> = new EventEmitter<boolean>();

    readonly optionSelectionChanges: Observable<RdxSelectItemChange> = defer(() => {
        if (this.content.options) {
            return merge(...this.content.options.map((option) => option.onSelectionChange));
        }

        return this.ngZone.onStable.asObservable().pipe(
            take(1),
            switchMap(() => this.optionSelectionChanges)
        );
    }) as Observable<RdxSelectItemChange>;

    get selected(): string | null {
        return this.selectionModel.selected[0].viewValue || null;
    }

    ngOnInit() {
        this.selectionModel = new SelectionModel<RdxSelectItemDirective>();

        this.selectionModel.changed.subscribe((changes) => {
            if (changes.added.length) {
                this.onValueChange.emit(this.selectionModel.selected[0].value);
            }

            if (changes.removed.length) {
                changes.removed.forEach((item) => (item.selected = false));
            }
        });
    }

    ngAfterContentInit() {
        this.selectDefaultValue();

        this.optionSelectionChanges.subscribe((event) => {
            this.selectionModel.clear();

            this.selectionModel.select(event.source);

            this.close();
            this.trigger.focus();
        });

        this.content.keyManager.tabOut.subscribe(() => {
            if (this.open) this.close();
        });

        if (this.defaultOpen) {
            this.openPanel();
        }
    }

    /**
     * Callback that is invoked when the overlay panel has been attached.
     */
    onAttached(): void {
        this.closeSubscription = this.closingActions()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .pipe(delay(0))
            .subscribe(() => this.close());
    }

    onDetach() {
        this.close();
        this.closeSubscription.unsubscribe();
    }

    /** Toggles the overlay panel open or closed. */
    toggle(): void {
        if (this.open) {
            this.close();
        } else {
            this.openPanel();
        }
    }

    openPanel() {
        this.open = true;

        this.onOpenChange.emit(this.open);
    }

    close() {
        this.open = false;

        this.onOpenChange.emit(this.open);
    }

    updateActiveItem(item: RdxSelectItemDirective) {
        this.content.keyManager.updateActiveItem(item);
    }

    private selectDefaultValue(): void {
        if (!this.defaultValue) return;

        this.selectValue(this.defaultValue);
    }

    private selectValue(value: string): void {
        const option = this.content?.options.find((option) => option.value === value);

        if (option) {
            option.selected = true;
            option.highlighted = true;

            this.selectionModel.select(option);
            this.updateActiveItem(option);
        }
    }

    private closingActions() {
        return merge(this.overlayDir.overlayRef!.outsidePointerEvents(), this.overlayDir.overlayRef!.detachments());
    }
}

</document_content>
</document>
</documents>
